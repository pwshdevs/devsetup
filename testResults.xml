<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="326" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2025-08-28" time="17:56:38">
  <environment user-domain="DESKTOP-D6V8VS2" clr-version="9.0.6" nunit-version="2.5.8.0" os-version="10.0.19045" machine-name="DESKTOP-D6V8VS2" platform="Microsoft Windows 10 Pro|C:\Windows|\Device\Harddisk0\Partition3" user="Joshua Wilson" cwd="C:\git-projects\devsetup" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="22.7023" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\3rdParty\ConvertFrom-3rdPartyInstall.Tests.ps1" executed="True" result="Success" success="True" time="0.2809" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\3rdParty\ConvertFrom-3rdPartyInstall.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertFrom-3rdPartyInstall" executed="True" result="Success" success="True" time="0.1705" asserts="0" description="ConvertFrom-3rdPartyInstall">
            <results>
              <test-suite type="TestFixture" name="ConvertFrom-3rdPartyInstall.When both conversions succeed" executed="True" result="Success" success="True" time="0.0385" asserts="0" description="ConvertFrom-3rdPartyInstall.When both conversions succeed">
                <results>
                  <test-case description="Should not write any warnings" name="ConvertFrom-3rdPartyInstall.When both conversions succeed.Should not write any warnings" time="0.0258" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConvertFrom-3rdPartyInstall.When Visual Studio conversion fails" executed="True" result="Success" success="True" time="0.086" asserts="0" description="ConvertFrom-3rdPartyInstall.When Visual Studio conversion fails">
                <results>
                  <test-case description="Should write a warning for Visual Studio" name="ConvertFrom-3rdPartyInstall.When Visual Studio conversion fails.Should write a warning for Visual Studio" time="0.0379" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConvertFrom-3rdPartyInstall.When Visual Studio Code conversion fails" executed="True" result="Success" success="True" time="0.1261" asserts="0" description="ConvertFrom-3rdPartyInstall.When Visual Studio Code conversion fails">
                <results>
                  <test-case description="Should write a warning for Visual Studio Code" name="ConvertFrom-3rdPartyInstall.When Visual Studio Code conversion fails.Should write a warning for Visual Studio Code" time="0.024" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConvertFrom-3rdPartyInstall.When both conversions fail" executed="True" result="Success" success="True" time="0.1612" asserts="0" description="ConvertFrom-3rdPartyInstall.When both conversions fail">
                <results>
                  <test-case description="Should write warnings for both" name="ConvertFrom-3rdPartyInstall.When both conversions fail.Should write warnings for both" time="0.0258" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Commands\Export-DevSetupEnv.Tests.ps1" executed="True" result="Success" success="True" time="0.2857" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Commands\Export-DevSetupEnv.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Export-DevSetupEnv" executed="True" result="Success" success="True" time="0.1089" asserts="0" description="Export-DevSetupEnv">
            <results>
              <test-suite type="TestFixture" name="Export-DevSetupEnv.When called with a valid name" executed="True" result="Success" success="True" time="0.0301" asserts="0" description="Export-DevSetupEnv.When called with a valid name">
                <results>
                  <test-case description="Should create the config file and return its path" name="Export-DevSetupEnv.When called with a valid name.Should create the config file and return its path" time="0.0207" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-DevSetupEnv.When called with a name that needs sanitization" executed="True" result="Success" success="True" time="0.0653" asserts="0" description="Export-DevSetupEnv.When called with a name that needs sanitization">
                <results>
                  <test-case description="Should sanitize the name and warn" name="Export-DevSetupEnv.When called with a name that needs sanitization.Should sanitize the name and warn" time="0.0211" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-DevSetupEnv.When Write-NewConfig fails" executed="True" result="Success" success="True" time="0.0992" asserts="0" description="Export-DevSetupEnv.When Write-NewConfig fails">
                <results>
                  <test-case description="Should write error and return null" name="Export-DevSetupEnv.When Write-NewConfig fails.Should write error and return null" time="0.0218" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Commands\Initialize-DevSetup.Tests.ps1" executed="True" result="Success" success="True" time="0.4558" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Commands\Initialize-DevSetup.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Initialize-DevSetup" executed="True" result="Success" success="True" time="0.2855" asserts="0" description="Initialize-DevSetup">
            <results>
              <test-suite type="TestFixture" name="Initialize-DevSetup.When all steps succeed" executed="True" result="Success" success="True" time="0.0971" asserts="0" description="Initialize-DevSetup.When all steps succeed">
                <results>
                  <test-case description="Should install dependencies, create directories, and return true" name="Initialize-DevSetup.When all steps succeed.Should install dependencies, create directories, and return true" time="0.0875" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetup.When core dependencies fail to install" executed="True" result="Success" success="True" time="0.1214" asserts="0" description="Initialize-DevSetup.When core dependencies fail to install">
                <results>
                  <test-case description="Should write error and return nothing" name="Initialize-DevSetup.When core dependencies fail to install.Should write error and return nothing" time="0.015" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetup.When .devsetup directory already exists" executed="True" result="Success" success="True" time="0.1956" asserts="0" description="Initialize-DevSetup.When .devsetup directory already exists">
                <results>
                  <test-case description="Should not create the directory and should log verbose" name="Initialize-DevSetup.When .devsetup directory already exists.Should not create the directory and should log verbose" time="0.0646" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetup.When environment path initialization fails" executed="True" result="Success" success="True" time="0.2494" asserts="0" description="Initialize-DevSetup.When environment path initialization fails">
                <results>
                  <test-case description="Should write error and return false" name="Initialize-DevSetup.When environment path initialization fails.Should write error and return false" time="0.0437" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetup.When an exception occurs during initialization" executed="True" result="Success" success="True" time="0.2763" asserts="0" description="Initialize-DevSetup.When an exception occurs during initialization">
                <results>
                  <test-case description="Should write error and return false" name="Initialize-DevSetup.When an exception occurs during initialization.Should write error and return false" time="0.0176" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Commands\Install-DevSetupEnv.Tests.ps1" executed="True" result="Success" success="True" time="0.5745" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Commands\Install-DevSetupEnv.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-DevSetupEnv" executed="True" result="Success" success="True" time="0.3565" asserts="0" description="Install-DevSetupEnv">
            <results>
              <test-suite type="TestFixture" name="Install-DevSetupEnv.When environment file does not exist" executed="True" result="Success" success="True" time="0.0345" asserts="0" description="Install-DevSetupEnv.When environment file does not exist">
                <results>
                  <test-case description="Should write error and return" name="Install-DevSetupEnv.When environment file does not exist.Should write error and return" time="0.0233" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-DevSetupEnv.When YAML parsing fails" executed="True" result="Success" success="True" time="0.0722" asserts="0" description="Install-DevSetupEnv.When YAML parsing fails">
                <results>
                  <test-case description="Should write error and return" name="Install-DevSetupEnv.When YAML parsing fails.Should write error and return" time="0.0281" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-DevSetupEnv.When all dependencies install and no commands are present" executed="True" result="Success" success="True" time="0.1485" asserts="0" description="Install-DevSetupEnv.When all dependencies install and no commands are present">
                <results>
                  <test-case description="Should install dependencies and write status" name="Install-DevSetupEnv.When all dependencies install and no commands are present.Should install dependencies and write status" time="0.0665" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-DevSetupEnv.When commands are present and executed" executed="True" result="Success" success="True" time="0.2741" asserts="0" description="Install-DevSetupEnv.When commands are present and executed">
                <results>
                  <test-case description="Should execute all commands" name="Install-DevSetupEnv.When commands are present and executed.Should execute all commands" time="0.1133" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-DevSetupEnv.When a command entry is missing the command property" executed="True" result="Success" success="True" time="0.347" asserts="0" description="Install-DevSetupEnv.When a command entry is missing the command property">
                <results>
                  <test-case description="Should skip and warn" name="Install-DevSetupEnv.When a command entry is missing the command property.Should skip and warn" time="0.0619" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Commands\Show-DevSetupEnvList.Tests.ps1" executed="True" result="Success" success="True" time="0.8247" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Commands\Show-DevSetupEnvList.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Show-DevSetupEnvList" executed="True" result="Success" success="True" time="0.6736" asserts="0" description="Show-DevSetupEnvList">
            <results>
              <test-suite type="TestFixture" name="Show-DevSetupEnvList.When environments.json does not exist" executed="True" result="Success" success="True" time="0.0581" asserts="0" description="Show-DevSetupEnvList.When environments.json does not exist">
                <results>
                  <test-case description="Should run optimization to create it" name="Show-DevSetupEnvList.When environments.json does not exist.Should run optimization to create it" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Show-DevSetupEnvList.When environments.json is corrupt" executed="True" result="Success" success="True" time="0.1096" asserts="0" description="Show-DevSetupEnvList.When environments.json is corrupt">
                <results>
                  <test-case description="Should run optimization to recreate it" name="Show-DevSetupEnvList.When environments.json is corrupt.Should run optimization to recreate it" time="0.042" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Show-DevSetupEnvList.When filtering for current platform (windows)" executed="True" result="Success" success="True" time="0.1844" asserts="0" description="Show-DevSetupEnvList.When filtering for current platform (windows)">
                <results>
                  <test-case description="Should detect windows platform and filter environments" name="Show-DevSetupEnvList.When filtering for current platform (windows).Should detect windows platform and filter environments" time="0.0653" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Show-DevSetupEnvList.When filtering for current platform (linux)" executed="True" result="Success" success="True" time="0.266" asserts="0" description="Show-DevSetupEnvList.When filtering for current platform (linux)">
                <results>
                  <test-case description="Should detect linux platform and filter environments" name="Show-DevSetupEnvList.When filtering for current platform (linux).Should detect linux platform and filter environments" time="0.0722" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Show-DevSetupEnvList.When filtering for current platform (macos)" executed="True" result="Success" success="True" time="0.3545" asserts="0" description="Show-DevSetupEnvList.When filtering for current platform (macos)">
                <results>
                  <test-case description="Should detect macos platform and filter environments" name="Show-DevSetupEnvList.When filtering for current platform (macos).Should detect macos platform and filter environments" time="0.0787" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Show-DevSetupEnvList.When filtering for all platforms" executed="True" result="Success" success="True" time="0.4163" asserts="0" description="Show-DevSetupEnvList.When filtering for all platforms">
                <results>
                  <test-case description="Should show all environments without filtering" name="Show-DevSetupEnvList.When filtering for all platforms.Should show all environments without filtering" time="0.0408" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Show-DevSetupEnvList.When filtering for specific platform (windows)" executed="True" result="Success" success="True" time="0.4683" asserts="0" description="Show-DevSetupEnvList.When filtering for specific platform (windows)">
                <results>
                  <test-case description="Should filter and display only windows-compatible environments" name="Show-DevSetupEnvList.When filtering for specific platform (windows).Should filter and display only windows-compatible environments" time="0.0414" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Show-DevSetupEnvList.When no environments are found for a platform" executed="True" result="Success" success="True" time="0.5507" asserts="0" description="Show-DevSetupEnvList.When no environments are found for a platform">
                <results>
                  <test-case description="Should display guidance message" name="Show-DevSetupEnvList.When no environments are found for a platform.Should display guidance message" time="0.0663" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Show-DevSetupEnvList.When no environments exist at all" executed="True" result="Success" success="True" time="0.6088" asserts="0" description="Show-DevSetupEnvList.When no environments exist at all">
                <results>
                  <test-case description="Should display no environments found message" name="Show-DevSetupEnvList.When no environments exist at all.Should display no environments found message" time="0.044" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Show-DevSetupEnvList.When environments are found" executed="True" result="Success" success="True" time="0.6613" asserts="0" description="Show-DevSetupEnvList.When environments are found">
                <results>
                  <test-case description="Should display the environments table and count" name="Show-DevSetupEnvList.When environments are found.Should display the environments table and count" time="0.038" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Commands\Uninstall-DevSetupEnv.Tests.ps1" executed="True" result="Success" success="True" time="0.3826" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Commands\Uninstall-DevSetupEnv.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Uninstall-DevSetupEnv" executed="True" result="Success" success="True" time="0.2334" asserts="0" description="Uninstall-DevSetupEnv">
            <results>
              <test-suite type="TestFixture" name="Uninstall-DevSetupEnv.When environment file does not exist" executed="True" result="Success" success="True" time="0.0279" asserts="0" description="Uninstall-DevSetupEnv.When environment file does not exist">
                <results>
                  <test-case description="Should write error and return" name="Uninstall-DevSetupEnv.When environment file does not exist.Should write error and return" time="0.0181" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-DevSetupEnv.When YAML parsing fails" executed="True" result="Success" success="True" time="0.0792" asserts="0" description="Uninstall-DevSetupEnv.When YAML parsing fails">
                <results>
                  <test-case description="Should write error and return" name="Uninstall-DevSetupEnv.When YAML parsing fails.Should write error and return" time="0.0416" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-DevSetupEnv.When all uninstallers succeed" executed="True" result="Success" success="True" time="0.1285" asserts="0" description="Uninstall-DevSetupEnv.When all uninstallers succeed">
                <results>
                  <test-case description="Should call all uninstallers and write status" name="Uninstall-DevSetupEnv.When all uninstallers succeed.Should call all uninstallers and write status" time="0.0397" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-DevSetupEnv.When a component uninstaller fails" executed="True" result="Success" success="True" time="0.1744" asserts="0" description="Uninstall-DevSetupEnv.When a component uninstaller fails">
                <results>
                  <test-case description="Should continue calling other uninstallers" name="Uninstall-DevSetupEnv.When a component uninstaller fails.Should continue calling other uninstallers" time="0.0361" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-DevSetupEnv.When an exception occurs during uninstall" executed="True" result="Success" success="True" time="0.2242" asserts="0" description="Uninstall-DevSetupEnv.When an exception occurs during uninstall">
                <results>
                  <test-case description="Should write error and return" name="Uninstall-DevSetupEnv.When an exception occurs during uninstall.Should write error and return" time="0.0402" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Export-InstalledChocolateyPackages.Tests.ps1" executed="True" result="Success" success="True" time="0.736" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Export-InstalledChocolateyPackages.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Export-InstalledChocolateyPackages" executed="True" result="Success" success="True" time="0.5824" asserts="0" description="Export-InstalledChocolateyPackages">
            <results>
              <test-suite type="TestFixture" name="Export-InstalledChocolateyPackages.When not running as administrator" executed="True" result="Success" success="True" time="0.0266" asserts="0" description="Export-InstalledChocolateyPackages.When not running as administrator">
                <results>
                  <test-case description="Should throw and return false" name="Export-InstalledChocolateyPackages.When not running as administrator.Should throw and return false" time="0.0163" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledChocolateyPackages.When no Chocolatey packages are found" executed="True" result="Success" success="True" time="0.0634" asserts="0" description="Export-InstalledChocolateyPackages.When no Chocolatey packages are found">
                <results>
                  <test-case description="Should warn and return true" name="Export-InstalledChocolateyPackages.When no Chocolatey packages are found.Should warn and return true" time="0.0218" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledChocolateyPackages.When Chocolatey packages are found and DryRun is used" executed="True" result="Success" success="True" time="0.1751" asserts="0" description="Export-InstalledChocolateyPackages.When Chocolatey packages are found and DryRun is used">
                <results>
                  <test-case description="Should display the YAML output and not write to file" name="Export-InstalledChocolateyPackages.When Chocolatey packages are found and DryRun is used.Should display the YAML output and not write to file" time="0.1018" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledChocolateyPackages.When Chocolatey packages are found and OutFile is specified" executed="True" result="Success" success="True" time="0.2479" asserts="0" description="Export-InstalledChocolateyPackages.When Chocolatey packages are found and OutFile is specified">
                <results>
                  <test-case description="Should write the YAML output to the specified file" name="Export-InstalledChocolateyPackages.When Chocolatey packages are found and OutFile is specified.Should write the YAML output to the specified file" time="0.0631" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledChocolateyPackages.When YAML conversion fails" executed="True" result="Success" success="True" time="0.3265" asserts="0" description="Export-InstalledChocolateyPackages.When YAML conversion fails">
                <results>
                  <test-case description="Should fallback to JSON output" name="Export-InstalledChocolateyPackages.When YAML conversion fails.Should fallback to JSON output" time="0.0689" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledChocolateyPackages.When Out-File fails" executed="True" result="Success" success="True" time="0.3979" asserts="0" description="Export-InstalledChocolateyPackages.When Out-File fails">
                <results>
                  <test-case description="Should write error and return false" name="Export-InstalledChocolateyPackages.When Out-File fails.Should write error and return false" time="0.0607" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledChocolateyPackages.When package version changes" executed="True" result="Success" success="True" time="0.4615" asserts="0" description="Export-InstalledChocolateyPackages.When package version changes">
                <results>
                  <test-case description="Should update the package version in the config" name="Export-InstalledChocolateyPackages.When package version changes.Should update the package version in the config" time="0.0537" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledChocolateyPackages.When package is new" executed="True" result="Success" success="True" time="0.5486" asserts="0" description="Export-InstalledChocolateyPackages.When package is new">
                <results>
                  <test-case description="Should add the package to the config" name="Export-InstalledChocolateyPackages.When package is new.Should add the package to the config" time="0.0766" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Get-ChocolateyCacheFile.Tests.ps1" executed="True" result="Success" success="True" time="0.2229" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Get-ChocolateyCacheFile.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-ChocolateyCacheFile" executed="True" result="Success" success="True" time="0.1256" asserts="0" description="Get-ChocolateyCacheFile">
            <results>
              <test-suite type="TestFixture" name="Get-ChocolateyCacheFile.When Get-DevSetupCachePath returns a valid path" executed="True" result="Success" success="True" time="0.0239" asserts="0" description="Get-ChocolateyCacheFile.When Get-DevSetupCachePath returns a valid path">
                <results>
                  <test-case description="Should return the correct cache file path" name="Get-ChocolateyCacheFile.When Get-DevSetupCachePath returns a valid path.Should return the correct cache file path" time="0.0127" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ChocolateyCacheFile.When Get-DevSetupCachePath returns a different path" executed="True" result="Success" success="True" time="0.0495" asserts="0" description="Get-ChocolateyCacheFile.When Get-DevSetupCachePath returns a different path">
                <results>
                  <test-case description="Should append chocolatey.cache to the returned path" name="Get-ChocolateyCacheFile.When Get-DevSetupCachePath returns a different path.Should append chocolatey.cache to the returned path" time="0.0096" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ChocolateyCacheFile.When Get-DevSetupCachePath returns an empty string" executed="True" result="Success" success="True" time="0.1142" asserts="0" description="Get-ChocolateyCacheFile.When Get-DevSetupCachePath returns an empty string">
                <results>
                  <test-case description="Should write error and return null" name="Get-ChocolateyCacheFile.When Get-DevSetupCachePath returns an empty string.Should write error and return null" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Get-ChocolateyPackageDependencies.Tests.ps1" executed="True" result="Success" success="True" time="0.3665" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Get-ChocolateyPackageDependencies.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-ChocolateyPackageDependencies" executed="True" result="Success" success="True" time="0.2727" asserts="0" description="Get-ChocolateyPackageDependencies">
            <results>
              <test-suite type="TestFixture" name="Get-ChocolateyPackageDependencies.When Chocolatey install path does not exist" executed="True" result="Success" success="True" time="0.031" asserts="0" description="Get-ChocolateyPackageDependencies.When Chocolatey install path does not exist">
                <results>
                  <test-case description="Should return  in PS5, empty array in PS6+" name="Get-ChocolateyPackageDependencies.When Chocolatey install path does not exist.Should return  in PS5, empty array in PS6+" time="0.0204" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ChocolateyPackageDependencies.When no nuspec files are found" executed="True" result="Success" success="True" time="0.0778" asserts="0" description="Get-ChocolateyPackageDependencies.When no nuspec files are found">
                <results>
                  <test-case description="Should return  in PS5, empty array in PS6+" name="Get-ChocolateyPackageDependencies.When no nuspec files are found.Should return  in PS5, empty array in PS6+" time="0.0363" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ChocolateyPackageDependencies.When nuspec files have no dependencies" executed="True" result="Success" success="True" time="0.1452" asserts="0" description="Get-ChocolateyPackageDependencies.When nuspec files have no dependencies">
                <results>
                  <test-case description="Should return  in PS5, empty array in PS6+" name="Get-ChocolateyPackageDependencies.When nuspec files have no dependencies.Should return  in PS5, empty array in PS6+" time="0.0324" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ChocolateyPackageDependencies.When nuspec files have dependencies including chocolatey system packages" executed="True" result="Success" success="True" time="0.1871" asserts="0" description="Get-ChocolateyPackageDependencies.When nuspec files have dependencies including chocolatey system packages">
                <results>
                  <test-case description="Should return only non-chocolatey dependencies" name="Get-ChocolateyPackageDependencies.When nuspec files have dependencies including chocolatey system packages.Should return only non-chocolatey dependencies" time="0.0324" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ChocolateyPackageDependencies.When multiple nuspec files have overlapping dependencies" executed="True" result="Success" success="True" time="0.262" asserts="0" description="Get-ChocolateyPackageDependencies.When multiple nuspec files have overlapping dependencies">
                <results>
                  <test-case description="Should return all dependencies including duplicates" name="Get-ChocolateyPackageDependencies.When multiple nuspec files have overlapping dependencies.Should return all dependencies including duplicates" time="0.0619" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Get-ChocolateyVersion.Tests.ps1" executed="True" result="Success" success="True" time="0.2447" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Get-ChocolateyVersion.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-ChocolateyVersion" executed="True" result="Success" success="True" time="0.1511" asserts="0" description="Get-ChocolateyVersion">
            <results>
              <test-suite type="TestFixture" name="Get-ChocolateyVersion.When Chocolatey is not installed" executed="True" result="Success" success="True" time="0.0259" asserts="0" description="Get-ChocolateyVersion.When Chocolatey is not installed">
                <results>
                  <test-case description="Should return null and write a warning" name="Get-ChocolateyVersion.When Chocolatey is not installed.Should return null and write a warning" time="0.0163" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ChocolateyVersion.When Chocolatey is installed and version is returned" executed="True" result="Success" success="True" time="0.0676" asserts="0" description="Get-ChocolateyVersion.When Chocolatey is installed and version is returned">
                <results>
                  <test-case description="Should return the trimmed version string" name="Get-ChocolateyVersion.When Chocolatey is installed and version is returned.Should return the trimmed version string" time="0.0315" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ChocolateyVersion.When Chocolatey is installed but version is not returned" executed="True" result="Success" success="True" time="0.1071" asserts="0" description="Get-ChocolateyVersion.When Chocolatey is installed but version is not returned">
                <results>
                  <test-case description="Should return null and write a warning" name="Get-ChocolateyVersion.When Chocolatey is installed but version is not returned.Should return null and write a warning" time="0.026" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ChocolateyVersion.When an error occurs during version retrieval" executed="True" result="Success" success="True" time="0.1415" asserts="0" description="Get-ChocolateyVersion.When an error occurs during version retrieval">
                <results>
                  <test-case description="Should return null and write a warning" name="Get-ChocolateyVersion.When an error occurs during version retrieval.Should return null and write a warning" time="0.0238" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Install-Chocolatey.Tests.ps1" executed="True" result="Success" success="True" time="0.5526" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Install-Chocolatey.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-Chocolatey" executed="True" result="Success" success="True" time="0.4206" asserts="0" description="Install-Chocolatey">
            <results>
              <test-suite type="TestFixture" name="Install-Chocolatey.When not running on Windows" executed="True" result="Success" success="True" time="0.0263" asserts="0" description="Install-Chocolatey.When not running on Windows">
                <results>
                  <test-case description="Should skip installation and return true" name="Install-Chocolatey.When not running on Windows.Should skip installation and return true" time="0.0164" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Chocolatey.When not running as administrator" executed="True" result="Success" success="True" time="0.0562" asserts="0" description="Install-Chocolatey.When not running as administrator">
                <results>
                  <test-case description="Should throw and return false" name="Install-Chocolatey.When not running as administrator.Should throw and return false" time="0.0202" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Chocolatey.When Chocolatey is already installed" executed="True" result="Success" success="True" time="0.1139" asserts="0" description="Install-Chocolatey.When Chocolatey is already installed">
                <results>
                  <test-case description="Should return true and show version" name="Install-Chocolatey.When Chocolatey is already installed.Should return true and show version" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Chocolatey.When Chocolatey is not installed and installation succeeds" executed="True" result="Success" success="True" time="0.2507" asserts="0" description="Install-Chocolatey.When Chocolatey is not installed and installation succeeds">
                <results>
                  <test-case description="Should install and return true" name="Install-Chocolatey.When Chocolatey is not installed and installation succeeds.Should install and return true" time="0.127" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Chocolatey.When Chocolatey is not installed and installation fails" executed="True" result="Success" success="True" time="0.3752" asserts="0" description="Install-Chocolatey.When Chocolatey is not installed and installation fails">
                <results>
                  <test-case description="Should return false and write error" name="Install-Chocolatey.When Chocolatey is not installed and installation fails.Should return false and write error" time="0.1078" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Chocolatey.When an unexpected error occurs" executed="True" result="Success" success="True" time="0.4111" asserts="0" description="Install-Chocolatey.When an unexpected error occurs">
                <results>
                  <test-case description="Should return false and write error" name="Install-Chocolatey.When an unexpected error occurs.Should return false and write error" time="0.0239" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Install-ChocolateyPackage.Tests.ps1" executed="True" result="Success" success="True" time="0.423" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Install-ChocolateyPackage.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-ChocolateyPackage" executed="True" result="Success" success="True" time="0.2505" asserts="0" description="Install-ChocolateyPackage">
            <results>
              <test-suite type="TestFixture" name="Install-ChocolateyPackage.When not running as administrator" executed="True" result="Success" success="True" time="0.024" asserts="0" description="Install-ChocolateyPackage.When not running as administrator">
                <results>
                  <test-case description="Should throw and return false" name="Install-ChocolateyPackage.When not running as administrator.Should throw and return false" time="0.0144" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackage.When package is already installed and version matches" executed="True" result="Success" success="True" time="0.0451" asserts="0" description="Install-ChocolateyPackage.When package is already installed and version matches">
                <results>
                  <test-case description="Should return true immediately" name="Install-ChocolateyPackage.When package is already installed and version matches.Should return true immediately" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackage.When package is installed but version does not match" executed="True" result="Success" success="True" time="0.0972" asserts="0" description="Install-ChocolateyPackage.When package is installed but version does not match">
                <results>
                  <test-case description="Should uninstall and reinstall the package" name="Install-ChocolateyPackage.When package is installed but version does not match.Should uninstall and reinstall the package" time="0.0421" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackage.When installing with version and params" executed="True" result="Success" success="True" time="0.1292" asserts="0" description="Install-ChocolateyPackage.When installing with version and params">
                <results>
                  <test-case description="Should build the correct choco command" name="Install-ChocolateyPackage.When installing with version and params.Should build the correct choco command" time="0.0218" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackage.When installation fails (non-zero exit code)" executed="True" result="Success" success="True" time="0.1652" asserts="0" description="Install-ChocolateyPackage.When installation fails (non-zero exit code)">
                <results>
                  <test-case description="Should write error and return false" name="Install-ChocolateyPackage.When installation fails (non-zero exit code).Should write error and return false" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackage.When Write-ChocolateyCache fails after install" executed="True" result="Success" success="True" time="0.2139" asserts="0" description="Install-ChocolateyPackage.When Write-ChocolateyCache fails after install">
                <results>
                  <test-case description="Should write warning and return false" name="Install-ChocolateyPackage.When Write-ChocolateyCache fails after install.Should write warning and return false" time="0.039" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackage.When an exception occurs during install" executed="True" result="Success" success="True" time="0.2409" asserts="0" description="Install-ChocolateyPackage.When an exception occurs during install">
                <results>
                  <test-case description="Should write error and return false" name="Install-ChocolateyPackage.When an exception occurs during install.Should write error and return false" time="0.0173" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Install-ChocolateyPackages.Tests.ps1" executed="True" result="Success" success="True" time="0.4571" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Install-ChocolateyPackages.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-ChocolateyPackages" executed="True" result="Success" success="True" time="0.3145" asserts="0" description="Install-ChocolateyPackages">
            <results>
              <test-suite type="TestFixture" name="Install-ChocolateyPackages.When not running as administrator" executed="True" result="Success" success="True" time="0.0219" asserts="0" description="Install-ChocolateyPackages.When not running as administrator">
                <results>
                  <test-case description="Should throw and return false" name="Install-ChocolateyPackages.When not running as administrator.Should throw and return false" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackages.When Chocolatey packages config is missing" executed="True" result="Success" success="True" time="0.0445" asserts="0" description="Install-ChocolateyPackages.When Chocolatey packages config is missing">
                <results>
                  <test-case description="Should write warning and return" name="Install-ChocolateyPackages.When Chocolatey packages config is missing.Should write warning and return" time="0.0125" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackages.When Write-ChocolateyCache fails" executed="True" result="Success" success="True" time="0.0703" asserts="0" description="Install-ChocolateyPackages.When Write-ChocolateyCache fails">
                <results>
                  <test-case description="Should write warning and return false" name="Install-ChocolateyPackages.When Write-ChocolateyCache fails.Should write warning and return false" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackages.When all packages install successfully (string format)" executed="True" result="Success" success="True" time="0.1321" asserts="0" description="Install-ChocolateyPackages.When all packages install successfully (string format)">
                <results>
                  <test-case description="Should process all packages and return true" name="Install-ChocolateyPackages.When all packages install successfully (string format).Should process all packages and return true" time="0.0519" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackages.When all packages install successfully (object format)" executed="True" result="Success" success="True" time="0.1772" asserts="0" description="Install-ChocolateyPackages.When all packages install successfully (object format)">
                <results>
                  <test-case description="Should process all packages and return true" name="Install-ChocolateyPackages.When all packages install successfully (object format).Should process all packages and return true" time="0.0355" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackages.When some packages fail to install" executed="True" result="Success" success="True" time="0.2219" asserts="0" description="Install-ChocolateyPackages.When some packages fail to install">
                <results>
                  <test-case description="Should continue processing and return true" name="Install-ChocolateyPackages.When some packages fail to install.Should continue processing and return true" time="0.0348" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackages.When package entry is empty or missing name" executed="True" result="Success" success="True" time="0.2705" asserts="0" description="Install-ChocolateyPackages.When package entry is empty or missing name">
                <results>
                  <test-case description="Should skip invalid entries and continue" name="Install-ChocolateyPackages.When package entry is empty or missing name.Should skip invalid entries and continue" time="0.0314" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ChocolateyPackages.When an exception occurs during installation" executed="True" result="Success" success="True" time="0.305" asserts="0" description="Install-ChocolateyPackages.When an exception occurs during installation">
                <results>
                  <test-case description="Should write error and return false" name="Install-ChocolateyPackages.When an exception occurs during installation.Should write error and return false" time="0.0246" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Read-ChocolateyCache.Tests.ps1" executed="True" result="Success" success="True" time="0.2866" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Read-ChocolateyCache.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Read-ChocolateyCache" executed="True" result="Success" success="True" time="0.1711" asserts="0" description="Read-ChocolateyCache">
            <results>
              <test-suite type="TestFixture" name="Read-ChocolateyCache.When cache file exists and can be read" executed="True" result="Success" success="True" time="0.0349" asserts="0" description="Read-ChocolateyCache.When cache file exists and can be read">
                <results>
                  <test-case description="Should return the cache data as an array of strings" name="Read-ChocolateyCache.When cache file exists and can be read.Should return the cache data as an array of strings" time="0.0253" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Read-ChocolateyCache.When cache file does not exist and Write-ChocolateyCache succeeds" executed="True" result="Success" success="True" time="0.0767" asserts="0" description="Read-ChocolateyCache.When cache file does not exist and Write-ChocolateyCache succeeds">
                <results>
                  <test-case description="Should create the cache file and return its contents" name="Read-ChocolateyCache.When cache file does not exist and Write-ChocolateyCache succeeds.Should create the cache file and return its contents" time="0.032" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Read-ChocolateyCache.When cache file does not exist and Write-ChocolateyCache fails" executed="True" result="Success" success="True" time="0.1216" asserts="0" description="Read-ChocolateyCache.When cache file does not exist and Write-ChocolateyCache fails">
                <results>
                  <test-case description="Should throw an exception" name="Read-ChocolateyCache.When cache file does not exist and Write-ChocolateyCache fails.Should throw an exception" time="0.0346" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Read-ChocolateyCache.When reading cache file fails" executed="True" result="Success" success="True" time="0.1616" asserts="0" description="Read-ChocolateyCache.When reading cache file fails">
                <results>
                  <test-case description="Should write error and return null" name="Read-ChocolateyCache.When reading cache file fails.Should write error and return null" time="0.0301" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Test-ChocolateyInstalled.Tests.ps1" executed="True" result="Success" success="True" time="0.1677" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Test-ChocolateyInstalled.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-ChocolateyInstalled" executed="True" result="Success" success="True" time="0.0894" asserts="0" description="Test-ChocolateyInstalled">
            <results>
              <test-suite type="TestFixture" name="Test-ChocolateyInstalled.When Chocolatey is installed" executed="True" result="Success" success="True" time="0.0487" asserts="0" description="Test-ChocolateyInstalled.When Chocolatey is installed">
                <results>
                  <test-case description="Should return true" name="Test-ChocolateyInstalled.When Chocolatey is installed.Should return true" time="0.0164" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ChocolateyInstalled.When Chocolatey is not installed" executed="True" result="Success" success="True" time="0.0782" asserts="0" description="Test-ChocolateyInstalled.When Chocolatey is not installed">
                <results>
                  <test-case description="Should return false and write a warning" name="Test-ChocolateyInstalled.When Chocolatey is not installed.Should return false and write a warning" time="0.0189" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Test-ChocolateyPackageInstalled.Tests.ps1" executed="True" result="Success" success="True" time="0.2863" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Test-ChocolateyPackageInstalled.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-ChocolateyPackageInstalled" executed="True" result="Success" success="True" time="0.1847" asserts="0" description="Test-ChocolateyPackageInstalled">
            <results>
              <test-suite type="TestFixture" name="Test-ChocolateyPackageInstalled.When Chocolatey is not installed" executed="True" result="Success" success="True" time="0.0383" asserts="0" description="Test-ChocolateyPackageInstalled.When Chocolatey is not installed">
                <results>
                  <test-case description="Should return NotInstalled and write a warning" name="Test-ChocolateyPackageInstalled.When Chocolatey is not installed.Should return NotInstalled and write a warning" time="0.0281" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ChocolateyPackageInstalled.When package is not in cache" executed="True" result="Success" success="True" time="0.0618" asserts="0" description="Test-ChocolateyPackageInstalled.When package is not in cache">
                <results>
                  <test-case description="Should return NotInstalled" name="Test-ChocolateyPackageInstalled.When package is not in cache.Should return NotInstalled" time="0.0135" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ChocolateyPackageInstalled.When package is in cache (any version)" executed="True" result="Success" success="True" time="0.0873" asserts="0" description="Test-ChocolateyPackageInstalled.When package is in cache (any version)">
                <results>
                  <test-case description="Should return Installed, GlobalVersionMet, MinimumVersionMet, RequiredVersionMet" name="Test-ChocolateyPackageInstalled.When package is in cache (any version).Should return Installed, GlobalVersionMet, MinimumVersionMet, RequiredVersionMet" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ChocolateyPackageInstalled.When package is in cache but version does not match" executed="True" result="Success" success="True" time="0.1125" asserts="0" description="Test-ChocolateyPackageInstalled.When package is in cache but version does not match">
                <results>
                  <test-case description="Should not set MinimumVersionMet or RequiredVersionMet" name="Test-ChocolateyPackageInstalled.When package is in cache but version does not match.Should not set MinimumVersionMet or RequiredVersionMet" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ChocolateyPackageInstalled.When package is in cache and version matches" executed="True" result="Success" success="True" time="0.1378" asserts="0" description="Test-ChocolateyPackageInstalled.When package is in cache and version matches">
                <results>
                  <test-case description="Should set all flags" name="Test-ChocolateyPackageInstalled.When package is in cache and version matches.Should set all flags" time="0.015" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ChocolateyPackageInstalled.When Read-ChocolateyCache throws an error" executed="True" result="Success" success="True" time="0.1744" asserts="0" description="Test-ChocolateyPackageInstalled.When Read-ChocolateyCache throws an error">
                <results>
                  <test-case description="Should return NotInstalled" name="Test-ChocolateyPackageInstalled.When Read-ChocolateyCache throws an error.Should return NotInstalled" time="0.0261" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Uninstall-ChocolateyPackage.Tests.ps1" executed="True" result="Success" success="True" time="0.2288" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Uninstall-ChocolateyPackage.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Uninstall-ChocolateyPackage" executed="True" result="Success" success="True" time="0.134" asserts="0" description="Uninstall-ChocolateyPackage">
            <results>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackage.When not running as administrator" executed="True" result="Success" success="True" time="0.0242" asserts="0" description="Uninstall-ChocolateyPackage.When not running as administrator">
                <results>
                  <test-case description="Should throw and return false" name="Uninstall-ChocolateyPackage.When not running as administrator.Should throw and return false" time="0.0143" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackage.When uninstallation succeeds" executed="True" result="Success" success="True" time="0.0671" asserts="0" description="Uninstall-ChocolateyPackage.When uninstallation succeeds">
                <results>
                  <test-case description="Should return true and write debug" name="Uninstall-ChocolateyPackage.When uninstallation succeeds.Should return true and write debug" time="0.021" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackage.When uninstallation fails (non-zero exit code)" executed="True" result="Success" success="True" time="0.0946" asserts="0" description="Uninstall-ChocolateyPackage.When uninstallation fails (non-zero exit code)">
                <results>
                  <test-case description="Should write error and return false" name="Uninstall-ChocolateyPackage.When uninstallation fails (non-zero exit code).Should write error and return false" time="0.0179" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackage.When an exception occurs during uninstall" executed="True" result="Success" success="True" time="0.1246" asserts="0" description="Uninstall-ChocolateyPackage.When an exception occurs during uninstall">
                <results>
                  <test-case description="Should write error and return false" name="Uninstall-ChocolateyPackage.When an exception occurs during uninstall.Should write error and return false" time="0.0203" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Uninstall-ChocolateyPackages.Tests.ps1" executed="True" result="Success" success="True" time="0.4613" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Uninstall-ChocolateyPackages.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Uninstall-ChocolateyPackages" executed="True" result="Success" success="True" time="0.3142" asserts="0" description="Uninstall-ChocolateyPackages">
            <results>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackages.When not running as administrator" executed="True" result="Success" success="True" time="0.022" asserts="0" description="Uninstall-ChocolateyPackages.When not running as administrator">
                <results>
                  <test-case description="Should throw and return false" name="Uninstall-ChocolateyPackages.When not running as administrator.Should throw and return false" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackages.When Chocolatey packages config is missing" executed="True" result="Success" success="True" time="0.0471" asserts="0" description="Uninstall-ChocolateyPackages.When Chocolatey packages config is missing">
                <results>
                  <test-case description="Should write warning and return" name="Uninstall-ChocolateyPackages.When Chocolatey packages config is missing.Should write warning and return" time="0.014" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackages.When Write-ChocolateyCache fails" executed="True" result="Success" success="True" time="0.0721" asserts="0" description="Uninstall-ChocolateyPackages.When Write-ChocolateyCache fails">
                <results>
                  <test-case description="Should write warning and return false" name="Uninstall-ChocolateyPackages.When Write-ChocolateyCache fails.Should write warning and return false" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackages.When all packages uninstall successfully (string format)" executed="True" result="Success" success="True" time="0.1309" asserts="0" description="Uninstall-ChocolateyPackages.When all packages uninstall successfully (string format)">
                <results>
                  <test-case description="Should process all packages and return true" name="Uninstall-ChocolateyPackages.When all packages uninstall successfully (string format).Should process all packages and return true" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackages.When all packages uninstall successfully (object format)" executed="True" result="Success" success="True" time="0.1743" asserts="0" description="Uninstall-ChocolateyPackages.When all packages uninstall successfully (object format)">
                <results>
                  <test-case description="Should process all packages and return true" name="Uninstall-ChocolateyPackages.When all packages uninstall successfully (object format).Should process all packages and return true" time="0.0337" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackages.When some packages fail to uninstall" executed="True" result="Success" success="True" time="0.218" asserts="0" description="Uninstall-ChocolateyPackages.When some packages fail to uninstall">
                <results>
                  <test-case description="Should continue processing and return true" name="Uninstall-ChocolateyPackages.When some packages fail to uninstall.Should continue processing and return true" time="0.034" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackages.When package entry is empty or missing name" executed="True" result="Success" success="True" time="0.2707" asserts="0" description="Uninstall-ChocolateyPackages.When package entry is empty or missing name">
                <results>
                  <test-case description="Should skip invalid entries and continue" name="Uninstall-ChocolateyPackages.When package entry is empty or missing name.Should skip invalid entries and continue" time="0.0319" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ChocolateyPackages.When an exception occurs during uninstallation" executed="True" result="Success" success="True" time="0.3046" asserts="0" description="Uninstall-ChocolateyPackages.When an exception occurs during uninstallation">
                <results>
                  <test-case description="Should write error and return false" name="Uninstall-ChocolateyPackages.When an exception occurs during uninstallation.Should write error and return false" time="0.024" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Write-ChocolateyCache.Tests.ps1" executed="True" result="Success" success="True" time="0.3026" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Chocolatey\Write-ChocolateyCache.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Write-ChocolateyCache" executed="True" result="Success" success="True" time="0.1863" asserts="0" description="Write-ChocolateyCache">
            <results>
              <test-suite type="TestFixture" name="Write-ChocolateyCache.When Chocolatey is not installed" executed="True" result="Success" success="True" time="0.0287" asserts="0" description="Write-ChocolateyCache.When Chocolatey is not installed">
                <results>
                  <test-case description="Should return false and write error" name="Write-ChocolateyCache.When Chocolatey is not installed.Should return false and write error" time="0.0192" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-ChocolateyCache.When cache file is written successfully" executed="True" result="Success" success="True" time="0.0758" asserts="0" description="Write-ChocolateyCache.When cache file is written successfully">
                <results>
                  <test-case description="Should return true and write debug" name="Write-ChocolateyCache.When cache file is written successfully.Should return true and write debug" time="0.0365" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-ChocolateyCache.When writing cache file fails" executed="True" result="Success" success="True" time="0.1389" asserts="0" description="Write-ChocolateyCache.When writing cache file fails">
                <results>
                  <test-case description="Should return false and write error" name="Write-ChocolateyCache.When writing cache file fails.Should return false and write error" time="0.0528" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-ChocolateyCache.When choco command throws an exception" executed="True" result="Success" success="True" time="0.1765" asserts="0" description="Write-ChocolateyCache.When choco command throws an exception">
                <results>
                  <test-case description="Should return false and write error" name="Write-ChocolateyCache.When choco command throws an exception.Should return false and write error" time="0.0272" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Core\Install-CoreDependencies.Tests.ps1" executed="True" result="Success" success="True" time="0.6451" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Core\Install-CoreDependencies.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-CoreDependencies" executed="True" result="Success" success="True" time="0.4824" asserts="0" description="Install-CoreDependencies">
            <results>
              <test-suite type="TestFixture" name="Install-CoreDependencies.When NuGet installation fails" executed="True" result="Success" success="True" time="0.0281" asserts="0" description="Install-CoreDependencies.When NuGet installation fails">
                <results>
                  <test-case description="Should return false and write error" name="Install-CoreDependencies.When NuGet installation fails.Should return false and write error" time="0.0187" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-CoreDependencies.When manifest is missing or has no required modules" executed="True" result="Success" success="True" time="0.0655" asserts="0" description="Install-CoreDependencies.When manifest is missing or has no required modules">
                <results>
                  <test-case description="Should return true and write warning" name="Install-CoreDependencies.When manifest is missing or has no required modules.Should return true and write warning" time="0.0287" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-CoreDependencies.When required module installation fails" executed="True" result="Success" success="True" time="0.1252" asserts="0" description="Install-CoreDependencies.When required module installation fails">
                <results>
                  <test-case description="Should return false and write error" name="Install-CoreDependencies.When required module installation fails.Should return false and write error" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-CoreDependencies.When required modules include empty names" executed="True" result="Success" success="True" time="0.1743" asserts="0" description="Install-CoreDependencies.When required modules include empty names">
                <results>
                  <test-case description="Should skip empty module names and return true" name="Install-CoreDependencies.When required modules include empty names.Should skip empty module names and return true" time="0.0405" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-CoreDependencies.When all core dependencies install successfully on Windows" executed="True" result="Success" success="True" time="0.2432" asserts="0" description="Install-CoreDependencies.When all core dependencies install successfully on Windows">
                <results>
                  <test-case description="Should install everything and return true" name="Install-CoreDependencies.When all core dependencies install successfully on Windows.Should install everything and return true" time="0.0604" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-CoreDependencies.When Chocolatey installation fails on Windows" executed="True" result="Success" success="True" time="0.305" asserts="0" description="Install-CoreDependencies.When Chocolatey installation fails on Windows">
                <results>
                  <test-case description="Should return false and write error" name="Install-CoreDependencies.When Chocolatey installation fails on Windows.Should return false and write error" time="0.0361" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-CoreDependencies.When Git installation fails on Windows" executed="True" result="Success" success="True" time="0.3613" asserts="0" description="Install-CoreDependencies.When Git installation fails on Windows">
                <results>
                  <test-case description="Should return false and write error" name="Install-CoreDependencies.When Git installation fails on Windows.Should return false and write error" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-CoreDependencies.When Scoop installation fails on Windows" executed="True" result="Success" success="True" time="0.4348" asserts="0" description="Install-CoreDependencies.When Scoop installation fails on Windows">
                <results>
                  <test-case description="Should return false and write error" name="Install-CoreDependencies.When Scoop installation fails on Windows.Should return false and write error" time="0.065" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-CoreDependencies.When all core dependencies install successfully on non-Windows" executed="True" result="Success" success="True" time="0.4737" asserts="0" description="Install-CoreDependencies.When all core dependencies install successfully on non-Windows">
                <results>
                  <test-case description="Should skip Windows-only installs and return true" name="Install-CoreDependencies.When all core dependencies install successfully on non-Windows.Should skip Windows-only installs and return true" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Core\Install-Nuget.Tests.ps1" executed="True" result="Success" success="True" time="1.2699" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Core\Install-Nuget.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-Nuget" executed="True" result="Success" success="True" time="1.1722" asserts="0" description="Install-Nuget">
            <results>
              <test-suite type="TestFixture" name="Install-Nuget.When not running on Windows" executed="True" result="Success" success="True" time="0.0205" asserts="0" description="Install-Nuget.When not running on Windows">
                <results>
                  <test-case description="Should skip installation and return true" name="Install-Nuget.When not running on Windows.Should skip installation and return true" time="0.0119" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Nuget.When not running as administrator" executed="True" result="Success" success="True" time="0.0466" asserts="0" description="Install-Nuget.When not running as administrator">
                <results>
                  <test-case description="Should throw and return false" name="Install-Nuget.When not running as administrator.Should throw and return false" time="0.0172" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Nuget.When NuGet PackageProvider is already installed" executed="True" result="Success" success="True" time="0.496" asserts="0" description="Install-Nuget.When NuGet PackageProvider is already installed">
                <results>
                  <test-case description="Should return true and not install again" name="Install-Nuget.When NuGet PackageProvider is already installed.Should return true and not install again" time="0.4408" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Nuget.When NuGet PackageProvider is not installed and installation succeeds" executed="True" result="Success" success="True" time="0.9348" asserts="0" description="Install-Nuget.When NuGet PackageProvider is not installed and installation succeeds">
                <results>
                  <test-case description="Should install and return true" name="Install-Nuget.When NuGet PackageProvider is not installed and installation succeeds.Should install and return true" time="0.43" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Nuget.When NuGet PackageProvider installation fails" executed="True" result="Success" success="True" time="0.9927" asserts="0" description="Install-Nuget.When NuGet PackageProvider installation fails">
                <results>
                  <test-case description="Should return false and write error" name="Install-Nuget.When NuGet PackageProvider installation fails.Should return false and write error" time="0.049" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Nuget.When NuGet CLI is available and version is detected" executed="True" result="Success" success="True" time="1.0763" asserts="0" description="Install-Nuget.When NuGet CLI is available and version is detected">
                <results>
                  <test-case description="Should check CLI version and return true" name="Install-Nuget.When NuGet CLI is available and version is detected.Should check CLI version and return true" time="0.0748" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Nuget.When NuGet CLI is available but version detection fails" executed="True" result="Success" success="True" time="1.1252" asserts="0" description="Install-Nuget.When NuGet CLI is available but version detection fails">
                <results>
                  <test-case description="Should still return true" name="Install-Nuget.When NuGet CLI is available but version detection fails.Should still return true" time="0.04" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Nuget.When an unexpected error occurs" executed="True" result="Success" success="True" time="1.1639" asserts="0" description="Install-Nuget.When an unexpected error occurs">
                <results>
                  <test-case description="Should return false and write error" name="Install-Nuget.When an unexpected error occurs.Should return false and write error" time="0.0303" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Export-InstalledPowershellModules.Tests.ps1" executed="True" result="Success" success="True" time="0.7642" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Export-InstalledPowershellModules.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Export-InstalledPowershellModules" executed="True" result="Success" success="True" time="0.6124" asserts="0" description="Export-InstalledPowershellModules">
            <results>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When not running as administrator" executed="True" result="Success" success="True" time="0.023" asserts="0" description="Export-InstalledPowershellModules.When not running as administrator">
                <results>
                  <test-case description="Should throw and return false" name="Export-InstalledPowershellModules.When not running as administrator.Should throw and return false" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When no modules are found" executed="True" result="Success" success="True" time="0.0483" asserts="0" description="Export-InstalledPowershellModules.When no modules are found">
                <results>
                  <test-case description="Should warn and return true" name="Export-InstalledPowershellModules.When no modules are found.Should warn and return true" time="0.0168" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When core dependency modules are present" executed="True" result="Success" success="True" time="0.1245" asserts="0" description="Export-InstalledPowershellModules.When core dependency modules are present">
                <results>
                  <test-case description="Should skip core dependency modules" name="Export-InstalledPowershellModules.When core dependency modules are present.Should skip core dependency modules" time="0.0676" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When modules are found and added to config" executed="True" result="Success" success="True" time="0.1765" asserts="0" description="Export-InstalledPowershellModules.When modules are found and added to config">
                <results>
                  <test-case description="Should add new modules to YAML data" name="Export-InstalledPowershellModules.When modules are found and added to config.Should add new modules to YAML data" time="0.0436" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When module version changes" executed="True" result="Success" success="True" time="0.2414" asserts="0" description="Export-InstalledPowershellModules.When module version changes">
                <results>
                  <test-case description="Should update the module version in the config" name="Export-InstalledPowershellModules.When module version changes.Should update the module version in the config" time="0.0563" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When module exists but has no version" executed="True" result="Success" success="True" time="0.2914" asserts="0" description="Export-InstalledPowershellModules.When module exists but has no version">
                <results>
                  <test-case description="Should add minimumVersion to the module" name="Export-InstalledPowershellModules.When module exists but has no version.Should add minimumVersion to the module" time="0.0412" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When module is unchanged" executed="True" result="Success" success="True" time="0.3428" asserts="0" description="Export-InstalledPowershellModules.When module is unchanged">
                <results>
                  <test-case description="Should skip updating the module" name="Export-InstalledPowershellModules.When module is unchanged.Should skip updating the module" time="0.0424" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When DryRun is used" executed="True" result="Success" success="True" time="0.3989" asserts="0" description="Export-InstalledPowershellModules.When DryRun is used">
                <results>
                  <test-case description="Should display YAML output and not write to file" name="Export-InstalledPowershellModules.When DryRun is used.Should display YAML output and not write to file" time="0.0474" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When OutFile is specified" executed="True" result="Success" success="True" time="0.456" asserts="0" description="Export-InstalledPowershellModules.When OutFile is specified">
                <results>
                  <test-case description="Should write YAML output to the specified file" name="Export-InstalledPowershellModules.When OutFile is specified.Should write YAML output to the specified file" time="0.0417" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When YAML conversion fails" executed="True" result="Success" success="True" time="0.5228" asserts="0" description="Export-InstalledPowershellModules.When YAML conversion fails">
                <results>
                  <test-case description="Should fallback to JSON output" name="Export-InstalledPowershellModules.When YAML conversion fails.Should fallback to JSON output" time="0.0582" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When Out-File fails" executed="True" result="Success" success="True" time="0.5707" asserts="0" description="Export-InstalledPowershellModules.When Out-File fails">
                <results>
                  <test-case description="Should write error and return false" name="Export-InstalledPowershellModules.When Out-File fails.Should write error and return false" time="0.0397" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledPowershellModules.When an unexpected error occurs" executed="True" result="Success" success="True" time="0.604" asserts="0" description="Export-InstalledPowershellModules.When an unexpected error occurs">
                <results>
                  <test-case description="Should write error and return false" name="Export-InstalledPowershellModules.When an unexpected error occurs.Should write error and return false" time="0.0244" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Install-PowershellModule.Tests.ps1" executed="True" result="Success" success="True" time="0.3465" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Install-PowershellModule.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-PowershellModule" executed="True" result="Success" success="True" time="0.2529" asserts="0" description="Install-PowershellModule">
            <results>
              <test-suite type="TestFixture" name="Install-PowershellModule.When installing for AllUsers without admin privileges" executed="True" result="Success" success="True" time="0.0186" asserts="0" description="Install-PowershellModule.When installing for AllUsers without admin privileges">
                <results>
                  <test-case description="Should return false" name="Install-PowershellModule.When installing for AllUsers without admin privileges.Should return false" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModule.When module is already installed with correct version and scope" executed="True" result="Success" success="True" time="0.0608" asserts="0" description="Install-PowershellModule.When module is already installed with correct version and scope">
                <results>
                  <test-case description="Should return true and not call Uninstall-PowershellModule or Install-Module" name="Install-PowershellModule.When module is already installed with correct version and scope.Should return true and not call Uninstall-PowershellModule or Install-Module" time="0.0339" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModule.When module is installed but needs to be uninstalled and reinstalled" executed="True" result="Success" success="True" time="0.0985" asserts="0" description="Install-PowershellModule.When module is installed but needs to be uninstalled and reinstalled">
                <results>
                  <test-case description="Should uninstall and install the module, returning true" name="Install-PowershellModule.When module is installed but needs to be uninstalled and reinstalled.Should uninstall and install the module, returning true" time="0.0296" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModule.When module is not installed" executed="True" result="Success" success="True" time="0.1271" asserts="0" description="Install-PowershellModule.When module is not installed">
                <results>
                  <test-case description="Should install the module and return true" name="Install-PowershellModule.When module is not installed.Should install the module and return true" time="0.0208" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModule.When Install-Module throws an exception" executed="True" result="Success" success="True" time="0.1704" asserts="0" description="Install-PowershellModule.When Install-Module throws an exception">
                <results>
                  <test-case description="Should return false" name="Install-PowershellModule.When Install-Module throws an exception.Should return false" time="0.0353" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModule.When Uninstall-PowershellModule throws an exception" executed="True" result="Success" success="True" time="0.2026" asserts="0" description="Install-PowershellModule.When Uninstall-PowershellModule throws an exception">
                <results>
                  <test-case description="Should return true" name="Install-PowershellModule.When Uninstall-PowershellModule throws an exception.Should return true" time="0.0247" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModule.When installing with Version, Force, and AllowClobber" executed="True" result="Success" success="True" time="0.2452" asserts="0" description="Install-PowershellModule.When installing with Version, Force, and AllowClobber">
                <results>
                  <test-case description="Should pass correct parameters and return true" name="Install-PowershellModule.When installing with Version, Force, and AllowClobber.Should pass correct parameters and return true" time="0.0348" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Install-PowershellModules.Tests.ps1" executed="True" result="Success" success="True" time="0.4305" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Install-PowershellModules.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-PowershellModules" executed="True" result="Success" success="True" time="0.3259" asserts="0" description="Install-PowershellModules">
            <results>
              <test-suite type="TestFixture" name="Install-PowershellModules.When YAML configuration is missing PowerShell modules" executed="True" result="Success" success="True" time="0.0247" asserts="0" description="Install-PowershellModules.When YAML configuration is missing PowerShell modules">
                <results>
                  <test-case description="Should return false and warn" name="Install-PowershellModules.When YAML configuration is missing PowerShell modules.Should return false and warn" time="0.009" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModules.When YAML configuration is missing dependencies" executed="True" result="Success" success="True" time="0.0458" asserts="0" description="Install-PowershellModules.When YAML configuration is missing dependencies">
                <results>
                  <test-case description="Should return false and warn" name="Install-PowershellModules.When YAML configuration is missing dependencies.Should return false and warn" time="0.0113" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModules.When AllUsers scope is specified but not running as admin" executed="True" result="Success" success="True" time="0.0759" asserts="0" description="Install-PowershellModules.When AllUsers scope is specified but not running as admin">
                <results>
                  <test-case description="Should return false" name="Install-PowershellModules.When AllUsers scope is specified but not running as admin.Should return false" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModules.When modules are installed successfully (string format)" executed="True" result="Success" success="True" time="0.1247" asserts="0" description="Install-PowershellModules.When modules are installed successfully (string format)">
                <results>
                  <test-case description="Should install all modules and return true" name="Install-PowershellModules.When modules are installed successfully (string format).Should install all modules and return true" time="0.0346" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModules.When modules are installed successfully (object format)" executed="True" result="Success" success="True" time="0.1628" asserts="0" description="Install-PowershellModules.When modules are installed successfully (object format)">
                <results>
                  <test-case description="Should install all modules and return true" name="Install-PowershellModules.When modules are installed successfully (object format).Should install all modules and return true" time="0.0287" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModules.When some modules fail to install" executed="True" result="Success" success="True" time="0.2149" asserts="0" description="Install-PowershellModules.When some modules fail to install">
                <results>
                  <test-case description="Should continue and return true" name="Install-PowershellModules.When some modules fail to install.Should continue and return true" time="0.0442" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModules.When module entry is empty or missing name" executed="True" result="Success" success="True" time="0.2679" asserts="0" description="Install-PowershellModules.When module entry is empty or missing name">
                <results>
                  <test-case description="Should skip invalid entries and return true" name="Install-PowershellModules.When module entry is empty or missing name.Should skip invalid entries and return true" time="0.0402" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-PowershellModules.When an exception occurs during installation" executed="True" result="Success" success="True" time="0.3183" asserts="0" description="Install-PowershellModules.When an exception occurs during installation">
                <results>
                  <test-case description="Should catch and return false" name="Install-PowershellModules.When an exception occurs during installation.Should catch and return false" time="0.0414" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Test-PowershellModuleInstalled.Tests.ps1" executed="True" result="Success" success="True" time="0.3212" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Test-PowershellModuleInstalled.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-PowershellModuleInstalled" executed="True" result="Success" success="True" time="0.2342" asserts="0" description="Test-PowershellModuleInstalled">
            <results>
              <test-suite type="TestFixture" name="Test-PowershellModuleInstalled.When module is not installed" executed="True" result="Success" success="True" time="0.0213" asserts="0" description="Test-PowershellModuleInstalled.When module is not installed">
                <results>
                  <test-case description="Should return NotInstalled" name="Test-PowershellModuleInstalled.When module is not installed.Should return NotInstalled" time="0.0136" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-PowershellModuleInstalled.When module is installed (any version, any scope)" executed="True" result="Success" success="True" time="0.0408" asserts="0" description="Test-PowershellModuleInstalled.When module is installed (any version, any scope)">
                <results>
                  <test-case description="Should return Installed + MinimumVersionMet + RequiredVersionMet + GlobalVersionMet" name="Test-PowershellModuleInstalled.When module is installed (any version, any scope).Should return Installed + MinimumVersionMet + RequiredVersionMet + GlobalVersionMet" time="0.012" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-PowershellModuleInstalled.When module is installed with matching version" executed="True" result="Success" success="True" time="0.0867" asserts="0" description="Test-PowershellModuleInstalled.When module is installed with matching version">
                <results>
                  <test-case description="Should return Installed + MinimumVersionMet + RequiredVersionMet + GlobalVersionMet" name="Test-PowershellModuleInstalled.When module is installed with matching version.Should return Installed + MinimumVersionMet + RequiredVersionMet + GlobalVersionMet" time="0.0377" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-PowershellModuleInstalled.When module is installed but version does not match" executed="True" result="Success" success="True" time="0.106" asserts="0" description="Test-PowershellModuleInstalled.When module is installed but version does not match">
                <results>
                  <test-case description="Should return Installed + GlobalVersionMet" name="Test-PowershellModuleInstalled.When module is installed but version does not match.Should return Installed + GlobalVersionMet" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-PowershellModuleInstalled.When module is installed in AllUsers scope" executed="True" result="Success" success="True" time="0.1347" asserts="0" description="Test-PowershellModuleInstalled.When module is installed in AllUsers scope">
                <results>
                  <test-case description="Should return Installed + MinimumVersionMet + RequiredVersionMet + GlobalVersionMet" name="Test-PowershellModuleInstalled.When module is installed in AllUsers scope.Should return Installed + MinimumVersionMet + RequiredVersionMet + GlobalVersionMet" time="0.0197" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-PowershellModuleInstalled.When module is installed in CurrentUser scope" executed="True" result="Success" success="True" time="0.1582" asserts="0" description="Test-PowershellModuleInstalled.When module is installed in CurrentUser scope">
                <results>
                  <test-case description="Should return Installed + MinimumVersionMet + RequiredVersionMet + GlobalVersionMet" name="Test-PowershellModuleInstalled.When module is installed in CurrentUser scope.Should return Installed + MinimumVersionMet + RequiredVersionMet + GlobalVersionMet" time="0.0136" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-PowershellModuleInstalled.When Get-Module throws an exception" executed="True" result="Success" success="True" time="0.2256" asserts="0" description="Test-PowershellModuleInstalled.When Get-Module throws an exception">
                <results>
                  <test-case description="Should return NotInstalled" name="Test-PowershellModuleInstalled.When Get-Module throws an exception.Should return NotInstalled" time="0.0564" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Uninstall-PowershellModule.Tests.ps1" executed="True" result="Success" success="True" time="0.6768" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Uninstall-PowershellModule.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Uninstall-PowershellModule" executed="True" result="Success" success="True" time="0.562" asserts="0" description="Uninstall-PowershellModule">
            <results>
              <test-suite type="TestFixture" name="Uninstall-PowershellModule.When module is not installed" executed="True" result="Success" success="True" time="0.0237" asserts="0" description="Uninstall-PowershellModule.When module is not installed">
                <results>
                  <test-case description="Should return true and warn" name="Uninstall-PowershellModule.When module is not installed.Should return true and warn" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-PowershellModule.When module is installed for AllUsers but not running as admin" executed="True" result="Success" success="True" time="0.3846" asserts="0" description="Uninstall-PowershellModule.When module is installed for AllUsers but not running as admin">
                <results>
                  <test-case description="Should return false and warn" name="Uninstall-PowershellModule.When module is installed for AllUsers but not running as admin.Should return false and warn" time="0.3511" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-PowershellModule.When module is installed and uninstall succeeds" executed="True" result="Success" success="True" time="0.4479" asserts="0" description="Uninstall-PowershellModule.When module is installed and uninstall succeeds">
                <results>
                  <test-case description="Should remove and uninstall the module, returning true" name="Uninstall-PowershellModule.When module is installed and uninstall succeeds.Should remove and uninstall the module, returning true" time="0.0406" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-PowershellModule.When uninstall fails with exception" executed="True" result="Success" success="True" time="0.4941" asserts="0" description="Uninstall-PowershellModule.When uninstall fails with exception">
                <results>
                  <test-case description="Should return false and write error" name="Uninstall-PowershellModule.When uninstall fails with exception.Should return false and write error" time="0.0359" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-PowershellModule.When module is installed but still present after uninstall" executed="True" result="Success" success="True" time="0.5528" asserts="0" description="Uninstall-PowershellModule.When module is installed but still present after uninstall">
                <results>
                  <test-case description="Should return false" name="Uninstall-PowershellModule.When module is installed but still present after uninstall.Should return false" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Uninstall-PowershellModules.Tests.ps1" executed="True" result="Success" success="True" time="0.4875" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Powershell\Uninstall-PowershellModules.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Uninstall-PowershellModules" executed="True" result="Success" success="True" time="0.3501" asserts="0" description="Uninstall-PowershellModules">
            <results>
              <test-suite type="TestFixture" name="Uninstall-PowershellModules.When YAML configuration is missing PowerShell modules" executed="True" result="Success" success="True" time="0.0307" asserts="0" description="Uninstall-PowershellModules.When YAML configuration is missing PowerShell modules">
                <results>
                  <test-case description="Should return false and warn" name="Uninstall-PowershellModules.When YAML configuration is missing PowerShell modules.Should return false and warn" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-PowershellModules.When YAML configuration is missing dependencies" executed="True" result="Success" success="True" time="0.0574" asserts="0" description="Uninstall-PowershellModules.When YAML configuration is missing dependencies">
                <results>
                  <test-case description="Should return false and warn" name="Uninstall-PowershellModules.When YAML configuration is missing dependencies.Should return false and warn" time="0.0127" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-PowershellModules.When AllUsers scope is specified but not running as admin" executed="True" result="Success" success="True" time="0.0774" asserts="0" description="Uninstall-PowershellModules.When AllUsers scope is specified but not running as admin">
                <results>
                  <test-case description="Should return false" name="Uninstall-PowershellModules.When AllUsers scope is specified but not running as admin.Should return false" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-PowershellModules.When modules are uninstalled successfully (string format)" executed="True" result="Success" success="True" time="0.1194" asserts="0" description="Uninstall-PowershellModules.When modules are uninstalled successfully (string format)">
                <results>
                  <test-case description="Should uninstall all modules and return true" name="Uninstall-PowershellModules.When modules are uninstalled successfully (string format).Should uninstall all modules and return true" time="0.0328" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-PowershellModules.When modules are uninstalled successfully (object format)" executed="True" result="Success" success="True" time="0.1951" asserts="0" description="Uninstall-PowershellModules.When modules are uninstalled successfully (object format)">
                <results>
                  <test-case description="Should uninstall all modules and return true" name="Uninstall-PowershellModules.When modules are uninstalled successfully (object format).Should uninstall all modules and return true" time="0.0603" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-PowershellModules.When some modules fail to uninstall" executed="True" result="Success" success="True" time="0.2558" asserts="0" description="Uninstall-PowershellModules.When some modules fail to uninstall">
                <results>
                  <test-case description="Should continue and return true" name="Uninstall-PowershellModules.When some modules fail to uninstall.Should continue and return true" time="0.0438" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-PowershellModules.When module entry is empty or missing name" executed="True" result="Success" success="True" time="0.3118" asserts="0" description="Uninstall-PowershellModules.When module entry is empty or missing name">
                <results>
                  <test-case description="Should skip invalid entries and return true" name="Uninstall-PowershellModules.When module entry is empty or missing name.Should skip invalid entries and return true" time="0.0443" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-PowershellModules.When an exception occurs during uninstallation" executed="True" result="Success" success="True" time="0.3409" asserts="0" description="Uninstall-PowershellModules.When an exception occurs during uninstallation">
                <results>
                  <test-case description="Should catch and return false" name="Uninstall-PowershellModules.When an exception occurs during uninstallation.Should catch and return false" time="0.0197" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Export-InstalledScoopPackages.Tests.ps1" executed="True" result="Success" success="True" time="0.9041" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Export-InstalledScoopPackages.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Export-InstalledScoopPackages" executed="True" result="Success" success="True" time="0.7155" asserts="0" description="Export-InstalledScoopPackages">
            <results>
              <test-suite type="TestFixture" name="Export-InstalledScoopPackages.When Scoop is not installed" executed="True" result="Success" success="True" time="0.0373" asserts="0" description="Export-InstalledScoopPackages.When Scoop is not installed">
                <results>
                  <test-case description="Should warn and return false" name="Export-InstalledScoopPackages.When Scoop is not installed.Should warn and return false" time="0.0261" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledScoopPackages.When Scoop command is not found" executed="True" result="Success" success="True" time="0.0819" asserts="0" description="Export-InstalledScoopPackages.When Scoop command is not found">
                <results>
                  <test-case description="Should warn and return false" name="Export-InstalledScoopPackages.When Scoop command is not found.Should warn and return false" time="0.0282" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledScoopPackages.When no Scoop packages are found" executed="True" result="Success" success="True" time="0.1206" asserts="0" description="Export-InstalledScoopPackages.When no Scoop packages are found">
                <results>
                  <test-case description="Should warn and return true" name="Export-InstalledScoopPackages.When no Scoop packages are found.Should warn and return true" time="0.0279" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledScoopPackages.When Scoop export JSON is invalid" executed="True" result="Success" success="True" time="0.2157" asserts="0" description="Export-InstalledScoopPackages.When Scoop export JSON is invalid">
                <results>
                  <test-case description="Should warn and show raw output" name="Export-InstalledScoopPackages.When Scoop export JSON is invalid.Should warn and show raw output" time="0.0808" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledScoopPackages.When buckets and packages are found" executed="True" result="Success" success="True" time="0.3233" asserts="0" description="Export-InstalledScoopPackages.When buckets and packages are found">
                <results>
                  <test-case description="Should add buckets and packages to YAML data" name="Export-InstalledScoopPackages.When buckets and packages are found.Should add buckets and packages to YAML data" time="0.0976" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledScoopPackages.When DryRun is used" executed="True" result="Success" success="True" time="0.4263" asserts="0" description="Export-InstalledScoopPackages.When DryRun is used">
                <results>
                  <test-case description="Should display YAML output and not write to file" name="Export-InstalledScoopPackages.When DryRun is used.Should display YAML output and not write to file" time="0.0928" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledScoopPackages.When OutFile is specified" executed="True" result="Success" success="True" time="0.5172" asserts="0" description="Export-InstalledScoopPackages.When OutFile is specified">
                <results>
                  <test-case description="Should write YAML output to the specified file" name="Export-InstalledScoopPackages.When OutFile is specified.Should write YAML output to the specified file" time="0.081" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledScoopPackages.When YAML conversion fails" executed="True" result="Success" success="True" time="0.5988" asserts="0" description="Export-InstalledScoopPackages.When YAML conversion fails">
                <results>
                  <test-case description="Should fallback to JSON output" name="Export-InstalledScoopPackages.When YAML conversion fails.Should fallback to JSON output" time="0.0719" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Export-InstalledScoopPackages.When Out-File fails" executed="True" result="Success" success="True" time="0.6977" asserts="0" description="Export-InstalledScoopPackages.When Out-File fails">
                <results>
                  <test-case description="Should write error and return false" name="Export-InstalledScoopPackages.When Out-File fails.Should write error and return false" time="0.0889" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Find-Scoop.Tests.ps1" executed="True" result="Success" success="True" time="0.4024" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Find-Scoop.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Find-Scoop" executed="True" result="Success" success="True" time="0.3139" asserts="0" description="Find-Scoop">
            <results>
              <test-suite type="TestFixture" name="Find-Scoop.When scoop is found by Get-Command" executed="True" result="Success" success="True" time="0.0494" asserts="0" description="Find-Scoop.When scoop is found by Get-Command">
                <results>
                  <test-case description="should return scoop" name="Find-Scoop.When scoop is found by Get-Command.should return scoop" time="0.0141" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Find-Scoop.When scoop is not found by Get-Command or any other option it should return null" executed="True" result="Success" success="True" time="0.0853" asserts="0" description="Find-Scoop.When scoop is not found by Get-Command or any other option it should return null">
                <results>
                  <test-case description="should return null" name="Find-Scoop.When scoop is not found by Get-Command or any other option it should return null.should return null" time="0.0264" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Find-Scoop.When scoop is not found by Get-Command but scoop.ps1 is found" executed="True" result="Success" success="True" time="0.1509" asserts="0" description="Find-Scoop.When scoop is not found by Get-Command but scoop.ps1 is found">
                <results>
                  <test-case description="should return TestDrive:\Users\Test User\scoop\shims\scoop.ps1" name="Find-Scoop.When scoop is not found by Get-Command but scoop.ps1 is found.should return TestDrive:\Users\Test User\scoop\shims\scoop.ps1" time="0.023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Find-Scoop.When scoop is not found by Get-Command but scoop.cmd is found" executed="True" result="Success" success="True" time="0.2207" asserts="0" description="Find-Scoop.When scoop is not found by Get-Command but scoop.cmd is found">
                <results>
                  <test-case description="should return TestDrive:\Users\Test User\scoop\shims\scoop.cmd" name="Find-Scoop.When scoop is not found by Get-Command but scoop.cmd is found.should return TestDrive:\Users\Test User\scoop\shims\scoop.cmd" time="0.0269" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Find-Scoop.When scoop is not found by Get-Command but scoop is found" executed="True" result="Success" success="True" time="0.3046" asserts="0" description="Find-Scoop.When scoop is not found by Get-Command but scoop is found">
                <results>
                  <test-case description="should return TestDrive:\Users\Test User\scoop\shims\scoop" name="Find-Scoop.When scoop is not found by Get-Command but scoop is found.should return TestDrive:\Users\Test User\scoop\shims\scoop" time="0.0289" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Get-ScoopCacheFile.Tests.ps1" executed="True" result="Success" success="True" time="0.1543" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Get-ScoopCacheFile.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-ScoopCacheFile" executed="True" result="Success" success="True" time="0.0325" asserts="0" description="Get-ScoopCacheFile">
            <results>
              <test-suite type="TestFixture" name="Get-ScoopCacheFile.When scoop is found by Get-Command" executed="True" result="Success" success="True" time="0.0216" asserts="0" description="Get-ScoopCacheFile.When scoop is found by Get-Command">
                <results>
                  <test-case description="should return the correct scoop cache file path" name="Get-ScoopCacheFile.When scoop is found by Get-Command.should return the correct scoop cache file path" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Get-ScoopVersion.Tests.ps1" executed="True" result="Success" success="True" time="0.4436" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Get-ScoopVersion.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-ScoopVersion" executed="True" result="Success" success="True" time="0.3414" asserts="0" description="Get-ScoopVersion">
            <results>
              <test-suite type="TestFixture" name="Get-ScoopVersion.When scoop is not found" executed="True" result="Success" success="True" time="0.0208" asserts="0" description="Get-ScoopVersion.When scoop is not found">
                <results>
                  <test-case description="should return null" name="Get-ScoopVersion.When scoop is not found.should return null" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ScoopVersion.When scoop is found but returns no version info" executed="True" result="Success" success="True" time="0.067" asserts="0" description="Get-ScoopVersion.When scoop is found but returns no version info">
                <results>
                  <test-case description="should return null" name="Get-ScoopVersion.When scoop is found but returns no version info.should return null" time="0.0366" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ScoopVersion.When scoop is found and returns version info" executed="True" result="Success" success="True" time="0.0984" asserts="0" description="Get-ScoopVersion.When scoop is found and returns version info">
                <results>
                  <test-case description="should return the scoop version" name="Get-ScoopVersion.When scoop is found and returns version info.should return the scoop version" time="0.022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ScoopVersion.When scoop is found and returns git hash info" executed="True" result="Success" success="True" time="0.1801" asserts="0" description="Get-ScoopVersion.When scoop is found and returns git hash info">
                <results>
                  <test-case description="should return the scoop git hash" name="Get-ScoopVersion.When scoop is found and returns git hash info.should return the scoop git hash" time="0.0656" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ScoopVersion.When scoop is found and but the version format changed" executed="True" result="Success" success="True" time="0.22" asserts="0" description="Get-ScoopVersion.When scoop is found and but the version format changed">
                <results>
                  <test-case description="should return installed" name="Get-ScoopVersion.When scoop is found and but the version format changed.should return installed" time="0.0285" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ScoopVersion.When scoop is found and but the version format changed to not using git release rendering" executed="True" result="Success" success="True" time="0.2699" asserts="0" description="Get-ScoopVersion.When scoop is found and but the version format changed to not using git release rendering">
                <results>
                  <test-case description="should return the scoop version" name="Get-ScoopVersion.When scoop is found and but the version format changed to not using git release rendering.should return the scoop version" time="0.0334" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-ScoopVersion.When scoop is found and but an error is thrown" executed="True" result="Success" success="True" time="0.3204" asserts="0" description="Get-ScoopVersion.When scoop is found and but an error is thrown">
                <results>
                  <test-case description="should return installed" name="Get-ScoopVersion.When scoop is found and but an error is thrown.should return installed" time="0.0313" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Install-Scoop.Tests.ps1" executed="True" result="Success" success="True" time="0.3587" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Install-Scoop.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-Scoop" executed="True" result="Success" success="True" time="0.2452" asserts="0" description="Install-Scoop">
            <results>
              <test-suite type="TestFixture" name="Install-Scoop.When scoop is installed" executed="True" result="Success" success="True" time="0.0393" asserts="0" description="Install-Scoop.When scoop is installed">
                <results>
                  <test-case description="Should return true" name="Install-Scoop.When scoop is installed.Should return true" time="0.0246" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Scoop.When scoop is installed but the version cant be found" executed="True" result="Success" success="True" time="0.0685" asserts="0" description="Install-Scoop.When scoop is installed but the version cant be found">
                <results>
                  <test-case description="Should return false" name="Install-Scoop.When scoop is installed but the version cant be found.Should return false" time="0.0198" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Scoop.When scoop is not installed" executed="True" result="Success" success="True" time="0.1471" asserts="0" description="Install-Scoop.When scoop is not installed">
                <results>
                  <test-case description="Should install it and return true" name="Install-Scoop.When scoop is not installed.Should install it and return true" time="0.0689" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-Scoop.When scoop is not installed" executed="True" result="Success" success="True" time="0.2351" asserts="0" description="Install-Scoop.When scoop is not installed">
                <results>
                  <test-case description="Should try to install it and throw an error when it fails" name="Install-Scoop.When scoop is not installed.Should try to install it and throw an error when it fails" time="0.0779" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Install-ScoopBucket.Tests.ps1" executed="True" result="Success" success="True" time="0.5312" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Install-ScoopBucket.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-ScoopBucket" executed="True" result="Success" success="True" time="0.4181" asserts="0" description="Install-ScoopBucket">
            <results>
              <test-suite type="TestFixture" name="Install-ScoopBucket.When scoop is not installed" executed="True" result="Success" success="True" time="0.0201" asserts="0" description="Install-ScoopBucket.When scoop is not installed">
                <results>
                  <test-case description="Should return false" name="Install-ScoopBucket.When scoop is not installed.Should return false" time="0.0108" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopBucket.When scoop is not found" executed="True" result="Success" success="True" time="0.058" asserts="0" description="Install-ScoopBucket.When scoop is not found">
                <results>
                  <test-case description="Should return false" name="Install-ScoopBucket.When scoop is not found.Should return false" time="0.0214" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopBucket.When a Bucket is already installed" executed="True" result="Success" success="True" time="0.0936" asserts="0" description="Install-ScoopBucket.When a Bucket is already installed">
                <results>
                  <test-case description="Should return true" name="Install-ScoopBucket.When a Bucket is already installed.Should return true" time="0.024" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopBucket.When a Bucket is not already installed and it fails to install it" executed="True" result="Success" success="True" time="0.1756" asserts="0" description="Install-ScoopBucket.When a Bucket is not already installed and it fails to install it">
                <results>
                  <test-case description="Should return false" name="Install-ScoopBucket.When a Bucket is not already installed and it fails to install it.Should return false" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopBucket.When a Bucket is not already installed and it gets installed but fails to write the cache" executed="True" result="Success" success="True" time="0.2597" asserts="0" description="Install-ScoopBucket.When a Bucket is not already installed and it gets installed but fails to write the cache">
                <results>
                  <test-case description="Should return false" name="Install-ScoopBucket.When a Bucket is not already installed and it gets installed but fails to write the cache.Should return false" time="0.0676" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopBucket.When a Bucket is not already installed and installing it causes an error to be thrown" executed="True" result="Success" success="True" time="0.3371" asserts="0" description="Install-ScoopBucket.When a Bucket is not already installed and installing it causes an error to be thrown">
                <results>
                  <test-case description="Should return false" name="Install-ScoopBucket.When a Bucket is not already installed and installing it causes an error to be thrown.Should return false" time="0.0654" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopBucket.When a Bucket is not already installed and it gets installed and writes the cache" executed="True" result="Success" success="True" time="0.409" asserts="0" description="Install-ScoopBucket.When a Bucket is not already installed and it gets installed and writes the cache">
                <results>
                  <test-case description="Should return true" name="Install-ScoopBucket.When a Bucket is not already installed and it gets installed and writes the cache.Should return true" time="0.0622" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Install-ScoopComponents.Tests.ps1" executed="True" result="Success" success="True" time="0.6697" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Install-ScoopComponents.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-ScoopComponents" executed="True" result="Success" success="True" time="0.5342" asserts="0" description="Install-ScoopComponents">
            <results>
              <test-suite type="TestFixture" name="Install-ScoopComponents.When Scoop is not installed" executed="True" result="Success" success="True" time="0.03" asserts="0" description="Install-ScoopComponents.When Scoop is not installed">
                <results>
                  <test-case description="Should return false and warn" name="Install-ScoopComponents.When Scoop is not installed.Should return false and warn" time="0.0183" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopComponents.When Scoop configuration is missing" executed="True" result="Success" success="True" time="0.0621" asserts="0" description="Install-ScoopComponents.When Scoop configuration is missing">
                <results>
                  <test-case description="Should return false and warn" name="Install-ScoopComponents.When Scoop configuration is missing.Should return false and warn" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopComponents.When Write-ScoopCache fails" executed="True" result="Success" success="True" time="0.1076" asserts="0" description="Install-ScoopComponents.When Write-ScoopCache fails">
                <results>
                  <test-case description="Should return false and error" name="Install-ScoopComponents.When Write-ScoopCache fails.Should return false and error" time="0.0337" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopComponents.When only buckets are present and all install succeed" executed="True" result="Success" success="True" time="0.1736" asserts="0" description="Install-ScoopComponents.When only buckets are present and all install succeed">
                <results>
                  <test-case description="Should return true and process all buckets" name="Install-ScoopComponents.When only buckets are present and all install succeed.Should return true and process all buckets" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopComponents.When only packages are present and all install succeed" executed="True" result="Success" success="True" time="0.2563" asserts="0" description="Install-ScoopComponents.When only packages are present and all install succeed">
                <results>
                  <test-case description="Should return true and process all packages" name="Install-ScoopComponents.When only packages are present and all install succeed.Should return true and process all packages" time="0.0707" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopComponents.When buckets and packages are present and some installs fail" executed="True" result="Success" success="True" time="0.3576" asserts="0" description="Install-ScoopComponents.When buckets and packages are present and some installs fail">
                <results>
                  <test-case description="Should return true and report failures" name="Install-ScoopComponents.When buckets and packages are present and some installs fail.Should return true and report failures" time="0.0914" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopComponents.When no buckets or packages are present" executed="True" result="Success" success="True" time="0.4044" asserts="0" description="Install-ScoopComponents.When no buckets or packages are present">
                <results>
                  <test-case description="Should return true and skip package installation" name="Install-ScoopComponents.When no buckets or packages are present.Should return true and skip package installation" time="0.0343" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopComponents.When an exception occurs during package install" executed="True" result="Success" success="True" time="0.4983" asserts="0" description="Install-ScoopComponents.When an exception occurs during package install">
                <results>
                  <test-case description="Should catch and continue, returning true" name="Install-ScoopComponents.When an exception occurs during package install.Should catch and continue, returning true" time="0.0841" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopComponents.When an exception occurs in the main try block" executed="True" result="Success" success="True" time="0.5228" asserts="0" description="Install-ScoopComponents.When an exception occurs in the main try block">
                <results>
                  <test-case description="Should return false" name="Install-ScoopComponents.When an exception occurs in the main try block.Should return false" time="0.0149" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Install-ScoopPackage.Tests.ps1" executed="True" result="Success" success="True" time="0.6046" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Install-ScoopPackage.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Install-ScoopPackage" executed="True" result="Success" success="True" time="0.4887" asserts="0" description="Install-ScoopPackage">
            <results>
              <test-suite type="TestFixture" name="Install-ScoopPackage.When Scoop is not installed" executed="True" result="Success" success="True" time="0.0207" asserts="0" description="Install-ScoopPackage.When Scoop is not installed">
                <results>
                  <test-case description="Should return false" name="Install-ScoopPackage.When Scoop is not installed.Should return false" time="0.0112" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopPackage.When Scoop command cannot be found" executed="True" result="Success" success="True" time="0.0455" asserts="0" description="Install-ScoopPackage.When Scoop command cannot be found">
                <results>
                  <test-case description="Should return false" name="Install-ScoopPackage.When Scoop command cannot be found.Should return false" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopPackage.When package is already installed with correct version and scope" executed="True" result="Success" success="True" time="0.1083" asserts="0" description="Install-ScoopPackage.When package is already installed with correct version and scope">
                <results>
                  <test-case description="Should return true" name="Install-ScoopPackage.When package is already installed with correct version and scope.Should return true" time="0.0371" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopPackage.When package is installed but version/scope does not match" executed="True" result="Success" success="True" time="0.2145" asserts="0" description="Install-ScoopPackage.When package is installed but version/scope does not match">
                <results>
                  <test-case description="Should uninstall and reinstall the package" name="Install-ScoopPackage.When package is installed but version/scope does not match.Should uninstall and reinstall the package" time="0.094" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopPackage.When install command fails" executed="True" result="Success" success="True" time="0.2832" asserts="0" description="Install-ScoopPackage.When install command fails">
                <results>
                  <test-case description="Should return false" name="Install-ScoopPackage.When install command fails.Should return false" time="0.0587" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopPackage.When Write-ScoopCache fails after install" executed="True" result="Success" success="True" time="0.3504" asserts="0" description="Install-ScoopPackage.When Write-ScoopCache fails after install">
                <results>
                  <test-case description="Should return false" name="Install-ScoopPackage.When Write-ScoopCache fails after install.Should return false" time="0.0574" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopPackage.When installing with version, bucket, and global" executed="True" result="Success" success="True" time="0.4448" asserts="0" description="Install-ScoopPackage.When installing with version, bucket, and global">
                <results>
                  <test-case description="Should pass correct arguments and return true" name="Install-ScoopPackage.When installing with version, bucket, and global.Should pass correct arguments and return true" time="0.0845" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Install-ScoopPackage.When an exception occurs" executed="True" result="Success" success="True" time="0.4671" asserts="0" description="Install-ScoopPackage.When an exception occurs">
                <results>
                  <test-case description="Should return false" name="Install-ScoopPackage.When an exception occurs.Should return false" time="0.0125" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Read-ScoopCache.Tests.ps1" executed="True" result="Success" success="True" time="0.3329" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Read-ScoopCache.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Read-ScoopCache" executed="True" result="Success" success="True" time="0.2483" asserts="0" description="Read-ScoopCache">
            <results>
              <test-suite type="TestFixture" name="Read-ScoopCache.When cache file exists and contains valid JSON" executed="True" result="Success" success="True" time="0.0401" asserts="0" description="Read-ScoopCache.When cache file exists and contains valid JSON">
                <results>
                  <test-case description="Should return deserialized object" name="Read-ScoopCache.When cache file exists and contains valid JSON.Should return deserialized object" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Read-ScoopCache.When cache file does not exist and Write-ScoopCache succeeds" executed="True" result="Success" success="True" time="0.0948" asserts="0" description="Read-ScoopCache.When cache file does not exist and Write-ScoopCache succeeds">
                <results>
                  <test-case description="Should create cache and return deserialized object" name="Read-ScoopCache.When cache file does not exist and Write-ScoopCache succeeds.Should create cache and return deserialized object" time="0.0449" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Read-ScoopCache.When cache file does not exist and Write-ScoopCache fails" executed="True" result="Success" success="True" time="0.1296" asserts="0" description="Read-ScoopCache.When cache file does not exist and Write-ScoopCache fails">
                <results>
                  <test-case description="Should throw an exception" name="Read-ScoopCache.When cache file does not exist and Write-ScoopCache fails.Should throw an exception" time="0.0252" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Read-ScoopCache.When cache file contains invalid JSON" executed="True" result="Success" success="True" time="0.1854" asserts="0" description="Read-ScoopCache.When cache file contains invalid JSON">
                <results>
                  <test-case description="Should return null and write error" name="Read-ScoopCache.When cache file contains invalid JSON.Should return null and write error" time="0.0431" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Read-ScoopCache.When Get-Content throws an exception" executed="True" result="Success" success="True" time="0.2391" asserts="0" description="Read-ScoopCache.When Get-Content throws an exception">
                <results>
                  <test-case description="Should return null and write error" name="Read-ScoopCache.When Get-Content throws an exception.Should return null and write error" time="0.0438" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Test-ScoopComponentInstalled.Tests.ps1" executed="True" result="Success" success="True" time="0.4534" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Test-ScoopComponentInstalled.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-ScoopComponentInstalled" executed="True" result="Success" success="True" time="0.3512" asserts="0" description="Test-ScoopComponentInstalled">
            <results>
              <test-suite type="TestFixture" name="Test-ScoopComponentInstalled.When Scoop is not installed" executed="True" result="Success" success="True" time="0.0308" asserts="0" description="Test-ScoopComponentInstalled.When Scoop is not installed">
                <results>
                  <test-case description="Should return NotInstalled for package" name="Test-ScoopComponentInstalled.When Scoop is not installed.Should return NotInstalled for package" time="0.0114" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return NotInstalled for bucket" name="Test-ScoopComponentInstalled.When Scoop is not installed.Should return NotInstalled for bucket" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopComponentInstalled.When cache cannot be read" executed="True" result="Success" success="True" time="0.0955" asserts="0" description="Test-ScoopComponentInstalled.When cache cannot be read">
                <results>
                  <test-case description="Should return NotInstalled for package" name="Test-ScoopComponentInstalled.When cache cannot be read.Should return NotInstalled for package" time="0.017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return NotInstalled for bucket" name="Test-ScoopComponentInstalled.When cache cannot be read.Should return NotInstalled for bucket" time="0.0381" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopComponentInstalled.When package is not found in cache" executed="True" result="Success" success="True" time="0.1306" asserts="0" description="Test-ScoopComponentInstalled.When package is not found in cache">
                <results>
                  <test-case description="Should return NotInstalled" name="Test-ScoopComponentInstalled.When package is not found in cache.Should return NotInstalled" time="0.0184" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopComponentInstalled.When bucket is not found in cache" executed="True" result="Success" success="True" time="0.1662" asserts="0" description="Test-ScoopComponentInstalled.When bucket is not found in cache">
                <results>
                  <test-case description="Should return NotInstalled" name="Test-ScoopComponentInstalled.When bucket is not found in cache.Should return NotInstalled" time="0.0237" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopComponentInstalled.When package is found without version or global" executed="True" result="Success" success="True" time="0.1989" asserts="0" description="Test-ScoopComponentInstalled.When package is found without version or global">
                <results>
                  <test-case description="Should return Installed + RequiredVersionMet + MinimumVersionMet + GlobalVersionMet" name="Test-ScoopComponentInstalled.When package is found without version or global.Should return Installed + RequiredVersionMet + MinimumVersionMet + GlobalVersionMet" time="0.0231" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopComponentInstalled.When package is found with matching version" executed="True" result="Success" success="True" time="0.2424" asserts="0" description="Test-ScoopComponentInstalled.When package is found with matching version">
                <results>
                  <test-case description="Should return Installed + RequiredVersionMet + MinimumVersionMet + GlobalVersionMet" name="Test-ScoopComponentInstalled.When package is found with matching version.Should return Installed + RequiredVersionMet + MinimumVersionMet + GlobalVersionMet" time="0.0337" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopComponentInstalled.When package is found but version does not match" executed="True" result="Success" success="True" time="0.2675" asserts="0" description="Test-ScoopComponentInstalled.When package is found but version does not match">
                <results>
                  <test-case description="Should return Installed + GlobalVersionMet" name="Test-ScoopComponentInstalled.When package is found but version does not match.Should return Installed + GlobalVersionMet" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopComponentInstalled.When package is found with Global switch and global install" executed="True" result="Success" success="True" time="0.3119" asserts="0" description="Test-ScoopComponentInstalled.When package is found with Global switch and global install">
                <results>
                  <test-case description="Should return Installed + RequiredVersionMet + MinimumVersionMet + GlobalVersionMet" name="Test-ScoopComponentInstalled.When package is found with Global switch and global install.Should return Installed + RequiredVersionMet + MinimumVersionMet + GlobalVersionMet" time="0.0283" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopComponentInstalled.When bucket is found in cache" executed="True" result="Success" success="True" time="0.342" asserts="0" description="Test-ScoopComponentInstalled.When bucket is found in cache">
                <results>
                  <test-case description="Should return Installed + RequiredVersionMet + MinimumVersionMet + GlobalVersionMet" name="Test-ScoopComponentInstalled.When bucket is found in cache.Should return Installed + RequiredVersionMet + MinimumVersionMet + GlobalVersionMet" time="0.0165" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Test-ScoopInstalled.Tests.ps1" executed="True" result="Success" success="True" time="0.3171" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Test-ScoopInstalled.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-ScoopInstalled" executed="True" result="Success" success="True" time="0.2277" asserts="0" description="Test-ScoopInstalled">
            <results>
              <test-suite type="TestFixture" name="Test-ScoopInstalled.When scoop command is available in PATH" executed="True" result="Success" success="True" time="0.0347" asserts="0" description="Test-ScoopInstalled.When scoop command is available in PATH">
                <results>
                  <test-case description="Should return true" name="Test-ScoopInstalled.When scoop command is available in PATH.Should return true" time="0.0225" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopInstalled.When scoop command is not available but scoop.ps1 exists" executed="True" result="Success" success="True" time="0.0657" asserts="0" description="Test-ScoopInstalled.When scoop command is not available but scoop.ps1 exists">
                <results>
                  <test-case description="Should return true" name="Test-ScoopInstalled.When scoop command is not available but scoop.ps1 exists.Should return true" time="0.0204" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopInstalled.When scoop command is not available but scoop.cmd exists" executed="True" result="Success" success="True" time="0.1105" asserts="0" description="Test-ScoopInstalled.When scoop command is not available but scoop.cmd exists">
                <results>
                  <test-case description="Should return true" name="Test-ScoopInstalled.When scoop command is not available but scoop.cmd exists.Should return true" time="0.0351" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopInstalled.When scoop command is not available but scoop executable exists" executed="True" result="Success" success="True" time="0.1773" asserts="0" description="Test-ScoopInstalled.When scoop command is not available but scoop executable exists">
                <results>
                  <test-case description="Should return true" name="Test-ScoopInstalled.When scoop command is not available but scoop executable exists.Should return true" time="0.0517" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-ScoopInstalled.When scoop is not installed at all" executed="True" result="Success" success="True" time="0.2181" asserts="0" description="Test-ScoopInstalled.When scoop is not installed at all">
                <results>
                  <test-case description="Should return false" name="Test-ScoopInstalled.When scoop is not installed at all.Should return false" time="0.0292" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Uninstall-ScoopBucket.Tests.ps1" executed="True" result="Success" success="True" time="0.4054" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Uninstall-ScoopBucket.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Uninstall-ScoopBucket" executed="True" result="Success" success="True" time="0.3028" asserts="0" description="Uninstall-ScoopBucket">
            <results>
              <test-suite type="TestFixture" name="Uninstall-ScoopBucket.When Scoop is not installed" executed="True" result="Success" success="True" time="0.0385" asserts="0" description="Uninstall-ScoopBucket.When Scoop is not installed">
                <results>
                  <test-case description="Should return false and warn" name="Uninstall-ScoopBucket.When Scoop is not installed.Should return false and warn" time="0.0287" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopBucket.When Scoop command cannot be found" executed="True" result="Success" success="True" time="0.0646" asserts="0" description="Uninstall-ScoopBucket.When Scoop command cannot be found">
                <results>
                  <test-case description="Should return false and warn" name="Uninstall-ScoopBucket.When Scoop command cannot be found.Should return false and warn" time="0.0164" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopBucket.When bucket is already uninstalled" executed="True" result="Success" success="True" time="0.0983" asserts="0" description="Uninstall-ScoopBucket.When bucket is already uninstalled">
                <results>
                  <test-case description="Should return true and debug" name="Uninstall-ScoopBucket.When bucket is already uninstalled.Should return true and debug" time="0.0237" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopBucket.When bucket uninstall command fails" executed="True" result="Success" success="True" time="0.1543" asserts="0" description="Uninstall-ScoopBucket.When bucket uninstall command fails">
                <results>
                  <test-case description="Should return false and warn" name="Uninstall-ScoopBucket.When bucket uninstall command fails.Should return false and warn" time="0.0325" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopBucket.When Write-ScoopCache fails after uninstall" executed="True" result="Success" success="True" time="0.2011" asserts="0" description="Uninstall-ScoopBucket.When Write-ScoopCache fails after uninstall">
                <results>
                  <test-case description="Should return false and error" name="Uninstall-ScoopBucket.When Write-ScoopCache fails after uninstall.Should return false and error" time="0.0367" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopBucket.When bucket is successfully uninstalled" executed="True" result="Success" success="True" time="0.2459" asserts="0" description="Uninstall-ScoopBucket.When bucket is successfully uninstalled">
                <results>
                  <test-case description="Should return true and debug" name="Uninstall-ScoopBucket.When bucket is successfully uninstalled.Should return true and debug" time="0.0348" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopBucket.When an exception occurs during uninstall" executed="True" result="Success" success="True" time="0.2934" asserts="0" description="Uninstall-ScoopBucket.When an exception occurs during uninstall">
                <results>
                  <test-case description="Should return false and warn" name="Uninstall-ScoopBucket.When an exception occurs during uninstall.Should return false and warn" time="0.0375" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Uninstall-ScoopComponents.Tests.ps1" executed="True" result="Success" success="True" time="0.5802" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Uninstall-ScoopComponents.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Uninstall-ScoopComponents" executed="True" result="Success" success="True" time="0.4687" asserts="0" description="Uninstall-ScoopComponents">
            <results>
              <test-suite type="TestFixture" name="Uninstall-ScoopComponents.When Scoop is not installed" executed="True" result="Success" success="True" time="0.0246" asserts="0" description="Uninstall-ScoopComponents.When Scoop is not installed">
                <results>
                  <test-case description="Should return false and warn" name="Uninstall-ScoopComponents.When Scoop is not installed.Should return false and warn" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopComponents.When Scoop configuration is missing" executed="True" result="Success" success="True" time="0.0598" asserts="0" description="Uninstall-ScoopComponents.When Scoop configuration is missing">
                <results>
                  <test-case description="Should return false and warn" name="Uninstall-ScoopComponents.When Scoop configuration is missing.Should return false and warn" time="0.0254" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopComponents.When Write-ScoopCache fails" executed="True" result="Success" success="True" time="0.0887" asserts="0" description="Uninstall-ScoopComponents.When Write-ScoopCache fails">
                <results>
                  <test-case description="Should return false and error" name="Uninstall-ScoopComponents.When Write-ScoopCache fails.Should return false and error" time="0.0191" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopComponents.When only buckets are present and all uninstall succeed" executed="True" result="Success" success="True" time="0.1464" asserts="0" description="Uninstall-ScoopComponents.When only buckets are present and all uninstall succeed">
                <results>
                  <test-case description="Should return true and process all buckets" name="Uninstall-ScoopComponents.When only buckets are present and all uninstall succeed.Should return true and process all buckets" time="0.048" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopComponents.When only packages are present and all uninstall succeed" executed="True" result="Success" success="True" time="0.2193" asserts="0" description="Uninstall-ScoopComponents.When only packages are present and all uninstall succeed">
                <results>
                  <test-case description="Should return true and process all packages" name="Uninstall-ScoopComponents.When only packages are present and all uninstall succeed.Should return true and process all packages" time="0.0631" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopComponents.When buckets and packages are present and some uninstalls fail" executed="True" result="Success" success="True" time="0.3128" asserts="0" description="Uninstall-ScoopComponents.When buckets and packages are present and some uninstalls fail">
                <results>
                  <test-case description="Should return true and report failures" name="Uninstall-ScoopComponents.When buckets and packages are present and some uninstalls fail.Should return true and report failures" time="0.0832" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopComponents.When no buckets or packages are present" executed="True" result="Success" success="True" time="0.3545" asserts="0" description="Uninstall-ScoopComponents.When no buckets or packages are present">
                <results>
                  <test-case description="Should return true and skip package uninstallation" name="Uninstall-ScoopComponents.When no buckets or packages are present.Should return true and skip package uninstallation" time="0.0311" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopComponents.When an exception occurs during package uninstall" executed="True" result="Success" success="True" time="0.4346" asserts="0" description="Uninstall-ScoopComponents.When an exception occurs during package uninstall">
                <results>
                  <test-case description="Should catch and continue, returning true" name="Uninstall-ScoopComponents.When an exception occurs during package uninstall.Should catch and continue, returning true" time="0.0702" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopComponents.When an exception occurs in the main try block" executed="True" result="Success" success="True" time="0.4593" asserts="0" description="Uninstall-ScoopComponents.When an exception occurs in the main try block">
                <results>
                  <test-case description="Should return false" name="Uninstall-ScoopComponents.When an exception occurs in the main try block.Should return false" time="0.0151" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Uninstall-ScoopPackage.Tests.ps1" executed="True" result="Success" success="True" time="0.4671" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Uninstall-ScoopPackage.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Uninstall-ScoopPackage" executed="True" result="Success" success="True" time="0.3641" asserts="0" description="Uninstall-ScoopPackage">
            <results>
              <test-suite type="TestFixture" name="Uninstall-ScoopPackage.When Scoop is not installed" executed="True" result="Success" success="True" time="0.021" asserts="0" description="Uninstall-ScoopPackage.When Scoop is not installed">
                <results>
                  <test-case description="Should return false" name="Uninstall-ScoopPackage.When Scoop is not installed.Should return false" time="0.0115" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopPackage.When Scoop command cannot be found" executed="True" result="Success" success="True" time="0.063" asserts="0" description="Uninstall-ScoopPackage.When Scoop command cannot be found">
                <results>
                  <test-case description="Should return false" name="Uninstall-ScoopPackage.When Scoop command cannot be found.Should return false" time="0.0158" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopPackage.When package is not installed" executed="True" result="Success" success="True" time="0.0966" asserts="0" description="Uninstall-ScoopPackage.When package is not installed">
                <results>
                  <test-case description="Should return true" name="Uninstall-ScoopPackage.When package is not installed.Should return true" time="0.0238" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopPackage.When uninstall succeeds" executed="True" result="Success" success="True" time="0.1644" asserts="0" description="Uninstall-ScoopPackage.When uninstall succeeds">
                <results>
                  <test-case description="Should return true" name="Uninstall-ScoopPackage.When uninstall succeeds.Should return true" time="0.058" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopPackage.When uninstall fails" executed="True" result="Success" success="True" time="0.2183" asserts="0" description="Uninstall-ScoopPackage.When uninstall fails">
                <results>
                  <test-case description="Should return false" name="Uninstall-ScoopPackage.When uninstall fails.Should return false" time="0.0439" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopPackage.When uninstall throws an exception" executed="True" result="Success" success="True" time="0.2868" asserts="0" description="Uninstall-ScoopPackage.When uninstall throws an exception">
                <results>
                  <test-case description="Should return false" name="Uninstall-ScoopPackage.When uninstall throws an exception.Should return false" time="0.0586" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Uninstall-ScoopPackage.When uninstalling a global package" executed="True" result="Success" success="True" time="0.3546" asserts="0" description="Uninstall-ScoopPackage.When uninstalling a global package">
                <results>
                  <test-case description="Should pass --global and return true" name="Uninstall-ScoopPackage.When uninstalling a global package.Should pass --global and return true" time="0.0576" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Write-ScoopCache.Tests.ps1" executed="True" result="Success" success="True" time="0.4588" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Providers\Scoop\Write-ScoopCache.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Write-ScoopCache" executed="True" result="Success" success="True" time="0.3664" asserts="0" description="Write-ScoopCache">
            <results>
              <test-suite type="TestFixture" name="Write-ScoopCache.When Scoop is not installed" executed="True" result="Success" success="True" time="0.0264" asserts="0" description="Write-ScoopCache.When Scoop is not installed">
                <results>
                  <test-case description="Should return false and warn" name="Write-ScoopCache.When Scoop is not installed.Should return false and warn" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-ScoopCache.When Scoop command cannot be found" executed="True" result="Success" success="True" time="0.0719" asserts="0" description="Write-ScoopCache.When Scoop command cannot be found">
                <results>
                  <test-case description="Should return false and warn" name="Write-ScoopCache.When Scoop command cannot be found.Should return false and warn" time="0.0337" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-ScoopCache.When cache file is written successfully" executed="True" result="Success" success="True" time="0.1653" asserts="0" description="Write-ScoopCache.When cache file is written successfully">
                <results>
                  <test-case description="Should return true and debug" name="Write-ScoopCache.When cache file is written successfully.Should return true and debug" time="0.085" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-ScoopCache.When writing cache file fails" executed="True" result="Success" success="True" time="0.29" asserts="0" description="Write-ScoopCache.When writing cache file fails">
                <results>
                  <test-case description="Should return false and error" name="Write-ScoopCache.When writing cache file fails.Should return false and error" time="0.1156" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-ScoopCache.When scoop export throws an exception" executed="True" result="Success" success="True" time="0.3582" asserts="0" description="Write-ScoopCache.When scoop export throws an exception">
                <results>
                  <test-case description="Should return false and error" name="Write-ScoopCache.When scoop export throws an exception.Should return false and error" time="0.0597" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\ConvertFrom-Base64.Tests.ps1" executed="True" result="Success" success="True" time="0.1446" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\ConvertFrom-Base64.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertFrom-Base64" executed="True" result="Success" success="True" time="0.0745" asserts="0" description="ConvertFrom-Base64">
            <results>
              <test-suite type="TestFixture" name="ConvertFrom-Base64.When EncodedString is empty" executed="True" result="Success" success="True" time="0.0141" asserts="0" description="ConvertFrom-Base64.When EncodedString is empty">
                <results>
                  <test-case description="Should write error and return false" name="ConvertFrom-Base64.When EncodedString is empty.Should write error and return false" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConvertFrom-Base64.When EncodedString is valid and OutputFile is not provided" executed="True" result="Success" success="True" time="0.0264" asserts="0" description="ConvertFrom-Base64.When EncodedString is valid and OutputFile is not provided">
                <results>
                  <test-case description="Should decode and return the string" name="ConvertFrom-Base64.When EncodedString is valid and OutputFile is not provided.Should decode and return the string" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConvertFrom-Base64.When EncodedString is valid and OutputFile is provided" executed="True" result="Success" success="True" time="0.0518" asserts="0" description="ConvertFrom-Base64.When EncodedString is valid and OutputFile is provided">
                <results>
                  <test-case description="Should decode and write to file, returning true" name="ConvertFrom-Base64.When EncodedString is valid and OutputFile is provided.Should decode and write to file, returning true" time="0.0169" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConvertFrom-Base64.When EncodedString is invalid base64" executed="True" result="Success" success="True" time="0.0665" asserts="0" description="ConvertFrom-Base64.When EncodedString is invalid base64">
                <results>
                  <test-case description="Should write error and return false" name="ConvertFrom-Base64.When EncodedString is invalid base64.Should write error and return false" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\ConvertTo-Base64.Tests.ps1" executed="True" result="Success" success="True" time="0.154" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\ConvertTo-Base64.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="ConvertTo-Base64" executed="True" result="Success" success="True" time="0.0844" asserts="0" description="ConvertTo-Base64">
            <results>
              <test-suite type="TestFixture" name="ConvertTo-Base64.When converting a string to Base64" executed="True" result="Success" success="True" time="0.0122" asserts="0" description="ConvertTo-Base64.When converting a string to Base64">
                <results>
                  <test-case description="Should return the correct Base64 string" name="ConvertTo-Base64.When converting a string to Base64.Should return the correct Base64 string" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConvertTo-Base64.When converting a file to Base64" executed="True" result="Success" success="True" time="0.0295" asserts="0" description="ConvertTo-Base64.When converting a file to Base64">
                <results>
                  <test-case description="Should return the correct Base64 string" name="ConvertTo-Base64.When converting a file to Base64.Should return the correct Base64 string" time="0.0091" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConvertTo-Base64.When file does not exist" executed="True" result="Success" success="True" time="0.0435" asserts="0" description="ConvertTo-Base64.When file does not exist">
                <results>
                  <test-case description="Should write error and return null" name="ConvertTo-Base64.When file does not exist.Should write error and return null" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConvertTo-Base64.When an exception occurs" executed="True" result="Success" success="True" time="0.0764" asserts="0" description="ConvertTo-Base64.When an exception occurs">
                <results>
                  <test-case description="Should write error and return null" name="ConvertTo-Base64.When an exception occurs.Should write error and return null" time="0.0244" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupCachePath.Tests.ps1" executed="True" result="Success" success="True" time="0.1096" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupCachePath.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-DevSetupCachePath" executed="True" result="Success" success="True" time="0.0457" asserts="0" description="Get-DevSetupCachePath">
            <results>
              <test-case description="should return the correct cache path for a valid user" name="Get-DevSetupCachePath.should return the correct cache path for a valid user" time="0.0125" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupCommunityEnvPath.Tests.ps1" executed="True" result="Success" success="True" time="0.1214" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupCommunityEnvPath.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-DevSetupCommunityEnvPath" executed="True" result="Success" success="True" time="0.0423" asserts="0" description="Get-DevSetupCommunityEnvPath">
            <results>
              <test-case description="Should call Get-DevSetupEnvPath and Join-Path, and return the correct path" name="Get-DevSetupCommunityEnvPath.Should call Get-DevSetupEnvPath and Join-Path, and return the correct path" time="0.0252" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should handle different base paths" name="Get-DevSetupCommunityEnvPath.Should handle different base paths" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupEnvPath.Tests.ps1" executed="True" result="Success" success="True" time="0.0806" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupEnvPath.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-DevSetupEnvPath" executed="True" result="Success" success="True" time="0.017" asserts="0" description="Get-DevSetupEnvPath">
            <results>
              <test-case description="should return the correct environment path for a valid user" name="Get-DevSetupEnvPath.should return the correct environment path for a valid user" time="0.009" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupLocalEnvPath.Tests.ps1" executed="True" result="Success" success="True" time="0.1169" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupLocalEnvPath.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-DevSetupLocalEnvPath" executed="True" result="Success" success="True" time="0.0382" asserts="0" description="Get-DevSetupLocalEnvPath">
            <results>
              <test-case description="Should call Get-DevSetupEnvPath and Join-Path, and return the correct path" name="Get-DevSetupLocalEnvPath.Should call Get-DevSetupEnvPath and Join-Path, and return the correct path" time="0.0213" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should handle different base paths" name="Get-DevSetupLocalEnvPath.Should handle different base paths" time="0.0083" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupManifest.Tests.ps1" executed="True" result="Success" success="True" time="0.0964" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupManifest.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-DevSetupManifest" executed="True" result="Success" success="True" time="0.0356" asserts="0" description="Get-DevSetupManifest">
            <results>
              <test-case description="should return the manifest file and not null" name="Get-DevSetupManifest.should return the manifest file and not null" time="0.0144" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="should contain the RootModule" name="Get-DevSetupManifest.should contain the RootModule" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupPath.Tests.ps1" executed="True" result="Success" success="True" time="0.0887" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupPath.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-DevSetupPath" executed="True" result="Success" success="True" time="0.0182" asserts="0" description="Get-DevSetupPath">
            <results>
              <test-case description="should return the correct devsetup for the current user" name="Get-DevSetupPath.should return the correct devsetup for the current user" time="0.0099" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupVersion.Tests.ps1" executed="True" result="Success" success="True" time="0.1" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-DevSetupVersion.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-DevSetupVersion" executed="True" result="Success" success="True" time="0.0354" asserts="0" description="Get-DevSetupVersion">
            <results>
              <test-case description="should return the correct version when looking locally" name="Get-DevSetupVersion.should return the correct version when looking locally" time="0.0128" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="should return the correct version when looking remotely" name="Get-DevSetupVersion.should return the correct version when looking remotely" time="0.0144" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-EnvironmentVariable.Tests.ps1" executed="True" result="Success" success="True" time="0.1143" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-EnvironmentVariable.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-EnvironmentVariable" executed="True" result="Success" success="True" time="0.052" asserts="0" description="Get-EnvironmentVariable">
            <results>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.When the environment variable exists" executed="True" result="Success" success="True" time="0.0201" asserts="0" description="Get-EnvironmentVariable.When the environment variable exists">
                <results>
                  <test-case description="Should return the value of the variable" name="Get-EnvironmentVariable.When the environment variable exists.Should return the value of the variable" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.When the environment variable does not exist" executed="True" result="Success" success="True" time="0.0317" asserts="0" description="Get-EnvironmentVariable.When the environment variable does not exist">
                <results>
                  <test-case description="Should return null" name="Get-EnvironmentVariable.When the environment variable does not exist.Should return null" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Get-EnvironmentVariable.When called with pipeline input" executed="True" result="Success" success="True" time="0.0439" asserts="0" description="Get-EnvironmentVariable.When called with pipeline input">
                <results>
                  <test-case description="Should return the value for each variable" name="Get-EnvironmentVariable.When called with pipeline input.Should return the value for each variable" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-PwshVersion.Tests.ps1" executed="True" result="Success" success="True" time="0.0906" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Get-PwshVersion.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-PwshVersion" executed="True" result="Success" success="True" time="0.029" asserts="0" description="Get-PwshVersion">
            <results>
              <test-suite type="TestFixture" name="Get-PwshVersion.When called in a typical PowerShell environment" executed="True" result="Success" success="True" time="0.021" asserts="0" description="Get-PwshVersion.When called in a typical PowerShell environment">
                <results>
                  <test-case description="Should return a hashtable with Major, Minor, and Patch keys" name="Get-PwshVersion.When called in a typical PowerShell environment.Should return a hashtable with Major, Minor, and Patch keys" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return correct version numbers from \System.Management.Automation.PSVersionHashTable" name="Get-PwshVersion.When called in a typical PowerShell environment.Should return correct version numbers from \System.Management.Automation.PSVersionHashTable" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Initialize-DevSetupEnvs.Tests.ps1" executed="True" result="Success" success="True" time="0.4967" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Initialize-DevSetupEnvs.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Initialize-DevSetupEnvs" executed="True" result="Success" success="True" time="0.372" asserts="0" description="Initialize-DevSetupEnvs">
            <results>
              <test-suite type="TestFixture" name="Initialize-DevSetupEnvs.When manifest cannot be retrieved" executed="True" result="Success" success="True" time="0.0224" asserts="0" description="Initialize-DevSetupEnvs.When manifest cannot be retrieved">
                <results>
                  <test-case description="Should write error and return null" name="Initialize-DevSetupEnvs.When manifest cannot be retrieved.Should write error and return null" time="0.014" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetupEnvs.When EnvironmentsProjectUri is missing" executed="True" result="Success" success="True" time="0.0431" asserts="0" description="Initialize-DevSetupEnvs.When EnvironmentsProjectUri is missing">
                <results>
                  <test-case description="Should write error and return null" name="Initialize-DevSetupEnvs.When EnvironmentsProjectUri is missing.Should write error and return null" time="0.0126" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetupEnvs.When EnvironmentsProjectUri is not a .git URL and GitHub API fails" executed="True" result="Success" success="True" time="0.0826" asserts="0" description="Initialize-DevSetupEnvs.When EnvironmentsProjectUri is not a .git URL and GitHub API fails">
                <results>
                  <test-case description="Should write error and return null" name="Initialize-DevSetupEnvs.When EnvironmentsProjectUri is not a .git URL and GitHub API fails.Should write error and return null" time="0.0311" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetupEnvs.When Get-GitHubRepository throws" executed="True" result="Success" success="True" time="0.1125" asserts="0" description="Initialize-DevSetupEnvs.When Get-GitHubRepository throws">
                <results>
                  <test-case description="Should write error and return null" name="Initialize-DevSetupEnvs.When Get-GitHubRepository throws.Should write error and return null" time="0.0216" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetupEnvs.When EnvironmentsProjectUri is a .git URL" executed="True" result="Success" success="True" time="0.1489" asserts="0" description="Initialize-DevSetupEnvs.When EnvironmentsProjectUri is a .git URL">
                <results>
                  <test-case description="Should use the URI directly and clone the repository" name="Initialize-DevSetupEnvs.When EnvironmentsProjectUri is a .git URL.Should use the URI directly and clone the repository" time="0.028" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetupEnvs.When repository path already exists" executed="True" result="Success" success="True" time="0.1989" asserts="0" description="Initialize-DevSetupEnvs.When repository path already exists">
                <results>
                  <test-case description="Should not clone and should write verbose" name="Initialize-DevSetupEnvs.When repository path already exists.Should not clone and should write verbose" time="0.0419" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetupEnvs.When Install-GitRepository fails" executed="True" result="Success" success="True" time="0.2466" asserts="0" description="Initialize-DevSetupEnvs.When Install-GitRepository fails">
                <results>
                  <test-case description="Should write failed status message" name="Initialize-DevSetupEnvs.When Install-GitRepository fails.Should write failed status message" time="0.0321" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetupEnvs.When Install-GitRepository succeeds" executed="True" result="Success" success="True" time="0.2883" asserts="0" description="Initialize-DevSetupEnvs.When Install-GitRepository succeeds">
                <results>
                  <test-case description="Should write OK status message" name="Initialize-DevSetupEnvs.When Install-GitRepository succeeds.Should write OK status message" time="0.0316" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetupEnvs.When Optimize-DevSetupEnvs is called" executed="True" result="Success" success="True" time="0.3364" asserts="0" description="Initialize-DevSetupEnvs.When Optimize-DevSetupEnvs is called">
                <results>
                  <test-case description="Should call Optimize-DevSetupEnvs after cloning" name="Initialize-DevSetupEnvs.When Optimize-DevSetupEnvs is called.Should call Optimize-DevSetupEnvs after cloning" time="0.0405" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Initialize-DevSetupEnvs.When an unexpected error occurs" executed="True" result="Success" success="True" time="0.3639" asserts="0" description="Initialize-DevSetupEnvs.When an unexpected error occurs">
                <results>
                  <test-case description="Should write error and return null" name="Initialize-DevSetupEnvs.When an unexpected error occurs.Should write error and return null" time="0.0187" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Optimize-DevSetupEnvs.Tests.ps1" executed="True" result="Success" success="True" time="0.5263" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Optimize-DevSetupEnvs.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Optimize-DevSetupEnvs" executed="True" result="Success" success="True" time="0.359" asserts="0" description="Optimize-DevSetupEnvs">
            <results>
              <test-suite type="TestFixture" name="Optimize-DevSetupEnvs.When environments path is missing or invalid" executed="True" result="Success" success="True" time="0.0566" asserts="0" description="Optimize-DevSetupEnvs.When environments path is missing or invalid">
                <results>
                  <test-case description="Should warn and return false" name="Optimize-DevSetupEnvs.When environments path is missing or invalid.Should warn and return false" time="0.0118" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should warn and return null if path does not exist" name="Optimize-DevSetupEnvs.When environments path is missing or invalid.Should warn and return null if path does not exist" time="0.0289" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Optimize-DevSetupEnvs.When no YAML files are found" executed="True" result="Success" success="True" time="0.1207" asserts="0" description="Optimize-DevSetupEnvs.When no YAML files are found">
                <results>
                  <test-case description="Should write status message and return empty array" name="Optimize-DevSetupEnvs.When no YAML files are found.Should write status message and return empty array" time="0.052" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Optimize-DevSetupEnvs.When YAML files are found and processed successfully" executed="True" result="Success" success="True" time="0.1876" asserts="0" description="Optimize-DevSetupEnvs.When YAML files are found and processed successfully">
                <results>
                  <test-case description="Should return environments array and write status messages" name="Optimize-DevSetupEnvs.When YAML files are found and processed successfully.Should return environments array and write status messages" time="0.0585" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Optimize-DevSetupEnvs.When a YAML file fails to process" executed="True" result="Success" success="True" time="0.2608" asserts="0" description="Optimize-DevSetupEnvs.When a YAML file fails to process">
                <results>
                  <test-case description="Should warn and continue processing other files" name="Optimize-DevSetupEnvs.When a YAML file fails to process.Should warn and continue processing other files" time="0.0652" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Optimize-DevSetupEnvs.When writing environments.json fails" executed="True" result="Success" success="True" time="0.3315" asserts="0" description="Optimize-DevSetupEnvs.When writing environments.json fails">
                <results>
                  <test-case description="Should write failed status message and return null" name="Optimize-DevSetupEnvs.When writing environments.json fails.Should write failed status message and return null" time="0.0625" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Optimize-DevSetupEnvs.When an unexpected error occurs" executed="True" result="Success" success="True" time="0.3513" asserts="0" description="Optimize-DevSetupEnvs.When an unexpected error occurs">
                <results>
                  <test-case description="Should write error and return null" name="Optimize-DevSetupEnvs.When an unexpected error occurs.Should write error and return null" time="0.0121" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Read-ConfigurationFile.Tests.ps1" executed="True" result="Success" success="True" time="0.226" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Read-ConfigurationFile.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Read-ConfigurationFile" executed="True" result="Success" success="True" time="0.133" asserts="0" description="Read-ConfigurationFile">
            <results>
              <test-suite type="TestFixture" name="Read-ConfigurationFile.When configuration file exists and contains valid YAML" executed="True" result="Success" success="True" time="0.0417" asserts="0" description="Read-ConfigurationFile.When configuration file exists and contains valid YAML">
                <results>
                  <test-case description="Should return parsed YAML data" name="Read-ConfigurationFile.When configuration file exists and contains valid YAML.Should return parsed YAML data" time="0.0237" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Read-ConfigurationFile.When configuration file does not exist" executed="True" result="Success" success="True" time="0.0706" asserts="0" description="Read-ConfigurationFile.When configuration file does not exist">
                <results>
                  <test-case description="Should throw an error" name="Read-ConfigurationFile.When configuration file does not exist.Should throw an error" time="0.0187" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Read-ConfigurationFile.When YAML is invalid" executed="True" result="Success" success="True" time="0.0963" asserts="0" description="Read-ConfigurationFile.When YAML is invalid">
                <results>
                  <test-case description="Should throw an error from ConvertFrom-Yaml" name="Read-ConfigurationFile.When YAML is invalid.Should throw an error from ConvertFrom-Yaml" time="0.014" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Read-ConfigurationFile.When ConvertFrom-Yaml returns " executed="True" result="Success" success="True" time="0.1238" asserts="0" description="Read-ConfigurationFile.When ConvertFrom-Yaml returns ">
                <results>
                  <test-case description="Should return null" name="Read-ConfigurationFile.When ConvertFrom-Yaml returns .Should return null" time="0.0142" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Test-OperatingSystem.Tests.ps1" executed="True" result="Success" success="True" time="0.1645" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Test-OperatingSystem.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-OperatingSystem" executed="True" result="Success" success="True" time="0.0579" asserts="0" description="Test-OperatingSystem">
            <results>
              <test-suite type="TestFixture" name="Test-OperatingSystem.When called with -Windows on PowerShell 7+" executed="True" result="Success" success="True" time="0.0414" asserts="0" description="Test-OperatingSystem.When called with -Windows on PowerShell 7+">
                <results>
                  <test-case description="Should return value of $IsWindows (default: True)" name="Test-OperatingSystem.When called with -Windows on PowerShell 7+.Should return value of $IsWindows (default: True)" time="0.0077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return value of $IsLinux (default: False)" name="Test-OperatingSystem.When called with -Windows on PowerShell 7+.Should return value of $IsLinux (default: False)" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return value of $IsMacOS (default: False)" name="Test-OperatingSystem.When called with -Windows on PowerShell 7+.Should return value of $IsMacOS (default: False)" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return  if no parameter is specified" name="Test-OperatingSystem.When called with -Windows on PowerShell 7+.Should return  if no parameter is specified" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Test-RunningAsAdmin.Tests.ps1" executed="True" result="Success" success="True" time="0.1794" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Test-RunningAsAdmin.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-RunningAsAdmin" executed="True" result="Success" success="True" time="0.0891" asserts="0" description="Test-RunningAsAdmin">
            <results>
              <test-suite type="TestFixture" name="Test-RunningAsAdmin.When not running on Windows" executed="True" result="Success" success="True" time="0.0183" asserts="0" description="Test-RunningAsAdmin.When not running on Windows">
                <results>
                  <test-case description="Should return true (assume sufficient privileges)" name="Test-RunningAsAdmin.When not running on Windows.Should return true (assume sufficient privileges)" time="0.0088" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-RunningAsAdmin.When running on Windows as administrator" executed="True" result="Success" success="True" time="0.054" asserts="0" description="Test-RunningAsAdmin.When running on Windows as administrator">
                <results>
                  <test-case description="Should return true" name="Test-RunningAsAdmin.When running on Windows as administrator.Should return true" time="0.0167" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-RunningAsAdmin.When running on Windows but not as administrator" executed="True" result="Success" success="True" time="0.0795" asserts="0" description="Test-RunningAsAdmin.When running on Windows but not as administrator">
                <results>
                  <test-case description="Should return false" name="Test-RunningAsAdmin.When running on Windows but not as administrator.Should return false" time="0.0156" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\git-projects\devsetup\DevSetup\Private\Utils\Write-StatusMessage.Tests.ps1" executed="True" result="Success" success="True" time="0.3269" asserts="0" description="C:\git-projects\devsetup\DevSetup\Private\Utils\Write-StatusMessage.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Write-StatusMessage" executed="True" result="Success" success="True" time="0.2203" asserts="0" description="Write-StatusMessage">
            <results>
              <test-suite type="TestFixture" name="Write-StatusMessage.When called with default parameters" executed="True" result="Success" success="True" time="0.0239" asserts="0" description="Write-StatusMessage.When called with default parameters">
                <results>
                  <test-case description="Should call Write-Host with the message" name="Write-StatusMessage.When called with default parameters.Should call Write-Host with the message" time="0.0139" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-StatusMessage.When Verbosity is Verbose" executed="True" result="Success" success="True" time="0.053" asserts="0" description="Write-StatusMessage.When Verbosity is Verbose">
                <results>
                  <test-case description="Should call Write-Verbose" name="Write-StatusMessage.When Verbosity is Verbose.Should call Write-Verbose" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-StatusMessage.When Verbosity is Debug" executed="True" result="Success" success="True" time="0.0734" asserts="0" description="Write-StatusMessage.When Verbosity is Debug">
                <results>
                  <test-case description="Should call Write-Debug" name="Write-StatusMessage.When Verbosity is Debug.Should call Write-Debug" time="0.0102" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-StatusMessage.When Verbosity is Warning" executed="True" result="Success" success="True" time="0.0918" asserts="0" description="Write-StatusMessage.When Verbosity is Warning">
                <results>
                  <test-case description="Should call Write-Warning" name="Write-StatusMessage.When Verbosity is Warning.Should call Write-Warning" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-StatusMessage.When Verbosity is Error" executed="True" result="Success" success="True" time="0.1102" asserts="0" description="Write-StatusMessage.When Verbosity is Error">
                <results>
                  <test-case description="Should call Write-Error" name="Write-StatusMessage.When Verbosity is Error.Should call Write-Error" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-StatusMessage.When Indent is specified" executed="True" result="Success" success="True" time="0.1287" asserts="0" description="Write-StatusMessage.When Indent is specified">
                <results>
                  <test-case description="Should indent the message" name="Write-StatusMessage.When Indent is specified.Should indent the message" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-StatusMessage.When Width is specified and message is longer" executed="True" result="Success" success="True" time="0.1472" asserts="0" description="Write-StatusMessage.When Width is specified and message is longer">
                <results>
                  <test-case description="Should truncate the message with ellipsis" name="Write-StatusMessage.When Width is specified and message is longer.Should truncate the message with ellipsis" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-StatusMessage.When Width is specified and message is shorter" executed="True" result="Success" success="True" time="0.1655" asserts="0" description="Write-StatusMessage.When Width is specified and message is shorter">
                <results>
                  <test-case description="Should pad the message to the specified width" name="Write-StatusMessage.When Width is specified and message is shorter.Should pad the message to the specified width" time="0.0086" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-StatusMessage.When NoNewLine is specified" executed="True" result="Success" success="True" time="0.1836" asserts="0" description="Write-StatusMessage.When NoNewLine is specified">
                <results>
                  <test-case description="Should pass NoNewLine to Write-Host" name="Write-StatusMessage.When NoNewLine is specified.Should pass NoNewLine to Write-Host" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Write-StatusMessage.When ForegroundColor is specified" executed="True" result="Success" success="True" time="0.2111" asserts="0" description="Write-StatusMessage.When ForegroundColor is specified">
                <results>
                  <test-case description="Should pass ForegroundColor to Write-Host" name="Write-StatusMessage.When ForegroundColor is specified.Should pass ForegroundColor to Write-Host" time="0.0087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>