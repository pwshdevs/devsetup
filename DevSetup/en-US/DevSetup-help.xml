<?xml version="1.0" encoding="utf-8"?>
<helpItems schema="maml" xmlns="http://msh">
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>ConvertFrom-3rdPartyInstall</command:name>
      <command:verb>ConvertFrom</command:verb>
      <command:noun>3rdPartyInstall</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>ConvertFrom-3rdPartyInstall</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>Config</maml:name>
          <maml:description>
            <maml:para>{{ Fill Config Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>Config</maml:name>
        <maml:description>
          <maml:para>{{ Fill Config Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>ConvertFrom-Base64</command:name>
      <command:verb>ConvertFrom</command:verb>
      <command:noun>Base64</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>ConvertFrom-Base64</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>EncodedString</maml:name>
          <maml:description>
            <maml:para>{{ Fill EncodedString Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>OutputFile</maml:name>
          <maml:description>
            <maml:para>{{ Fill OutputFile Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>EncodedString</maml:name>
        <maml:description>
          <maml:para>{{ Fill EncodedString Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>OutputFile</maml:name>
        <maml:description>
          <maml:para>{{ Fill OutputFile Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>ConvertFrom-VisualStudioCodeInstall</command:name>
      <command:verb>ConvertFrom</command:verb>
      <command:noun>VisualStudioCodeInstall</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>ConvertFrom-VisualStudioCodeInstall</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>Config</maml:name>
          <maml:description>
            <maml:para>{{ Fill Config Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>Config</maml:name>
        <maml:description>
          <maml:para>{{ Fill Config Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>ConvertFrom-VisualStudioInstall</command:name>
      <command:verb>ConvertFrom</command:verb>
      <command:noun>VisualStudioInstall</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>ConvertFrom-VisualStudioInstall</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>Config</maml:name>
          <maml:description>
            <maml:para>{{ Fill Config Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>OutFile</maml:name>
          <maml:description>
            <maml:para>{{ Fill OutFile Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>{{ Fill DryRun Description }}</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>Config</maml:name>
        <maml:description>
          <maml:para>{{ Fill Config Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>DryRun</maml:name>
        <maml:description>
          <maml:para>{{ Fill DryRun Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>OutFile</maml:name>
        <maml:description>
          <maml:para>{{ Fill OutFile Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>ConvertTo-Base64</command:name>
      <command:verb>ConvertTo</command:verb>
      <command:noun>Base64</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>ConvertTo-Base64</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>FilePath</maml:name>
          <maml:description>
            <maml:para>{{ Fill FilePath Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>ConvertTo-Base64</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>InputString</maml:name>
          <maml:description>
            <maml:para>{{ Fill InputString Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>FilePath</maml:name>
        <maml:description>
          <maml:para>{{ Fill FilePath Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>InputString</maml:name>
        <maml:description>
          <maml:para>{{ Fill InputString Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Export-DevSetupEnv</command:name>
      <command:verb>Export</command:verb>
      <command:noun>DevSetupEnv</command:noun>
      <maml:description>
        <maml:para>Exports the current system environment to a new DevSetup configuration file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function creates a new DevSetup environment configuration by scanning the current system for installed packages and components. It automatically sanitizes the environment name to ensure file system compatibility and exports the configuration to a YAML file in the DevSetup environments directory. The function captures the current state of PowerShell modules, Chocolatey packages, and other installed components for later reproduction.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-DevSetupEnv</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name for the new environment configuration. This parameter is mandatory and will be sanitized to contain only alphanumeric characters, hyphens, and periods. The resulting YAML file will be named "{Name}.yaml" in the DevSetup environments directory.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name for the new environment configuration. This parameter is mandatory and will be sanitized to contain only alphanumeric characters, hyphens, and periods. The resulting YAML file will be named "{Name}.yaml" in the DevSetup environments directory.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.String]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns the full path to the created configuration file if successful.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $null if the export operation fails.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Automatically sanitizes the environment name by removing non-alphanumeric characters except hyphens and periods</maml:para>
        <maml:para>- Displays a warning message if sanitization changes the original name</maml:para>
        <maml:para>- Uses Get-DevSetupEnvPath to determine the target directory for the configuration file</maml:para>
        <maml:para>- Calls Write-NewConfig to perform the actual system scanning and file creation</maml:para>
        <maml:para>- Returns the full file path on success for further processing or verification</maml:para>
        <maml:para>- Returns $null if Write-NewConfig fails to create the configuration</maml:para>
        <maml:para>- The exported configuration can be used with Install-DevSetupEnv to recreate the environment</maml:para>
        <maml:para>- Provides color-coded console output: Yellow for warnings, Green for success, Red for errors</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Export-DevSetupEnv -Name "MyCurrentSetup"</dev:code>
        <dev:remarks>
          <maml:para>Exports the current system state to a configuration file named "MyCurrentSetup.yaml".</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$configPath = Export-DevSetupEnv -Name "WebDev-2024"
if ($configPath) {
    Write-Host "Configuration saved to: $configPath"
} else {
    Write-Host "Export failed"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates capturing the return value to verify export success.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Export-DevSetupEnv -Name "Data Science Environment!"</dev:code>
        <dev:remarks>
          <maml:para>The exclamation mark will be removed, resulting in "DataScienceEnvironment.yaml". A warning message will indicate the sanitization that occurred.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Export-InstalledChocolateyPackages</command:name>
      <command:verb>Export</command:verb>
      <command:noun>InstalledChocolateyPackages</command:noun>
      <maml:description>
        <maml:para>Exports installed Chocolatey packages to a YAML configuration file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function scans the system for installed Chocolatey packages and exports them to a YAML  configuration file in DevSetup format. It uses 'choco list --local-only --limit-output' to retrieve  comprehensive package information including versions. The function intelligently filters out  system packages and can update existing configuration files by merging new packages with existing ones.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-InstalledChocolateyPackages</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Config</maml:name>
          <maml:description>
            <maml:para>The path to the YAML configuration file to read from and write to. This parameter is mandatory and specifies both the input and output file unless OutFile is specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
          <maml:name>OutFile</maml:name>
          <maml:description>
            <maml:para>The path to save the updated YAML configuration. Optional parameter that allows saving to a different file than the input Config file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Switch parameter that prevents writing to files and displays the resulting configuration to the console. Useful for previewing changes before committing them to a file.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Config</maml:name>
        <maml:description>
          <maml:para>The path to the YAML configuration file to read from and write to. This parameter is mandatory and specifies both the input and output file unless OutFile is specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
        <maml:name>OutFile</maml:name>
        <maml:description>
          <maml:para>The path to save the updated YAML configuration. Optional parameter that allows saving to a different file than the input Config file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>DryRun</maml:name>
        <maml:description>
          <maml:para>Switch parameter that prevents writing to files and displays the resulting configuration to the console. Useful for previewing changes before committing them to a file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the export completes successfully or if no packages are found.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if there are errors during the export process.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires administrator privileges to access all installed packages</maml:para>
        <maml:para>- Uses 'choco list --local-only --limit-output' for machine-readable package information</maml:para>
        <maml:para>- Automatically filters out system packages:</maml:para>
        <maml:para>  * Packages ending with '.install' (installer packages)   * Packages starting with 'chocolatey' (Chocolatey system packages) - Merges with existing YAML configuration, preserving other sections and structure</maml:para>
        <maml:para>- Supports both simple string format and complex object format for packages</maml:para>
        <maml:para>- Updates existing packages when versions have changed</maml:para>
        <maml:para>- Converts string entries to hashtable format when version information is added</maml:para>
        <maml:para>- Creates the devsetup.dependencies.chocolatey structure if it doesn't exist</maml:para>
        <maml:para>- Provides detailed console output with color-coded status messages for operations</maml:para>
        <maml:para>- Handles YAML conversion errors gracefully by falling back to JSON format</maml:para>
        <maml:para>- Tracks package changes: new additions, version updates, and no-change skips</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Export-InstalledChocolateyPackages -Config "environment.yaml"</dev:code>
        <dev:remarks>
          <maml:para>Exports installed Chocolatey packages to the existing environment.yaml configuration file.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Export-InstalledChocolateyPackages -Config "current.yaml" -OutFile "backup.yaml"</dev:code>
        <dev:remarks>
          <maml:para>Reads from current.yaml and saves the updated configuration with installed packages to backup.yaml.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Export-InstalledChocolateyPackages -Config "dev-env.yaml" -DryRun</dev:code>
        <dev:remarks>
          <maml:para>Shows what the configuration would look like without actually saving to file.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Export-InstalledPowershellModules</command:name>
      <command:verb>Export</command:verb>
      <command:noun>InstalledPowershellModules</command:noun>
      <maml:description>
        <maml:para>Exports installed PowerShell modules to a YAML configuration file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function scans the system for installed PowerShell modules and exports them to a YAML  configuration file in DevSetup format. It uses Get-InstalledModule to retrieve comprehensive  module information including versions and installation scope. The function intelligently skips  core dependency modules defined in the DevSetup manifest and can update existing configuration files by merging new modules with existing ones.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-InstalledPowershellModules</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Config</maml:name>
          <maml:description>
            <maml:para>The path to the YAML configuration file to read from and write to. This parameter is mandatory and specifies both the input and output file unless OutFile is specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
          <maml:name>OutFile</maml:name>
          <maml:description>
            <maml:para>The path to save the updated YAML configuration. Optional parameter that allows saving to a different file than the input Config file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Switch parameter that prevents writing to files and displays the resulting configuration to the console. Useful for previewing changes before committing them to a file.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Config</maml:name>
        <maml:description>
          <maml:para>The path to the YAML configuration file to read from and write to. This parameter is mandatory and specifies both the input and output file unless OutFile is specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
        <maml:name>OutFile</maml:name>
        <maml:description>
          <maml:para>The path to save the updated YAML configuration. Optional parameter that allows saving to a different file than the input Config file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>DryRun</maml:name>
        <maml:description>
          <maml:para>Switch parameter that prevents writing to files and displays the resulting configuration to the console. Useful for previewing changes before committing them to a file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the export completes successfully or if no modules are found.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if there are errors during the export process.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires administrator privileges to access all installed modules</maml:para>
        <maml:para>- Uses Get-InstalledModule to retrieve module information from PowerShell Gallery</maml:para>
        <maml:para>- Automatically skips core dependency modules listed in the DevSetup manifest</maml:para>
        <maml:para>- Handles both CurrentUser and AllUsers scope modules using path analysis</maml:para>
        <maml:para>- Merges with existing YAML configuration, preserving other sections</maml:para>
        <maml:para>- Supports both simple string format and complex object format for modules</maml:para>
        <maml:para>- Updates existing modules when versions have changed</maml:para>
        <maml:para>- Converts string entries to hashtable format when additional properties are needed</maml:para>
        <maml:para>- Tracks installation scope (CurrentUser/AllUsers) for each module</maml:para>
        <maml:para>- Creates the devsetup.dependencies.powershell structure if it doesn't exist</maml:para>
        <maml:para>- Provides detailed console output with color-coded status messages</maml:para>
        <maml:para>- Includes comprehensive error handling for module scanning and file operations</maml:para>
        <maml:para>- Preserves existing module properties while updating changed values</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Export-InstalledPowershellModules -Config "environment.yaml"</dev:code>
        <dev:remarks>
          <maml:para>Exports installed PowerShell modules to the existing environment.yaml configuration file.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Export-InstalledPowershellModules -Config "current.yaml" -OutFile "backup.yaml"</dev:code>
        <dev:remarks>
          <maml:para>Reads from current.yaml and saves the updated configuration with installed modules to backup.yaml.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Export-InstalledPowershellModules -Config "dev-env.yaml" -DryRun</dev:code>
        <dev:remarks>
          <maml:para>Shows what the configuration would look like without actually saving to file.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Export-InstalledScoopPackages</command:name>
      <command:verb>Export</command:verb>
      <command:noun>InstalledScoopPackages</command:noun>
      <maml:description>
        <maml:para>Exports installed Scoop packages and buckets to a YAML configuration file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function scans the system for installed Scoop packages and buckets, then exports them to a YAML  configuration file in DevSetup format. It uses 'scoop export' to retrieve comprehensive package information including versions, buckets, and global installation status. The function can update existing configuration files by merging new packages with existing ones, or create new configurations from scratch.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-InstalledScoopPackages</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Config</maml:name>
          <maml:description>
            <maml:para>The path to the YAML configuration file to read from and write to. This parameter is mandatory and specifies both the input and output file unless OutFile is specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
          <maml:name>OutFile</maml:name>
          <maml:description>
            <maml:para>The path to save the updated YAML configuration. Optional parameter that allows saving to a different file than the input Config file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Switch parameter that prevents writing to files and displays the resulting configuration to the console. Useful for previewing changes before committing them to a file.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Config</maml:name>
        <maml:description>
          <maml:para>The path to the YAML configuration file to read from and write to. This parameter is mandatory and specifies both the input and output file unless OutFile is specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
        <maml:name>OutFile</maml:name>
        <maml:description>
          <maml:para>The path to save the updated YAML configuration. Optional parameter that allows saving to a different file than the input Config file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>DryRun</maml:name>
        <maml:description>
          <maml:para>Switch parameter that prevents writing to files and displays the resulting configuration to the console. Useful for previewing changes before committing them to a file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the export completes successfully or if Scoop is not installed (skipped).</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if there are errors during the export process.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Scoop to be installed on the system (gracefully skips if not found)</maml:para>
        <maml:para>- Uses 'scoop export' command to retrieve package and bucket information in JSON format</maml:para>
        <maml:para>- Handles both local and global package installations using Info field detection</maml:para>
        <maml:para>- Automatically skips the 'main' bucket as it's installed by default with Scoop</maml:para>
        <maml:para>- Merges with existing YAML configuration, preserving other sections and structure</maml:para>
        <maml:para>- Supports both simple string format and complex object format for packages and buckets</maml:para>
        <maml:para>- Updates existing packages/buckets when versions or sources have changed</maml:para>
        <maml:para>- Tracks global installation status and bucket information for each package</maml:para>
        <maml:para>- Provides detailed console output with color-coded status messages for all operations</maml:para>
        <maml:para>- Creates the devsetup.dependencies.scoop structure if it doesn't exist</maml:para>
        <maml:para>- Processes buckets before packages to ensure proper dependency order</maml:para>
        <maml:para>- Converts string entries to hashtable format when additional properties are needed</maml:para>
        <maml:para>- Preserves existing package properties while updating changed values</maml:para>
        <maml:para>- Includes comprehensive error handling for JSON parsing and file operations</maml:para>
        <maml:para>- Returns $true even when no packages are found (successful empty result)</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Export-InstalledScoopPackages -Config "environment.yaml"</dev:code>
        <dev:remarks>
          <maml:para>Exports installed Scoop packages to the existing environment.yaml configuration file.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Export-InstalledScoopPackages -Config "current.yaml" -OutFile "backup.yaml"</dev:code>
        <dev:remarks>
          <maml:para>Reads from current.yaml and saves the updated configuration with installed packages to backup.yaml.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Export-InstalledScoopPackages -Config "dev-env.yaml" -DryRun</dev:code>
        <dev:remarks>
          <maml:para>Shows what the configuration would look like without actually saving to file.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Export-VsCodeConfig</command:name>
      <command:verb>Export</command:verb>
      <command:noun>VsCodeConfig</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-VsCodeConfig</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Export-VssConfig</command:name>
      <command:verb>Export</command:verb>
      <command:noun>VssConfig</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-VssConfig</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>VssInstallPath</maml:name>
          <maml:description>
            <maml:para>{{ Fill VssInstallPath Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>VssInstallPath</maml:name>
        <maml:description>
          <maml:para>{{ Fill VssInstallPath Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Find-GitRepositories</command:name>
      <command:verb>Find</command:verb>
      <command:noun>GitRepositories</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Find-GitRepositories</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>The top level path to search</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>The top level path to search</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Find-Scoop</command:name>
      <command:verb>Find</command:verb>
      <command:noun>Scoop</command:noun>
      <maml:description>
        <maml:para>Locates the Scoop package manager executable on the system.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function searches for the Scoop package manager executable using multiple detection methods. It first attempts to find 'scoop' in the system PATH, and if not found, searches for Scoop installation files in the default user profile directory. The function returns the appropriate command or file path that can be used to execute Scoop operations.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Find-Scoop</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.String]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns "scoop" if found in PATH, the full file path to the Scoop executable if found in the user profile,</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>or $null if Scoop cannot be located.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Performs multiple checks to locate Scoop installations:   1. Checks if 'scoop' command is available in PATH using Get-Command   2. Searches for ~\scoop\shims\scoop.ps1 (PowerShell script)   3. Searches for ~\scoop\shims\scoop.cmd (Command batch file)   4. Searches for ~\scoop\shims\scoop (Executable) - Returns the most accessible form first (PATH command before file paths)</maml:para>
        <maml:para>- Suppresses errors when checking for the scoop command to avoid console output</maml:para>
        <maml:para>- The returned value can be used directly with the call operator (&amp;) or Invoke-Expression</maml:para>
        <maml:para>- Does not verify that the found executable is functional, only that it exists</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Find-Scoop</dev:code>
        <dev:remarks>
          <maml:para>Locates the Scoop executable on the current system.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$scoopCommand = Find-Scoop
if ($scoopCommand) {
    &amp; $scoopCommand list
} else {
    Write-Warning "Scoop not found"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates using the returned command to execute Scoop operations.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>switch (Find-Scoop) {
    "scoop" { "Scoop found in PATH" }
    { $_ -like "*scoop.ps1" } { "Found PowerShell script: $_" }
    { $_ -like "*scoop.cmd" } { "Found batch file: $_" }
    { $_ -like "*scoop" } { "Found executable: $_" }
    $null { "Scoop not found" }
}</dev:code>
        <dev:remarks>
          <maml:para>Shows handling different types of Scoop installations.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Format-PrettyTable</command:name>
      <command:verb>Format</command:verb>
      <command:noun>PrettyTable</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Format-PrettyTable</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>Columns</maml:name>
          <maml:description>
            <maml:para>{{ Fill Columns Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
          <dev:type>
            <maml:name>Object</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Rows</maml:name>
          <maml:description>
            <maml:para>{{ Fill Rows Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Array</command:parameterValue>
          <dev:type>
            <maml:name>Array</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
          <maml:name>TableFormat</maml:name>
          <maml:description>
            <maml:para>{{ Fill TableFormat Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Hashtable</command:parameterValue>
          <dev:type>
            <maml:name>Hashtable</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>Columns</maml:name>
        <maml:description>
          <maml:para>{{ Fill Columns Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
        <dev:type>
          <maml:name>Object</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Rows</maml:name>
        <maml:description>
          <maml:para>{{ Fill Rows Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Array</command:parameterValue>
        <dev:type>
          <maml:name>Array</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
        <maml:name>TableFormat</maml:name>
        <maml:description>
          <maml:para>{{ Fill TableFormat Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Hashtable</command:parameterValue>
        <dev:type>
          <maml:name>Hashtable</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-ChocolateyCacheFile</command:name>
      <command:verb>Get</command:verb>
      <command:noun>ChocolateyCacheFile</command:noun>
      <maml:description>
        <maml:para>Gets the file path for the Chocolatey package cache file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function constructs and returns the full path to the Chocolatey package cache file within the DevSetup cache directory. The cache file is used to store information about installed Chocolatey packages and their versions for performance optimization and offline reference. The function uses Get-DevSetupCachePath to ensure the cache directory exists before returning the file path.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ChocolateyCacheFile</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.String]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns the full path to the Chocolatey cache file (chocolatey.cache) within the DevSetup cache directory.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Uses Get-DevSetupCachePath to ensure the cache directory exists</maml:para>
        <maml:para>- Returns a consistent file path (chocolatey.cache) within the DevSetup cache structure</maml:para>
        <maml:para>- The cache file is used for storing Chocolatey package metadata and version information</maml:para>
        <maml:para>- Does not create the cache file itself - only returns the path where it should be located</maml:para>
        <maml:para>- Used by other Chocolatey-related functions for performance optimization and data persistence</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Get-ChocolateyCacheFile</dev:code>
        <dev:remarks>
          <maml:para>Returns the path to the Chocolatey cache file, e.g., "C:\Users\Username\.devsetup\.cache\chocolatey.cache"</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$chocoCacheFile = Get-ChocolateyCacheFile
if (Test-Path $chocoCacheFile) {
    $cachedData = Get-Content $chocoCacheFile
}</dev:code>
        <dev:remarks>
          <maml:para>Gets the cache file path and checks if it exists before reading cached data.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$cacheFile = Get-ChocolateyCacheFile
Export-Clixml -Path $cacheFile -InputObject $chocolateyPackages</dev:code>
        <dev:remarks>
          <maml:para>Uses the cache file path to save Chocolatey package information.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-ChocolateyPackageDependencies</command:name>
      <command:verb>Get</command:verb>
      <command:noun>ChocolateyPackageDependencies</command:noun>
      <maml:description>
        <maml:para>Retrieves all package dependencies from installed Chocolatey packages.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function scans all installed Chocolatey packages and extracts their dependency information by parsing the .nuspec files in the Chocolatey lib directory. It reads the XML metadata from each package's nuspec file and collects all non-Chocolatey dependencies into a consolidated list. The function automatically filters out Chocolatey-specific dependencies to focus on actual package dependencies.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ChocolateyPackageDependencies</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Array]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns an array of package dependency names (strings) found across all installed packages.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns an empty array if no dependencies are found or Chocolatey is not installed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Chocolatey to be installed with packages in the standard lib directory</maml:para>
        <maml:para>- Uses $Env:ChocolateyInstall environment variable to locate the Chocolatey installation</maml:para>
        <maml:para>- Scans all .nuspec files recursively in the Chocolatey lib directory</maml:para>
        <maml:para>- Parses XML metadata from nuspec files to extract dependency information</maml:para>
        <maml:para>- Automatically filters out dependencies with IDs starting with "chocolatey" (Chocolatey system packages)</maml:para>
        <maml:para>- Returns all dependencies in a flat array, including duplicates from multiple packages</maml:para>
        <maml:para>- Provides debug logging for troubleshooting package discovery issues</maml:para>
        <maml:para>- Returns empty array gracefully if Chocolatey installation path is not found</maml:para>
        <maml:para>- Uses ForEach-Object (%) for efficient processing of large package collections</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Get-ChocolateyPackageDependencies</dev:code>
        <dev:remarks>
          <maml:para>Returns all package dependencies from installed Chocolatey packages.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$dependencies = Get-ChocolateyPackageDependencies
if ($dependencies.Count -gt 0) {
    Write-Host "Found $($dependencies.Count) dependencies"
    $dependencies | ForEach-Object { Write-Host "- $_" }
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates retrieving and displaying all package dependencies.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$allDeps = Get-ChocolateyPackageDependencies
$uniqueDeps = $allDeps | Select-Object -Unique | Sort-Object</dev:code>
        <dev:remarks>
          <maml:para>Gets all dependencies and creates a sorted list of unique dependency names.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-ChocolateyVersion</command:name>
      <command:verb>Get</command:verb>
      <command:noun>ChocolateyVersion</command:noun>
      <maml:description>
        <maml:para>Retrieves the version of the installed Chocolatey package manager.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function gets the version information from Chocolatey by executing the 'choco --version' command. It includes validation to ensure Chocolatey is installed before attempting to retrieve version information and provides comprehensive error handling with appropriate warning messages for various failure scenarios.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ChocolateyVersion</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.String]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns the Chocolatey version string (trimmed of whitespace) if successful.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $null if Chocolatey is not installed, version retrieval fails, or an error occurs.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Chocolatey to be installed on the system</maml:para>
        <maml:para>- Uses Test-ChocolateyInstalled to verify Chocolatey availability before proceeding</maml:para>
        <maml:para>- Returns $null immediately if Chocolatey is not installed</maml:para>
        <maml:para>- Suppresses stderr output using '2&gt;$null' to avoid console clutter</maml:para>
        <maml:para>- Trims whitespace from the version string for clean output</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling</maml:para>
        <maml:para>- Provides descriptive warning messages for different failure scenarios</maml:para>
        <maml:para>- Does not require administrator privileges</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Get-ChocolateyVersion</dev:code>
        <dev:remarks>
          <maml:para>Returns the installed Chocolatey version, e.g., "1.4.0"</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$chocoVersion = Get-ChocolateyVersion
if ($chocoVersion) {
    Write-Host "Chocolatey version: $chocoVersion"
} else {
    Write-Host "Could not determine Chocolatey version"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates capturing and validating the version result.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$version = Get-ChocolateyVersion
if ($version -and [version]$version -lt [version]"1.0.0") {
    Write-Warning "Chocolatey version is outdated. Consider upgrading."
}</dev:code>
        <dev:remarks>
          <maml:para>Shows version comparison for compatibility checking.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-DevSetupCachePath</command:name>
      <command:verb>Get</command:verb>
      <command:noun>DevSetupCachePath</command:noun>
      <maml:description>
        <maml:para>Gets the DevSetup cache directory path and ensures it exists.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function retrieves the cache directory path for the DevSetup module. The cache directory is located at ".cache" within the main DevSetup directory and is used to store temporary files, downloaded configurations, and other cached data. The function automatically creates the cache directory if it doesn't exist, ensuring it's always available for use.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-DevSetupCachePath</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.String]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns the full path to the DevSetup cache directory.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Uses Get-DevSetupPath to determine the base DevSetup directory</maml:para>
        <maml:para>- Creates the cache directory (.cache) if it doesn't exist</maml:para>
        <maml:para>- Returns the full path as a string for use in other functions</maml:para>
        <maml:para>- The cache directory is hidden (starts with a dot) on Unix-like systems</maml:para>
        <maml:para>- Suppresses output from New-Item using Out-Null for clean execution</maml:para>
        <maml:para>- Ensures the cache directory is always available for DevSetup operations</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Get-DevSetupCachePath</dev:code>
        <dev:remarks>
          <maml:para>Returns the path to the DevSetup cache directory, e.g., "C:\Users\Username\.devsetup\.cache"</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$cachePath = Get-DevSetupCachePath
$tempFile = Join-Path $cachePath "temp-config.yaml"</dev:code>
        <dev:remarks>
          <maml:para>Gets the cache path and creates a path for a temporary file within it.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$cacheDir = Get-DevSetupCachePath
Get-ChildItem $cacheDir</dev:code>
        <dev:remarks>
          <maml:para>Gets the cache directory and lists its contents.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-DevSetupCommunityEnvPath</command:name>
      <command:verb>Get</command:verb>
      <command:noun>DevSetupCommunityEnvPath</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-DevSetupCommunityEnvPath</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-DevSetupEnvPath</command:name>
      <command:verb>Get</command:verb>
      <command:noun>DevSetupEnvPath</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-DevSetupEnvPath</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-DevSetupLocalEnvPath</command:name>
      <command:verb>Get</command:verb>
      <command:noun>DevSetupLocalEnvPath</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-DevSetupLocalEnvPath</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-DevSetupManifest</command:name>
      <command:verb>Get</command:verb>
      <command:noun>DevSetupManifest</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-DevSetupManifest</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-DevSetupPath</command:name>
      <command:verb>Get</command:verb>
      <command:noun>DevSetupPath</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-DevSetupPath</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-DevSetupVersion</command:name>
      <command:verb>Get</command:verb>
      <command:noun>DevSetupVersion</command:noun>
      <maml:description>
        <maml:para>Retrieves the version of the DevSetup module.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Get-DevSetupVersion returns the current version of the DevSetup module either from the locally installed version or from the latest GitHub release.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-DevSetupVersion</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Local</maml:name>
          <maml:description>
            <maml:para>Retrieves the version from the locally installed DevSetup module. This is the default behavior if no parameter is specified.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Remote</maml:name>
          <maml:description>
            <maml:para>Retrieves the latest version from the GitHub repository using the latest release tag.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Local</maml:name>
        <maml:description>
          <maml:para>Retrieves the version from the locally installed DevSetup module. This is the default behavior if no parameter is specified.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Remote</maml:name>
        <maml:description>
          <maml:para>Retrieves the latest version from the GitHub repository using the latest release tag.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Version. Returns the version object of the DevSetup module.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>This function is used to check the installed version of the DevSetup module and returns a Version object for easy comparison and component access. The Local and Remote parameters are mutually exclusive. If neither is specified, Local is used by default.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Get-DevSetupVersion
Returns the version object of the locally installed DevSetup module.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Get-DevSetupVersion -Local
Returns the version object of the locally installed DevSetup module.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Get-DevSetupVersion -Remote
Returns the version object of the latest release from the GitHub repository.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
        <dev:code>$version = Get-DevSetupVersion -Local
Write-Host "Major: $($version.Major), Minor: $($version.Minor), Build: $($version.Build)"
Gets the local version and displays individual components.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-EnvironmentVariable</command:name>
      <command:verb>Get</command:verb>
      <command:noun>EnvironmentVariable</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-EnvironmentVariable</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>{{ Fill Name Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>{{ Fill Name Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-PwshVersion</command:name>
      <command:verb>Get</command:verb>
      <command:noun>PwshVersion</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-PwshVersion</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-ScoopCacheFile</command:name>
      <command:verb>Get</command:verb>
      <command:noun>ScoopCacheFile</command:noun>
      <maml:description>
        <maml:para>Gets the file path for the Scoop package cache file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function constructs and returns the full path to the Scoop package cache file within the DevSetup cache directory. The cache file is used to store information about installed Scoop packages and their versions for performance optimization and offline reference. The function uses Get-DevSetupCachePath to ensure the cache directory exists before returning the file path.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ScoopCacheFile</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.String]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns the full path to the Scoop cache file (scoop.cache) within the DevSetup cache directory.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Uses Get-DevSetupCachePath to ensure the cache directory exists</maml:para>
        <maml:para>- Returns a consistent file path (scoop.cache) within the DevSetup cache structure</maml:para>
        <maml:para>- The cache file is used for storing Scoop package metadata and version information</maml:para>
        <maml:para>- Does not create the cache file itself - only returns the path where it should be located</maml:para>
        <maml:para>- Used by other Scoop-related functions for performance optimization and data persistence</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Get-ScoopCacheFile</dev:code>
        <dev:remarks>
          <maml:para>Returns the path to the Scoop cache file, e.g., "C:\Users\Username\.devsetup\.cache\scoop.cache"</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$scoopCacheFile = Get-ScoopCacheFile
if (Test-Path $scoopCacheFile) {
    $cachedData = Get-Content $scoopCacheFile
}</dev:code>
        <dev:remarks>
          <maml:para>Gets the cache file path and checks if it exists before reading cached data.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$cacheFile = Get-ScoopCacheFile
Export-Clixml -Path $cacheFile -InputObject $scoopPackages</dev:code>
        <dev:remarks>
          <maml:para>Uses the cache file path to save Scoop package information.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-ScoopVersion</command:name>
      <command:verb>Get</command:verb>
      <command:noun>ScoopVersion</command:noun>
      <maml:description>
        <maml:para>Retrieves the version information for the installed Scoop package manager.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function queries the installed Scoop package manager to determine its version. It uses the 'scoop --version' command and parses the output to extract version information. The function handles both tagged releases  (e.g., "v0.5.3") and development builds identified by commit hashes. Output is completely suppressed during execution to avoid console clutter.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ScoopVersion</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.String]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns the Scoop version string if found, "installed" if version cannot be determined but Scoop is present,</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>or $null if Scoop is not installed or cannot be found.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Scoop to be installed and accessible via Find-Scoop function</maml:para>
        <maml:para>- Uses Start-Process with output redirection to completely suppress console output</maml:para>
        <maml:para>- Parses version output with two fallback strategies:</maml:para>
        <maml:para>  1. Tagged release format: "v0.5.3 - Released at..."   2. Development build format: "ebd8c036 (HEAD -&gt; master..." - Creates temporary files for output capture which are automatically cleaned up</maml:para>
        <maml:para>- Returns "installed" if Scoop responds but version cannot be parsed</maml:para>
        <maml:para>- Returns $null if Scoop is not found or accessible</maml:para>
        <maml:para>- Handles errors gracefully without stopping execution</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Get-ScoopVersion</dev:code>
        <dev:remarks>
          <maml:para>Retrieves the version of the currently installed Scoop package manager.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$version = Get-ScoopVersion
if ($version) {
    Write-Host "Scoop version: $version"
} else {
    Write-Host "Scoop is not installed"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates checking if Scoop is installed and displaying its version.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>switch (Get-ScoopVersion) {
    $null { "Scoop not found" }
    "installed" { "Scoop is installed but version unknown" }
    default { "Scoop version: $_" }
}</dev:code>
        <dev:remarks>
          <maml:para>Shows handling different return scenarios from the function.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Import-VsCodeConfig</command:name>
      <command:verb>Import</command:verb>
      <command:noun>VsCodeConfig</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Import-VsCodeConfig</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>EncodedConfig</maml:name>
          <maml:description>
            <maml:para>{{ Fill EncodedConfig Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>EncodedConfig</maml:name>
        <maml:description>
          <maml:para>{{ Fill EncodedConfig Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Import-VssConfig</command:name>
      <command:verb>Import</command:verb>
      <command:noun>VssConfig</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Import-VssConfig</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>EncodedConfigFile</maml:name>
          <maml:description>
            <maml:para>{{ Fill EncodedConfigFile Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>VssInstallPath</maml:name>
          <maml:description>
            <maml:para>{{ Fill VssInstallPath Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>EncodedConfigFile</maml:name>
        <maml:description>
          <maml:para>{{ Fill EncodedConfigFile Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>VssInstallPath</maml:name>
        <maml:description>
          <maml:para>{{ Fill VssInstallPath Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Initialize-DevSetup</command:name>
      <command:verb>Initialize</command:verb>
      <command:noun>DevSetup</command:noun>
      <maml:description>
        <maml:para>Initializes the DevSetup environment and directory structure.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function sets up the complete DevSetup environment by installing core dependencies and creating the necessary directory structure. It performs a comprehensive initialization process including dependency validation, directory creation, and environment path setup. The function ensures all prerequisites are in place before DevSetup can be used for environment management operations.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Initialize-DevSetup</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the DevSetup environment is successfully initialized.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if initialization fails at any step.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- This should be the first function called when setting up DevSetup</maml:para>
        <maml:para>- Performs initialization in a specific sequence:</maml:para>
        <maml:para>  1. Installs core dependencies via Install-CoreDependencies   2. Creates the main .devsetup directory using Get-DevSetupPath   3. Initializes the environments directory via Initialize-DevSetupEnvs - Uses fail-fast approach - stops immediately if core dependencies cannot be installed</maml:para>
        <maml:para>- Creates the .devsetup directory in the user's home directory if it doesn't exist</maml:para>
        <maml:para>- Uses -Force flag for directory creation to handle any permission issues</maml:para>
        <maml:para>- Suppresses directory creation output using Out-Null for clean console experience</maml:para>
        <maml:para>- Provides verbose logging when .devsetup directory already exists</maml:para>
        <maml:para>- Validates each initialization step and returns appropriate success/failure status</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
        <maml:para>- Color-coded console output for different phases: Cyan for progress, Green for success</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Initialize-DevSetup</dev:code>
        <dev:remarks>
          <maml:para>Initializes the complete DevSetup environment with default settings.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>if (Initialize-DevSetup) {
    Write-Host "DevSetup is ready for use"
    # Proceed with environment operations
} else {
    Write-Host "DevSetup initialization failed"
    # Handle initialization failure
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates conditional logic based on initialization success.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$setupReady = Initialize-DevSetup
if ($setupReady) {
    Use-DevSetup -List
}</dev:code>
        <dev:remarks>
          <maml:para>Shows using the function result to proceed with DevSetup operations.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Initialize-DevSetupEnvs</command:name>
      <command:verb>Initialize</command:verb>
      <command:noun>DevSetupEnvs</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Initialize-DevSetupEnvs</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-Chocolatey</command:name>
      <command:verb>Install</command:verb>
      <command:noun>Chocolatey</command:noun>
      <maml:description>
        <maml:para>Installs Chocolatey package manager on Windows systems.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function installs the Chocolatey package manager by downloading and executing the official installation script from the Chocolatey website. It includes comprehensive validation for platform compatibility, administrator privileges, and existing installations. The function handles security protocol configuration and execution policy adjustments required for the installation process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-Chocolatey</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if Chocolatey is successfully installed or already exists.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the installation fails or system requirements are not met.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires administrator privileges on Windows systems</maml:para>
        <maml:para>- Uses Test-RunningAsAdmin to validate privileges before proceeding</maml:para>
        <maml:para>- Automatically skips installation on non-Windows platforms (returns $true)</maml:para>
        <maml:para>- Checks for existing Chocolatey installation before attempting download</maml:para>
        <maml:para>- Sets execution policy to Bypass for the current process scope during installation</maml:para>
        <maml:para>- Configures TLS 1.2 security protocol for secure download</maml:para>
        <maml:para>- Downloads installation script from https://community.chocolatey.org/install.ps1</maml:para>
        <maml:para>- Verifies successful installation by checking for 'choco' command availability</maml:para>
        <maml:para>- Displays version information after successful installation</maml:para>
        <maml:para>- Uses comprehensive try-catch error handling with descriptive error messages</maml:para>
        <maml:para>- Suppresses command output using Out-Null to avoid console clutter</maml:para>
        <maml:para>- Returns $true even if Chocolatey is already installed (idempotent behavior)</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Install-Chocolatey</dev:code>
        <dev:remarks>
          <maml:para>Installs Chocolatey package manager on the current system.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>if (Install-Chocolatey) {
    Write-Host "Chocolatey is ready for use"
    # Proceed with package installations
} else {
    Write-Host "Failed to install Chocolatey"
    # Handle installation failure
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates conditional logic based on installation success.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$chocoReady = Install-Chocolatey
if ($chocoReady) {
    choco install git -y
}</dev:code>
        <dev:remarks>
          <maml:para>Shows using the function result to proceed with package operations.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-ChocolateyPackage</command:name>
      <command:verb>Install</command:verb>
      <command:noun>ChocolateyPackage</command:noun>
      <maml:description>
        <maml:para>Installs a Chocolatey package with optional version and parameter specification.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function installs a Chocolatey package using the 'choco install' command with comprehensive validation and conflict resolution. It checks for existing installations, handles version conflicts by reinstalling when necessary, and validates administrator privileges before proceeding. The function supports custom installation parameters and provides detailed error handling throughout the process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-ChocolateyPackage</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>The name of the Chocolatey package to install. This parameter is mandatory and must be a valid, non-empty string representing a Chocolatey package name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>The specific version of the package to install. Optional parameter that specifies the exact version required. If not provided, the latest version is installed.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="3" aliases="none">
          <maml:name>Param</maml:name>
          <maml:description>
            <maml:para>Custom installation parameters to pass to the Chocolatey package. Optional parameter that allows passing package-specific installation arguments using the --params flag.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>The name of the Chocolatey package to install. This parameter is mandatory and must be a valid, non-empty string representing a Chocolatey package name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>The specific version of the package to install. Optional parameter that specifies the exact version required. If not provided, the latest version is installed.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="3" aliases="none">
        <maml:name>Param</maml:name>
        <maml:description>
          <maml:para>Custom installation parameters to pass to the Chocolatey package. Optional parameter that allows passing package-specific installation arguments using the --params flag.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the package was successfully installed or already meets requirements.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the installation failed or insufficient privileges.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires administrator privileges to install packages</maml:para>
        <maml:para>- Uses Test-RunningAsAdmin to validate privileges before proceeding</maml:para>
        <maml:para>- Uses Test-ChocolateyPackageInstalled to check existing installations</maml:para>
        <maml:para>- Automatically uninstalls existing packages when version conflicts exist</maml:para>
        <maml:para>- Uses comprehensive logic to determine installation necessity:</maml:para>
        <maml:para>  * Returns immediately if package with correct version exists   * Uninstalls and reinstalls if package exists but version differs   * Installs directly if package doesn't exist - Uses $LASTEXITCODE to verify command execution success</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
        <maml:para>- Provides detailed debug logging for troubleshooting installation issues</maml:para>
        <maml:para>- Suppresses command output using Out-Null to avoid console clutter</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Install-ChocolateyPackage -PackageName "git"</dev:code>
        <dev:remarks>
          <maml:para>Installs the latest version of git package.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Install-ChocolateyPackage -PackageName "nodejs" -Version "18.17.0"</dev:code>
        <dev:remarks>
          <maml:para>Installs a specific version of nodejs package.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Install-ChocolateyPackage -PackageName "googlechrome" -Param "/nogoogle"</dev:code>
        <dev:remarks>
          <maml:para>Installs Google Chrome with custom installation parameters.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
        <dev:code>$result = Install-ChocolateyPackage -PackageName "vscode" -Version "1.75.0" -Param "/silent"
if ($result) {
    Write-Host "Visual Studio Code installed successfully"
} else {
    Write-Host "Failed to install Visual Studio Code"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates capturing the return value and using custom parameters.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-ChocolateyPackages</command:name>
      <command:verb>Install</command:verb>
      <command:noun>ChocolateyPackages</command:noun>
      <maml:description>
        <maml:para>Installs Chocolatey packages from YAML configuration data.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function processes YAML configuration data to install Chocolatey packages using Install-ChocolateyPackage. It supports both simple string formats and complex object formats for packages, allowing for detailed  configuration including versions and custom installation parameters. The function validates administrator  privileges before proceeding and provides comprehensive error handling and progress reporting throughout  the installation process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-ChocolateyPackages</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>YamlData</maml:name>
          <maml:description>
            <maml:para>The YAML configuration data containing Chocolatey package definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.chocolatey.packages</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
          <dev:type>
            <maml:name>PSObject</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>YamlData</maml:name>
        <maml:description>
          <maml:para>The YAML configuration data containing Chocolatey package definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.chocolatey.packages</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
        <dev:type>
          <maml:name>PSObject</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if installation completes successfully (even if individual packages fail).</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if configuration is invalid or critical errors occur.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires administrator privileges to install Chocolatey packages</maml:para>
        <maml:para>- Uses Test-RunningAsAdmin to validate privileges before proceeding</maml:para>
        <maml:para>- Throws an exception if not running as administrator</maml:para>
        <maml:para>- Returns early with warning if Chocolatey packages configuration is missing</maml:para>
        <maml:para>- Supports both string and object formats for package definitions:</maml:para>
        <maml:para>  * String format: Simple package name for latest version   * Object format: Supports name (required), version (optional), params (optional) - Skips empty or invalid entries in the configuration without stopping execution</maml:para>
        <maml:para>- Uses Install-ChocolateyPackage function for actual installation</maml:para>
        <maml:para>- Provides detailed progress reporting with color-coded status messages</maml:para>
        <maml:para>- Individual installation failures do not stop the overall process</maml:para>
        <maml:para>- Tracks and reports installation counts for all processed packages</maml:para>
        <maml:para>- Uses parameter splatting for reliable package installation</maml:para>
        <maml:para>- Displays installation status ([OK]/[FAILED]) for each package</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>$yamlData = Get-Content "config.yaml" | ConvertFrom-Yaml
Install-ChocolateyPackages -YamlData $yamlData</dev:code>
        <dev:remarks>
          <maml:para>Installs Chocolatey packages from a YAML configuration file.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$yamlData = @{
    devsetup = @{
        dependencies = @{
            chocolatey = @{
                packages = @(
                    "git",
                    @{
                        name = "nodejs"
                        version = "18.17.0"
                    },
                    @{
                        name = "googlechrome"
                        params = "/nogoogle"
                    },
                    @{
                        name = "vscode"
                        version = "1.75.0"
                        params = "/silent"
                    }
                )
            }
        }
    }
}
Install-ChocolateyPackages -YamlData $yamlData</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates the PSCustomObject structure and installs the configured packages.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-CoreDependencies</command:name>
      <command:verb>Install</command:verb>
      <command:noun>CoreDependencies</command:noun>
      <maml:description>
        <maml:para>Installs core dependencies required for the DevSetup module to function properly.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function installs essential system dependencies and package managers required for DevSetup operations. It sequentially installs NuGet PackageProvider, required PowerShell modules from the DevSetup manifest, and platform-specific tools. On Windows, it also installs Chocolatey, Git, and Scoop. The function  validates each installation step and fails fast if any critical component cannot be installed. It also  refreshes the PATH environment variable to ensure newly installed tools are immediately available.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-CoreDependencies</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if all core dependencies are successfully installed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if any critical installation fails.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Cross-platform support with platform detection using $IsWindows, $IsLinux, $IsMacOS</maml:para>
        <maml:para>- Sets up platform variables if not defined ($IsWindows = $true, others = $false by default)</maml:para>
        <maml:para>- Installs dependencies in a specific order to ensure proper functionality:</maml:para>
        <maml:para>  1. NuGet PackageProvider (all platforms)   2. Required PowerShell modules from DevSetup manifest (all platforms)   3. Windows-only components:      - Chocolatey package manager      - Git version control system via Chocolatey      - Scoop package manager - Uses fail-fast approach - stops immediately if any critical component fails</maml:para>
        <maml:para>- Installs PowerShell modules with -Force, -AllowClobber, and CurrentUser scope</maml:para>
        <maml:para>- Refreshes PATH environment variable after Git installation for immediate availability</maml:para>
        <maml:para>- Gets required modules list from Get-DevSetupManifest</maml:para>
        <maml:para>- Provides color-coded console output for installation progress</maml:para>
        <maml:para>- Skips empty module names in the manifest gracefully</maml:para>
        <maml:para>- Returns $true even if no required modules are found (considered success)</maml:para>
        <maml:para>- Windows-specific installations are conditionally executed based on platform detection</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Install-CoreDependencies</dev:code>
        <dev:remarks>
          <maml:para>Installs all core dependencies required for DevSetup functionality.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>if (Install-CoreDependencies) {
    Write-Host "DevSetup is ready for use"
    # Proceed with environment setup
} else {
    Write-Host "Failed to install core dependencies"
    # Handle installation failure
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates conditional logic based on installation success.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$coreReady = Install-CoreDependencies
if ($coreReady) {
    # Continue with package installations
    Install-ChocolateyPackages -YamlData $config
}</dev:code>
        <dev:remarks>
          <maml:para>Shows using the function result to proceed with subsequent operations.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-DevSetupEnv</command:name>
      <command:verb>Install</command:verb>
      <command:noun>DevSetupEnv</command:noun>
      <maml:description>
        <maml:para>Installs a complete development environment from a YAML configuration file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function orchestrates the installation of a development environment by reading a YAML configuration file and processing all defined dependencies and commands. It sequentially installs PowerShell modules, Chocolatey packages, Scoop buckets and packages, then executes any custom commands specified in the configuration. The function provides comprehensive error handling and progress reporting throughout the installation process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-DevSetupEnv</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the environment configuration file to install (without the .yaml extension). The function will look for a file named "{Name}.yaml" in the DevSetup environment path. This parameter is mandatory and accepts positional input.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Install-DevSetupEnv</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>{{ Fill Path Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Install-DevSetupEnv</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Url</maml:name>
          <maml:description>
            <maml:para>{{ Fill Url Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the environment configuration file to install (without the .yaml extension). The function will look for a file named "{Name}.yaml" in the DevSetup environment path. This parameter is mandatory and accepts positional input.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>{{ Fill Path Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Url</maml:name>
        <maml:description>
          <maml:para>{{ Fill Url Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>None. This function does not return a value but writes status information to the console.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires the environment YAML file to exist in the DevSetup environment path</maml:para>
        <maml:para>- Uses Get-DevSetupEnvPath to determine the configuration file location</maml:para>
        <maml:para>- Returns early with error if YAML file is not found or cannot be parsed</maml:para>
        <maml:para>- Processes dependencies in a specific order: PowerShell modules, Chocolatey packages, then Scoop components</maml:para>
        <maml:para>- Commands are executed after all package installations are complete</maml:para>
        <maml:para>- Individual installation failures do not stop the overall process</maml:para>
        <maml:para>- Uses Read-ConfigurationFile to parse YAML configuration</maml:para>
        <maml:para>- Leverages Install-PowershellModules, Install-ChocolateyPackages, and Install-ScoopComponents functions</maml:para>
        <maml:para>- Custom commands are executed using Invoke-CommandFromEnv function</maml:para>
        <maml:para>- Provides detailed console output with color-coded status messages</maml:para>
        <maml:para>- Skips command entries that are missing the required command property</maml:para>
        <maml:para>- Command execution includes package name context for better traceability</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Install-DevSetupEnv -Name "development"</dev:code>
        <dev:remarks>
          <maml:para>Installs the development environment from the "development.yaml" configuration file.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Install-DevSetupEnv "web-dev"</dev:code>
        <dev:remarks>
          <maml:para>Installs the web development environment using positional parameter syntax.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Install-DevSetupEnv -Name "my-environment"</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates the PSCustomObject structure that would be parsed from the YAML file.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-GitRepository</command:name>
      <command:verb>Install</command:verb>
      <command:noun>GitRepository</command:noun>
      <maml:description>
        <maml:para>Clones or updates a Git repository to a specified local destination.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function clones a Git repository from a remote URL to a local destination path. It includes intelligent Git detection, handles existing repositories with update or replace options, supports branch specification, and provides comprehensive error handling. The function automatically detects Git installation in both PATH and common installation locations.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-GitRepository</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>RepositoryUrl</maml:name>
          <maml:description>
            <maml:para>The URL of the Git repository to clone. This parameter is mandatory and must be a valid, non-empty string representing a Git repository URL.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
          <maml:name>DestinationPath</maml:name>
          <maml:description>
            <maml:para>The local path where the repository should be cloned. This parameter is mandatory and must be a valid, non-empty string representing a local directory path.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="3" aliases="none">
          <maml:name>Branch</maml:name>
          <maml:description>
            <maml:para>The specific branch to clone from the repository. Optional parameter that specifies which branch to clone. If not provided, the default branch is used.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>UpdateExisting</maml:name>
          <maml:description>
            <maml:para>Switch parameter that controls behavior when the destination path already exists. When specified, performs a git pull to update the existing repository instead of removing and re-cloning.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>RepositoryUrl</maml:name>
        <maml:description>
          <maml:para>The URL of the Git repository to clone. This parameter is mandatory and must be a valid, non-empty string representing a Git repository URL.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
        <maml:name>DestinationPath</maml:name>
        <maml:description>
          <maml:para>The local path where the repository should be cloned. This parameter is mandatory and must be a valid, non-empty string representing a local directory path.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="3" aliases="none">
        <maml:name>Branch</maml:name>
        <maml:description>
          <maml:para>The specific branch to clone from the repository. Optional parameter that specifies which branch to clone. If not provided, the default branch is used.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>UpdateExisting</maml:name>
        <maml:description>
          <maml:para>Switch parameter that controls behavior when the destination path already exists. When specified, performs a git pull to update the existing repository instead of removing and re-cloning.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the repository was successfully cloned or updated.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the operation failed or Git is not available.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Git to be installed on the system</maml:para>
        <maml:para>- Automatically detects Git in PATH using Get-Command</maml:para>
        <maml:para>- Falls back to common Git installation path: "C:\Program Files\Git\cmd\git.exe"</maml:para>
        <maml:para>- Uses $LASTEXITCODE to verify Git command execution success</maml:para>
        <maml:para>- Handles existing destinations in two ways:</maml:para>
        <maml:para>  * UpdateExisting: Performs git pull to update existing repository   * Default: Removes existing directory and performs fresh clone - Uses Push-Location/Pop-Location for safe directory operations during updates</maml:para>
        <maml:para>- Provides color-coded console output for different operation types</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling</maml:para>
        <maml:para>- Uses parameter splatting for reliable Git command execution</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Install-GitRepository -RepositoryUrl "https://github.com/user/repo.git" -DestinationPath "C:\Code\repo"</dev:code>
        <dev:remarks>
          <maml:para>Clones a repository to the specified path using the default branch.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Install-GitRepository -RepositoryUrl "https://github.com/user/repo.git" -DestinationPath "C:\Code\repo" -Branch "develop"</dev:code>
        <dev:remarks>
          <maml:para>Clones a specific branch of the repository.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Install-GitRepository -RepositoryUrl "https://github.com/user/repo.git" -DestinationPath "C:\Code\repo" -UpdateExisting</dev:code>
        <dev:remarks>
          <maml:para>Updates an existing repository instead of removing and re-cloning.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
        <dev:code>$success = Install-GitRepository -RepositoryUrl "https://github.com/user/repo.git" -DestinationPath "C:\Code\repo"
if ($success) {
    Write-Host "Repository ready for use"
} else {
    Write-Host "Failed to clone repository"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates capturing the return value to check operation success.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-Nuget</command:name>
      <command:verb>Install</command:verb>
      <command:noun>Nuget</command:noun>
      <maml:description>
        <maml:para>Installs the NuGet PackageProvider for PowerShell package management.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function installs the NuGet PackageProvider which is required for PowerShell package management operations. It validates platform compatibility (Windows-only), administrator privileges, and existing installations before proceeding. The function also detects and reports on the availability of the NuGet CLI tool if present on the system.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-Nuget</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if NuGet PackageProvider is successfully installed or already exists.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the installation fails or system requirements are not met.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires administrator privileges on Windows systems</maml:para>
        <maml:para>- Uses Test-RunningAsAdmin to validate privileges before proceeding</maml:para>
        <maml:para>- Throws an exception if not running as administrator</maml:para>
        <maml:para>- Windows-only functionality - automatically skips installation on non-Windows platforms</maml:para>
        <maml:para>- Installs minimum version 2.8.5.201 of the NuGet PackageProvider</maml:para>
        <maml:para>- Uses CurrentUser scope for installation to minimize system impact</maml:para>
        <maml:para>- Verifies successful installation by re-querying the PackageProvider</maml:para>
        <maml:para>- Detects and reports NuGet CLI availability if present</maml:para>
        <maml:para>- Uses -Force flag to bypass confirmation prompts</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
        <maml:para>- Returns $true for successful installation or if already installed (idempotent behavior)</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Install-Nuget</dev:code>
        <dev:remarks>
          <maml:para>Installs the NuGet PackageProvider on the current system.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>if (Install-Nuget) {
    Write-Host "NuGet PackageProvider is ready for use"
    # Proceed with PowerShell module installations
} else {
    Write-Host "Failed to install NuGet PackageProvider"
    # Handle installation failure
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates conditional logic based on installation success.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$nugetReady = Install-Nuget
if ($nugetReady) {
    Install-Module -Name SomeModule -Force
}</dev:code>
        <dev:remarks>
          <maml:para>Shows using the function result to proceed with module operations.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-PowershellModule</command:name>
      <command:verb>Install</command:verb>
      <command:noun>PowershellModule</command:noun>
      <maml:description>
        <maml:para>Installs a PowerShell module with specified parameters and scope validation.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Installs a PowerShell module using `Install-Module` with comprehensive validation and scope management. Checks for existing installations and handles version/scope conflicts by intelligently uninstalling and reinstalling as needed. Supports both `CurrentUser` and `AllUsers` scopes, with privilege validation for `AllUsers`.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-PowershellModule</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>ModuleName</maml:name>
          <maml:description>
            <maml:para>The name of the PowerShell module to install. Mandatory and must be a valid, non-empty string.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>The specific version of the module to install. Optional; installs the latest version if not provided.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="3" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>The installation scope for the module. Optional; valid values are `'CurrentUser'` or `'AllUsers'`. Defaults to `'CurrentUser'`. `AllUsers` scope requires administrator privileges.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>CurrentUser</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Switch to force installation even if the module already exists. Optional; passes the `-Force` flag to `Install-Module`.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>AllowClobber</maml:name>
          <maml:description>
            <maml:para>Switch to allow installation of modules that contain cmdlets with the same names as existing cmdlets. Optional; passes the `-AllowClobber` flag to `Install-Module`.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>ModuleName</maml:name>
        <maml:description>
          <maml:para>The name of the PowerShell module to install. Mandatory and must be a valid, non-empty string.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>The specific version of the module to install. Optional; installs the latest version if not provided.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Switch to force installation even if the module already exists. Optional; passes the `-Force` flag to `Install-Module`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>AllowClobber</maml:name>
        <maml:description>
          <maml:para>Switch to allow installation of modules that contain cmdlets with the same names as existing cmdlets. Optional; passes the `-AllowClobber` flag to `Install-Module`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="3" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>The installation scope for the module. Optional; valid values are `'CurrentUser'` or `'AllUsers'`. Defaults to `'CurrentUser'`. `AllUsers` scope requires administrator privileges.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>CurrentUser</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>`[System.Boolean]`</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns `$true` if the module was successfully installed or already meets requirements.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns `$false` if the installation failed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>Scope Requirements: - Administrator privileges required for `AllUsers` scope.</maml:para>
        <maml:para>- Uses `Test-PowershellModuleInstalled` to check existing installations. Installation Logic: - Returns immediately if module with correct version and scope exists.</maml:para>
        <maml:para>- Uninstalls and reinstalls if version matches but scope differs.</maml:para>
        <maml:para>- Reinstalls in-place if scope matches but version differs.</maml:para>
        <maml:para>- Uninstalls and reinstalls if both version and scope differ. Error Handling: - Uses try/catch for robust error handling.</maml:para>
        <maml:para>- Returns `$false` on any failure. Parameter Splatting: - Uses parameter splatting for reliable `Install-Module` execution.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Install-PowershellModule -ModuleName "posh-git"
# Installs the latest version of posh-git module for the current user.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Install-PowershellModule -ModuleName "PSReadLine" -Version "2.2.6"
# Installs a specific version of PSReadLine module for the current user.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Install-PowershellModule -ModuleName "PowerShellGet" -Scope "AllUsers" -Force
# Installs PowerShellGet module for all users with force flag (requires administrator privileges).</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
        <dev:code>Install-PowershellModule -ModuleName "Az" -AllowClobber -Scope "CurrentUser"
# Installs the Az module allowing cmdlet name conflicts for the current user.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-PowershellModules</command:name>
      <command:verb>Install</command:verb>
      <command:noun>PowershellModules</command:noun>
      <maml:description>
        <maml:para>Installs PowerShell modules from YAML configuration data.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function processes YAML configuration data to install PowerShell modules using Install-PowerShellModule. It supports both simple string formats and complex object formats for modules, allowing for detailed  configuration including versions, installation scope, and module-specific parameters. The function validates administrator privileges when AllUsers scope is specified and provides comprehensive error handling and  progress reporting throughout the installation process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-PowershellModules</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>YamlData</maml:name>
          <maml:description>
            <maml:para>The YAML configuration data containing PowerShell module definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.powershell.modules and optionally devsetup.dependencies.powershell.scope</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
          <dev:type>
            <maml:name>PSObject</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>YamlData</maml:name>
        <maml:description>
          <maml:para>The YAML configuration data containing PowerShell module definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.powershell.modules and optionally devsetup.dependencies.powershell.scope</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
        <dev:type>
          <maml:name>PSObject</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if installation completes successfully (even if individual modules fail).</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if configuration is invalid or critical errors occur.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires the YAML configuration to have devsetup.dependencies.powershell.modules structure</maml:para>
        <maml:para>- Returns $false immediately if PowerShell modules configuration is missing or invalid</maml:para>
        <maml:para>- Supports global scope setting with module-specific overrides</maml:para>
        <maml:para>- Default scope is 'CurrentUser' if not specified</maml:para>
        <maml:para>- Validates administrator privileges when AllUsers scope is requested</maml:para>
        <maml:para>- Supports both string and object formats for module definitions</maml:para>
        <maml:para>- Module object format supports: name (required), minimumVersion (optional), scope (optional), force (optional), allowClobber (optional)</maml:para>
        <maml:para>- Skips empty or invalid entries in the configuration without stopping execution</maml:para>
        <maml:para>- Uses Install-PowerShellModule function for actual installation</maml:para>
        <maml:para>- Provides detailed progress reporting with color-coded status messages</maml:para>
        <maml:para>- Individual installation failures do not stop the overall process</maml:para>
        <maml:para>- Tracks and reports installation counts for all processed modules</maml:para>
        <maml:para>- Uses parameter splatting for reliable module installation</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>$yamlData = Get-Content "config.yaml" | ConvertFrom-Yaml
Install-PowershellModules -YamlData $yamlData</dev:code>
        <dev:remarks>
          <maml:para>Installs PowerShell modules from a YAML configuration file.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$yamlData = @{
    devsetup = @{
        dependencies = @{
            powershell = @{
                scope = "CurrentUser"
                modules = @(
                    "posh-git",
                    @{
                        name = "PSReadLine"
                        minimumVersion = "2.2.6"
                    },
                    @{
                        name = "PowerShellGet"
                        scope = "AllUsers"
                        force = $true
                        allowClobber = $false
                    }
                )
            }
        }
    }
}
Install-PowershellModules -YamlData $yamlData</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates the PSCustomObject structure and installs the configured modules.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-Scoop</command:name>
      <command:verb>Install</command:verb>
      <command:noun>Scoop</command:noun>
      <maml:description>
        <maml:para>Installs the Scoop package manager on the system.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function installs Scoop package manager by downloading and executing the official installation script from get.scoop.sh. It automatically configures PowerShell execution policy settings and validates the installation success. The function performs pre-installation checks to avoid duplicate installations and uses Get-ScoopVersion to verify successful installation completion.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-Scoop</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if Scoop was successfully installed or was already installed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the installation verification fails.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>Installation Process: - Checks if Scoop is already installed using Test-ScoopInstalled</maml:para>
        <maml:para>- Sets execution policy to RemoteSigned for script download</maml:para>
        <maml:para>- Downloads and executes installation script from get.scoop.sh with -RunAs parameter</maml:para>
        <maml:para>- Sets execution policy to Bypass after installation</maml:para>
        <maml:para>- Verifies installation using Get-ScoopVersion Requirements: - Internet connection to download the installation script</maml:para>
        <maml:para>- PowerShell execution policy modification permissions Installation Method: - Uses `Invoke-RestMethod get.scoop.sh` to download the installation script</maml:para>
        <maml:para>- Executes with `-RunAs` parameter for non-elevated user installation from elevated PowerShell</maml:para>
        <maml:para>- Automatically handles execution policy configuration (RemoteSigned → Bypass) Verification: - Uses Get-ScoopVersion to confirm successful installation</maml:para>
        <maml:para>- Returns boolean based on version retrieval success</maml:para>
        <maml:para>- Performs same verification check whether installing or if already installed Error Handling: - Throws exception if installation script execution fails</maml:para>
        <maml:para>- Uses SilentlyContinue for execution policy to avoid errors</maml:para>
        <maml:para>- Suppresses installation output using Out-Null for clean console experience</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Install-Scoop</dev:code>
        <dev:remarks>
          <maml:para>Installs Scoop package manager on the current system.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>if (-not (Test-ScoopInstalled)) {
    Install-Scoop
    Write-Host "Scoop is now available for package management"
}</dev:code>
        <dev:remarks>
          <maml:para>Shows conditional installation only when Scoop is not already present.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-ScoopBucket</command:name>
      <command:verb>Install</command:verb>
      <command:noun>ScoopBucket</command:noun>
      <maml:description>
        <maml:para>Adds a Scoop bucket to the system.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function adds a specified Scoop bucket by executing the 'scoop bucket add' command. It includes validation to ensure Scoop is installed and available before attempting the bucket addition. The function supports adding both official buckets (by name only) and custom buckets (with source URL). It checks if the bucket is already installed before attempting to add it and provides error handling  with a boolean result indicating success or failure.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-ScoopBucket</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the Scoop bucket to add. This parameter is mandatory and must be a valid string representing a bucket name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>The source URL or Git repository for the bucket. Optional parameter used for adding custom buckets. If not specified, Scoop will attempt to add an official bucket by name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the Scoop bucket to add. This parameter is mandatory and must be a valid string representing a bucket name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>The source URL or Git repository for the bucket. Optional parameter used for adding custom buckets. If not specified, Scoop will attempt to add an official bucket by name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the bucket was successfully added or is already installed, $false if the operation failed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Scoop to be installed on the system</maml:para>
        <maml:para>- Uses Test-ScoopComponentInstalled to check if bucket is already installed before attempting to add it</maml:para>
        <maml:para>- Returns $true if bucket is already installed (considered successful since goal is achieved)</maml:para>
        <maml:para>- Returns $false immediately if Scoop is not installed or cannot be found</maml:para>
        <maml:para>- Uses $LASTEXITCODE to verify command execution success</maml:para>
        <maml:para>- Provides warning messages for common failure scenarios</maml:para>
        <maml:para>- Uses try-catch error handling for robust failure management</maml:para>
        <maml:para>- Official buckets can be added by name only (extras, nonportable, games, etc.)</maml:para>
        <maml:para>- Custom buckets require both name and source URL parameters</maml:para>
        <maml:para>- Suppresses command output using Out-Null to avoid console clutter</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Install-ScoopBucket -Name "extras"</dev:code>
        <dev:remarks>
          <maml:para>Adds the official 'extras' bucket to Scoop.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Install-ScoopBucket -Name "nonportable"</dev:code>
        <dev:remarks>
          <maml:para>Adds the official 'nonportable' bucket to Scoop.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Install-ScoopBucket -Name "custom-bucket" -Source "https://github.com/user/scoop-bucket"</dev:code>
        <dev:remarks>
          <maml:para>Adds a custom bucket from a GitHub repository.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
        <dev:code>$result = Install-ScoopBucket -Name "games"
if ($result) {
    Write-Host "Games bucket added successfully"
} else {
    Write-Host "Failed to add games bucket"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates capturing the return value to check bucket addition success.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-ScoopComponents</command:name>
      <command:verb>Install</command:verb>
      <command:noun>ScoopComponents</command:noun>
      <maml:description>
        <maml:para>Installs Scoop buckets and packages from YAML configuration data.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function processes YAML configuration data to install Scoop buckets and packages in sequence. It validates Scoop installation, updates the cache before proceeding, and processes buckets before packages to ensure bucket availability. The function supports both simple string formats and complex object formats for buckets and packages, allowing for detailed configuration including versions, custom sources, and global installation scope. Progress is tracked and reported for both buckets and packages using color-coded status messages.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-ScoopComponents</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>YamlData</maml:name>
          <maml:description>
            <maml:para>The YAML configuration data containing Scoop bucket and package definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.scoop.buckets and/or devsetup.dependencies.scoop.packages</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
          <dev:type>
            <maml:name>PSObject</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>YamlData</maml:name>
        <maml:description>
          <maml:para>The YAML configuration data containing Scoop bucket and package definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.scoop.buckets and/or devsetup.dependencies.scoop.packages</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
        <dev:type>
          <maml:name>PSObject</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if Scoop is not installed, cannot be found, configuration is invalid, or cache update fails.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if installation completes successfully (even if individual items fail).</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Scoop to be installed on the system using Test-ScoopInstalled</maml:para>
        <maml:para>- Returns $false immediately if Scoop is not installed or cannot be found</maml:para>
        <maml:para>- Returns $false if YAML configuration structure is invalid or missing scoop section</maml:para>
        <maml:para>- Updates Scoop cache using Write-ScoopCache before installation begins</maml:para>
        <maml:para>- Returns $false if cache update fails to ensure accurate installation state</maml:para>
        <maml:para>- Processes buckets before packages to ensure bucket availability for package installations</maml:para>
        <maml:para>- Gracefully handles missing buckets or packages sections in configuration</maml:para>
        <maml:para>- Supports two bucket specification formats:</maml:para>
        <maml:para>  * Simple string: "bucketname"   * Complex object: @{ name = "bucketname"; source = "https://github.com/user/scoop-bucket" } - Supports two package specification formats:   * Simple string: "packagename"   * Complex object: @{ name = "packagename"; version = "1.0.0"; bucket = "extras"; global = $true } - Validates component names and skips entries with missing names</maml:para>
        <maml:para>- Uses Install-ScoopBucket and Install-ScoopPackage functions for actual installation</maml:para>
        <maml:para>- Provides detailed progress reporting with component counts and property information</maml:para>
        <maml:para>- Uses color-coded console output: Cyan for headers, Gray for items, Green/Red for status</maml:para>
        <maml:para>- Displays formatted component information including version, bucket, and global flags</maml:para>
        <maml:para>- Continues processing remaining components even if individual installations fail</maml:para>
        <maml:para>- Returns $true for overall success even with individual component failures</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
        <maml:para>- Tracks and reports separate counts for buckets and packages processed</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>$yamlData = Get-Content "config.yaml" | ConvertFrom-Yaml
Install-ScoopComponents -YamlData $yamlData</dev:code>
        <dev:remarks>
          <maml:para>Installs Scoop buckets and packages from a YAML configuration file.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$yamlData = @{
    devsetup = @{
        dependencies = @{
            scoop = @{
                buckets = @(
                    "extras",
                    @{
                        name = "custom-bucket"
                        source = "https://github.com/user/scoop-bucket"
                    }
                )
                packages = @(
                    "git",
                    @{
                        name = "nodejs"
                        version = "18.17.0"
                    },
                    @{
                        name = "7zip"
                        global = $true
                    },
                    @{
                        name = "firefox"
                        bucket = "extras"
                    }
                )
            }
        }
    }
}
Install-ScoopComponents -YamlData $yamlData</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates the PSCustomObject structure and installs the configured components.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>if (Install-ScoopComponents -YamlData $config) {
    Write-Host "Scoop components installation completed"
} else {
    Write-Host "Scoop components installation failed"
}</dev:code>
        <dev:remarks>
          <maml:para>Shows checking the return value to verify installation completion.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-ScoopPackage</command:name>
      <command:verb>Install</command:verb>
      <command:noun>ScoopPackage</command:noun>
      <maml:description>
        <maml:para>Installs a Scoop package on the system.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function installs a specified Scoop package by executing the 'scoop install' command. It includes validation to ensure Scoop is installed and available before attempting the installation. The function supports package versioning, bucket specification, and global installation scope. If the package is already installed and the global scope matches, it will be uninstalled first to ensure a clean installation. The function verifies successful installation using Test-ScoopComponentInstalled with version and scope validation.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-ScoopPackage</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>The name of the Scoop package to install. This parameter is mandatory and must be a valid string representing a Scoop package.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>The specific version of the package to install. Optional parameter that appends version specification to the package name (e.g., "package@1.2.3").</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="3" aliases="none">
          <maml:name>Bucket</maml:name>
          <maml:description>
            <maml:para>The bucket name where the package is located. Optional parameter that prepends bucket specification to the package name (e.g., "extras/package").</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Global</maml:name>
          <maml:description>
            <maml:para>Switch parameter to install the package globally. When specified, adds the --global flag to the scoop install command.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>The name of the Scoop package to install. This parameter is mandatory and must be a valid string representing a Scoop package.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>The specific version of the package to install. Optional parameter that appends version specification to the package name (e.g., "package@1.2.3").</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="3" aliases="none">
        <maml:name>Bucket</maml:name>
        <maml:description>
          <maml:para>The bucket name where the package is located. Optional parameter that prepends bucket specification to the package name (e.g., "extras/package").</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Global</maml:name>
        <maml:description>
          <maml:para>Switch parameter to install the package globally. When specified, adds the --global flag to the scoop install command.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the package was successfully installed and verified, $false if the installation failed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Scoop to be installed on the system</maml:para>
        <maml:para>- Only uninstalls existing package if it's already installed AND global scope matches exactly</maml:para>
        <maml:para>- Uses Test-ScoopComponentInstalled to verify installation success with version and scope validation</maml:para>
        <maml:para>- Supports bucket/package@version syntax for package specification</maml:para>
        <maml:para>- Returns $false immediately if Scoop is not installed or cannot be found</maml:para>
        <maml:para>- Provides detailed warning and error messages for failure scenarios</maml:para>
        <maml:para>- Uses proper argument splatting for reliable command execution</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling for robust failure management</maml:para>
        <maml:para>- Installation verification checks name, version (if specified), and global scope (if specified)</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Install-ScoopPackage -PackageName "git"</dev:code>
        <dev:remarks>
          <maml:para>Installs the 'git' package from the main bucket.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Install-ScoopPackage -PackageName "nodejs" -Version "18.17.0"</dev:code>
        <dev:remarks>
          <maml:para>Installs a specific version of the 'nodejs' package.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Install-ScoopPackage -PackageName "7zip" -Global</dev:code>
        <dev:remarks>
          <maml:para>Installs the '7zip' package globally for all users.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
        <dev:code>Install-ScoopPackage -PackageName "firefox" -Bucket "extras"</dev:code>
        <dev:remarks>
          <maml:para>Installs the 'firefox' package from the 'extras' bucket.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 5 --------------------------</maml:title>
        <dev:code>Install-ScoopPackage -PackageName "python" -Version "3.11.5" -Bucket "main" -Global</dev:code>
        <dev:remarks>
          <maml:para>Installs a specific version of Python from the main bucket globally.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Optimize-DevSetupEnvs</command:name>
      <command:verb>Optimize</command:verb>
      <command:noun>DevSetupEnvs</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Optimize-DevSetupEnvs</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Read-ChocolateyCache</command:name>
      <command:verb>Read</command:verb>
      <command:noun>ChocolateyCache</command:noun>
      <maml:description>
        <maml:para>Reads cached Chocolatey package information from the DevSetup cache file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function reads cached Chocolatey package data from the DevSetup cache system. It automatically handles cache file creation if the file doesn't exist by calling Write-ChocolateyCache, and provides comprehensive error handling for file operations. The function returns the cached data as an array of strings for use by other Chocolatey-related functions.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Read-ChocolateyCache</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Array]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns the cached data as an array of strings if successful.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $null if the cache file cannot be read or parsed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Uses Get-ChocolateyCacheFile to determine the cache file location</maml:para>
        <maml:para>- Automatically creates cache file if it doesn't exist using Write-ChocolateyCache</maml:para>
        <maml:para>- Throws an exception if cache file creation fails</maml:para>
        <maml:para>- Uses Get-Content to read the cached data as an array of strings</maml:para>
        <maml:para>- Provides comprehensive error handling for file operations</maml:para>
        <maml:para>- Returns $null on any error to allow calling functions to handle gracefully</maml:para>
        <maml:para>- Used by other Chocolatey functions to avoid repeated system queries for performance</maml:para>
        <maml:para>- Provides debug logging when cache file is not found</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Read-ChocolateyCache</dev:code>
        <dev:remarks>
          <maml:para>Reads the Chocolatey cache data and returns it as an array of strings.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$chocoCache = Read-ChocolateyCache
if ($chocoCache) {
    Write-Host "Found $($chocoCache.Count) cached entries"
} else {
    Write-Host "No cache data available"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates reading cache data and checking for successful retrieval.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$cachedPackages = Read-ChocolateyCache
$gitPackage = $cachedPackages | Where-Object { $_ -like "*git*" }</dev:code>
        <dev:remarks>
          <maml:para>Shows reading cache data and filtering for specific package information.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Read-ConfigurationFile</command:name>
      <command:verb>Read</command:verb>
      <command:noun>ConfigurationFile</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Read-ConfigurationFile</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>Config</maml:name>
          <maml:description>
            <maml:para>{{ Fill Config Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>Config</maml:name>
        <maml:description>
          <maml:para>{{ Fill Config Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Read-ScoopCache</command:name>
      <command:verb>Read</command:verb>
      <command:noun>ScoopCache</command:noun>
      <maml:description>
        <maml:para>Reads cached Scoop package information from the DevSetup cache file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function reads and deserializes cached Scoop package data from the DevSetup cache system. It automatically handles cache file creation if the file doesn't exist by calling Write-ScoopCache, and provides comprehensive error handling for file operations and JSON parsing. The function returns the cached data as a PowerShell object for use by other Scoop-related functions.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Read-ScoopCache</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Object]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns the deserialized cache data as a PowerShell object if successful.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $null if the cache file cannot be read or parsed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Uses Get-ScoopCacheFile to determine the cache file location</maml:para>
        <maml:para>- Automatically creates cache file if it doesn't exist using Write-ScoopCache</maml:para>
        <maml:para>- Throws an exception if cache file creation fails</maml:para>
        <maml:para>- Uses ConvertFrom-Json to deserialize the cached data</maml:para>
        <maml:para>- Provides comprehensive error handling for both file operations and JSON parsing</maml:para>
        <maml:para>- Returns $null on any error to allow calling functions to handle gracefully</maml:para>
        <maml:para>- Used by other Scoop functions to avoid repeated system queries for performance</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Read-ScoopCache</dev:code>
        <dev:remarks>
          <maml:para>Reads the Scoop cache data and returns it as a PowerShell object.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$scoopCache = Read-ScoopCache
if ($scoopCache) {
    Write-Host "Found $($scoopCache.Count) cached packages"
} else {
    Write-Host "No cache data available"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates reading cache data and checking for successful retrieval.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$cachedPackages = Read-ScoopCache
$gitPackage = $cachedPackages | Where-Object { $_.name -eq "git" }</dev:code>
        <dev:remarks>
          <maml:para>Shows reading cache data and filtering for specific package information.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Show-DevSetupEnvList</command:name>
      <command:verb>Show</command:verb>
      <command:noun>DevSetupEnvList</command:noun>
      <maml:description>
        <maml:para>Lists available development environment configurations with platform filtering.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function displays all available development environment configurations in a formatted table. It supports platform-specific filtering to show only environments compatible with the current system or a specified platform. The function reads environment metadata from environments.json and automatically creates this index file if it doesn't exist using Optimize-DevSetupEnvs. Environments can be filtered by Windows, Linux, macOS, or shown for all platforms.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Show-DevSetupEnvList</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Platform</maml:name>
          <maml:description>
            <maml:para>The platform to filter environments by. Valid values: "current", "all", "windows", "linux", "macos" Default value is "current" which shows environments for the detected platform. Use "all" to display environments regardless of platform compatibility.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Current</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Platform</maml:name>
        <maml:description>
          <maml:para>The platform to filter environments by. Valid values: "current", "all", "windows", "linux", "macos" Default value is "current" which shows environments for the detected platform. Use "all" to display environments regardless of platform compatibility.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>Current</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true when the function completes successfully, regardless of whether environments are found.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Automatically detects the current platform using [System.Environment]::OSVersion.Platform</maml:para>
        <maml:para>- Maps platform detection: Win32NT → windows, Unix → linux/macos via uname command</maml:para>
        <maml:para>- Uses 'uname -s' command on Unix systems to distinguish between Linux (default) and macOS (Darwin)</maml:para>
        <maml:para>- Reads environment metadata from environments.json in the DevSetup directory</maml:para>
        <maml:para>- Automatically creates environments.json index if missing using Optimize-DevSetupEnvs</maml:para>
        <maml:para>- Recreates the index file if environments.json is corrupted or unreadable JSON</maml:para>
        <maml:para>- Supports cross-platform environments that work on multiple operating systems</maml:para>
        <maml:para>- Includes environments with empty/unspecified platform as compatible with all platforms</maml:para>
        <maml:para>- Platform filtering includes exact matches, "cross-platform" tagged environments, and unspecified platforms</maml:para>
        <maml:para>- Displays results in a formatted table showing Name, Version, Platform, and File columns</maml:para>
        <maml:para>- Shows "Not specified" for missing platform information and "Unknown" for missing version</maml:para>
        <maml:para>- Provides helpful guidance when no environments are found for the specified platform</maml:para>
        <maml:para>- Platform filtering and matching is case-insensitive for user convenience</maml:para>
        <maml:para>- Displays environment count summary after the table</maml:para>
        <maml:para>- Uses color-coded console output for better user experience</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Show-DevSetupEnvList</dev:code>
        <dev:remarks>
          <maml:para>Lists development environments compatible with the current platform.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Show-DevSetupEnvList -Platform "all"</dev:code>
        <dev:remarks>
          <maml:para>Displays all available development environments regardless of platform.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Show-DevSetupEnvList -Platform "linux"</dev:code>
        <dev:remarks>
          <maml:para>Shows only environments specifically designed for Linux systems.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
        <dev:code>Show-DevSetupEnvList -Platform "windows"</dev:code>
        <dev:remarks>
          <maml:para>Lists environments compatible with Windows systems.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Test-ChocolateyInstalled</command:name>
      <command:verb>Test</command:verb>
      <command:noun>ChocolateyInstalled</command:noun>
      <maml:description>
        <maml:para>Tests whether Chocolatey package manager is installed on the system.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function checks if Chocolatey is installed and available by attempting to locate the 'choco' command. It uses Get-Command to verify that the Chocolatey executable is accessible in the system PATH. The function provides a warning message when Chocolatey is not found and returns a boolean result indicating the installation status.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-ChocolateyInstalled</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if Chocolatey is installed and the 'choco' command is available.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if Chocolatey is not installed or the 'choco' command cannot be found.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Uses Get-Command with -ErrorAction SilentlyContinue to suppress errors when 'choco' is not found</maml:para>
        <maml:para>- Provides a descriptive warning message when Chocolatey is not installed</maml:para>
        <maml:para>- Does not require administrator privileges to check installation status</maml:para>
        <maml:para>- Checks for command availability rather than file system presence for more reliable detection</maml:para>
        <maml:para>- Used as a prerequisite check by other Chocolatey-related functions in the DevSetup module</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Test-ChocolateyInstalled</dev:code>
        <dev:remarks>
          <maml:para>Checks if Chocolatey is installed on the system.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>if (Test-ChocolateyInstalled) {
    Write-Host "Chocolatey is available"
    # Proceed with Chocolatey operations
} else {
    Write-Host "Chocolatey is not installed"
    # Handle missing Chocolatey
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates conditional logic based on Chocolatey availability.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$hasChocolatey = Test-ChocolateyInstalled
if (-not $hasChocolatey) {
    Install-Chocolatey
}</dev:code>
        <dev:remarks>
          <maml:para>Shows using the function result to trigger Chocolatey installation if needed.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Test-ChocolateyPackageInstalled</command:name>
      <command:verb>Test</command:verb>
      <command:noun>ChocolateyPackageInstalled</command:noun>
      <maml:description>
        <maml:para>Tests whether a Chocolatey package is installed with optional version validation.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function checks if a Chocolatey package is installed on the system and optionally validates a specific version requirement. It uses 'choco list' with exact matching to find installed packages and examines the returned package information to determine installation status and version details. The function supports multiple parameter sets to check different combinations of package existence and version matching.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-ChocolateyPackageInstalled</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>The name of the Chocolatey package to check. This parameter is mandatory for all parameter sets and must be a valid, non-empty string representing a Chocolatey package name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>The specific version of the package to validate. Mandatory parameter for PackageVersionCheck parameter set. When specified, the function checks if the installed package matches this exact version.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>The name of the Chocolatey package to check. This parameter is mandatory for all parameter sets and must be a valid, non-empty string representing a Chocolatey package name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>The specific version of the package to validate. Mandatory parameter for PackageVersionCheck parameter set. When specified, the function checks if the installed package matches this exact version.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the package meets all specified criteria (exists, version matches if specified).</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the package is not installed, doesn't meet the specified criteria, or an error occurs.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Chocolatey to be installed on the system</maml:para>
        <maml:para>- Uses Test-ChocolateyInstalled to verify Chocolatey availability before proceeding</maml:para>
        <maml:para>- Returns $false immediately if Chocolatey is not installed</maml:para>
        <maml:para>- Uses 'choco list' with -exact and -r flags for precise package matching and machine-readable output</maml:para>
        <maml:para>- Parses package information in "packagename|version" format returned by Chocolatey</maml:para>
        <maml:para>- Suppresses command output using '*&gt;$null' to avoid console clutter</maml:para>
        <maml:para>- Parameter sets determine validation criteria:</maml:para>
        <maml:para>  * PackageCheck: Only checks if package exists (PackageName parameter only)   * PackageVersionCheck: Checks existence and exact version match (PackageName and Version parameters) - Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
        <maml:para>- Provides detailed debug logging for troubleshooting installation issues</maml:para>
        <maml:para>- Uses ValidateNotNullOrEmpty attribute to ensure parameters contain valid values</maml:para>
        <maml:para>- Returns early if package is not found to avoid unnecessary processing</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Test-ChocolateyPackageInstalled -PackageName "git"</dev:code>
        <dev:remarks>
          <maml:para>Checks if the git package is installed (any version).</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Test-ChocolateyPackageInstalled -PackageName "nodejs" -Version "18.17.0"</dev:code>
        <dev:remarks>
          <maml:para>Checks if nodejs package version 18.17.0 is installed.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$isInstalled = Test-ChocolateyPackageInstalled -PackageName "vscode"
if ($isInstalled) {
    Write-Host "Visual Studio Code is installed"
} else {
    Write-Host "Visual Studio Code is not installed"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates capturing the return value to check installation status.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Test-OperatingSystem</command:name>
      <command:verb>Test</command:verb>
      <command:noun>OperatingSystem</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-OperatingSystem</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Linux</maml:name>
          <maml:description>
            <maml:para>{{ Fill Linux Description }}</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>MacOS</maml:name>
          <maml:description>
            <maml:para>{{ Fill MacOS Description }}</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Windows</maml:name>
          <maml:description>
            <maml:para>{{ Fill Windows Description }}</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Linux</maml:name>
        <maml:description>
          <maml:para>{{ Fill Linux Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>MacOS</maml:name>
        <maml:description>
          <maml:para>{{ Fill MacOS Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Windows</maml:name>
        <maml:description>
          <maml:para>{{ Fill Windows Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Test-PowershellModuleInstalled</command:name>
      <command:verb>Test</command:verb>
      <command:noun>PowershellModuleInstalled</command:noun>
      <maml:description>
        <maml:para>Tests whether a PowerShell module is installed, with optional version and scope validation.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Checks if a PowerShell module is installed on the system and optionally validates specific version requirements and installation scope. Uses `Get-Module -ListAvailable` to find installed modules and examines their installation paths to determine scope (`CurrentUser` vs `AllUsers`). Supports multiple parameter sets to check different combinations of module existence, version matching, and scope validation.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-PowershellModuleInstalled</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ModuleName</maml:name>
          <maml:description>
            <maml:para>The name of the PowerShell module to check. Mandatory for all parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>The specific version of the module to validate. Optional; only used in version-related parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>The installation scope to validate (`CurrentUser` or `AllUsers`). Optional; only used in scope-related parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-PowershellModuleInstalled</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ModuleName</maml:name>
          <maml:description>
            <maml:para>The name of the PowerShell module to check. Mandatory for all parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>The specific version of the module to validate. Optional; only used in version-related parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-PowershellModuleInstalled</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ModuleName</maml:name>
          <maml:description>
            <maml:para>The name of the PowerShell module to check. Mandatory for all parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>The installation scope to validate (`CurrentUser` or `AllUsers`). Optional; only used in scope-related parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>ModuleName</maml:name>
        <maml:description>
          <maml:para>The name of the PowerShell module to check. Mandatory for all parameter sets.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>The specific version of the module to validate. Optional; only used in version-related parameter sets.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>The installation scope to validate (`CurrentUser` or `AllUsers`). Optional; only used in scope-related parameter sets.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>`[InstalledState]`</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns an InstalledState enum value indicating installation status and version/scope match.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns `[InstalledState]::NotInstalled` if not found or criteria are not met.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>Module Paths: - CurrentUser (PS5.1): `$HOME\Documents\WindowsPowerShell\Modules`</maml:para>
        <maml:para>- CurrentUser (PS7+): `$HOME\Documents\PowerShell\Modules`</maml:para>
        <maml:para>- AllUsers (PS5.1): `$Env:ProgramFiles\WindowsPowerShell\Modules`</maml:para>
        <maml:para>- AllUsers (PS7+): `$Env:ProgramFiles\PowerShell\Modules` Parameter Sets: - `ModuleCheck`: Checks if module exists.</maml:para>
        <maml:para>- `ModuleVersionCheck`: Checks existence and exact version match.</maml:para>
        <maml:para>- `ModuleScopeCheck`: Checks existence and scope match.</maml:para>
        <maml:para>- `ModuleVersionAndScopeCheck`: Checks existence, version, and scope match. Behavior: - Returns the highest version when multiple versions are installed.</maml:para>
        <maml:para>- Uses `[InstalledState]` enum for detailed status.</maml:para>
        <maml:para>- Includes error handling and debug logging.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Test-PowershellModuleInstalled -ModuleName "posh-git"
# Checks if the posh-git module is installed (any version, any scope).</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Test-PowershellModuleInstalled -ModuleName "PSReadLine" -Version "2.2.6"
# Checks if PSReadLine module version 2.2.6 is installed.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Test-PowershellModuleInstalled -ModuleName "PowerShellGet" -Scope "AllUsers"
# Checks if PowerShellGet module is installed in AllUsers scope.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
        <dev:code>Test-PowershellModuleInstalled -ModuleName "Az" -Version "9.0.1" -Scope "CurrentUser"
# Checks if Az module version 9.0.1 is installed in CurrentUser scope.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-Module</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Test-RunningAsAdmin</command:name>
      <command:verb>Test</command:verb>
      <command:noun>RunningAsAdmin</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-RunningAsAdmin</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Test-ScoopComponentInstalled</command:name>
      <command:verb>Test</command:verb>
      <command:noun>ScoopComponentInstalled</command:noun>
      <maml:description>
        <maml:para>Tests whether a Scoop package or bucket is installed on the system.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Checks if a specified Scoop package or bucket is installed by querying Scoop export data. For packages, verifies installation status, version match, and global/local scope. For buckets, verifies if the bucket is present in the Scoop configuration.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-ScoopComponentInstalled</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Package</maml:name>
          <maml:description>
            <maml:para>Indicates checking for a package installation. Cannot be used with `-Bucket`.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the package or bucket to check. Required for all parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Global</maml:name>
          <maml:description>
            <maml:para>Specifies checking for global package installation. Optional for package checks; not applicable for bucket checks.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-ScoopComponentInstalled</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Package</maml:name>
          <maml:description>
            <maml:para>Indicates checking for a package installation. Cannot be used with `-Bucket`.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the package or bucket to check. Required for all parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>The specific version to check for when validating package installation. Optional for package checks; not applicable for bucket checks.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Global</maml:name>
          <maml:description>
            <maml:para>Specifies checking for global package installation. Optional for package checks; not applicable for bucket checks.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-ScoopComponentInstalled</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Package</maml:name>
          <maml:description>
            <maml:para>Indicates checking for a package installation. Cannot be used with `-Bucket`.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the package or bucket to check. Required for all parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>The specific version to check for when validating package installation. Optional for package checks; not applicable for bucket checks.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-ScoopComponentInstalled</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Package</maml:name>
          <maml:description>
            <maml:para>Indicates checking for a package installation. Cannot be used with `-Bucket`.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the package or bucket to check. Required for all parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Test-ScoopComponentInstalled</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Bucket</maml:name>
          <maml:description>
            <maml:para>Indicates checking for a bucket installation. Cannot be used with `-Package`.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the package or bucket to check. Required for all parameter sets.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Package</maml:name>
        <maml:description>
          <maml:para>Indicates checking for a package installation. Cannot be used with `-Bucket`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Bucket</maml:name>
        <maml:description>
          <maml:para>Indicates checking for a bucket installation. Cannot be used with `-Package`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the package or bucket to check. Required for all parameter sets.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>The specific version to check for when validating package installation. Optional for package checks; not applicable for bucket checks.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Global</maml:name>
        <maml:description>
          <maml:para>Specifies checking for global package installation. Optional for package checks; not applicable for bucket checks.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>`[InstalledState]`</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns an InstalledState enum value indicating installation status and version match.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns `[InstalledState]::NotInstalled` if not found or Scoop is unavailable.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>Requirements: - Scoop must be installed.</maml:para>
        <maml:para>- Uses `Read-ScoopCache` for cached export data. Behavior: - Returns `[InstalledState]::NotInstalled` if Scoop is not installed.</maml:para>
        <maml:para>- For packages, checks name, version, and global install status.</maml:para>
        <maml:para>- For buckets, checks if the bucket name exists in the configuration.</maml:para>
        <maml:para>- Returns an InstalledState enum value for detailed status. Error Handling: - Provides debug and warning messages for missing Scoop or cache data.</maml:para>
        <maml:para>- Returns `[InstalledState]::NotInstalled` for missing components.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Test-ScoopComponentInstalled -Package -Name "git"
# Checks if the 'git' package is installed via Scoop.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Test-ScoopComponentInstalled -Package -Name "nodejs" -Version "18.17.0"
# Checks if the 'nodejs' package version 18.17.0 is installed via Scoop.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Test-ScoopComponentInstalled -Package -Name "7zip" -Global
# Checks if the '7zip' package is installed globally via Scoop.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
        <dev:code>Test-ScoopComponentInstalled -Bucket -Name "extras"
# Checks if the 'extras' bucket is added to Scoop.</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Test-ScoopInstalled</command:name>
      <command:verb>Test</command:verb>
      <command:noun>ScoopInstalled</command:noun>
      <maml:description>
        <maml:para>Tests whether Scoop package manager is installed on the system.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function checks if Scoop is installed and available on the system by first attempting to locate the scoop command in the PATH, and if not found, checking for Scoop installation files in the default user profile directory. It provides a comprehensive check for both standard installations and cases where Scoop may not be properly added to the PATH environment variable.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-ScoopInstalled</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if Scoop is installed and available, $false otherwise.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Performs multiple checks to ensure reliable detection</maml:para>
        <maml:para>- First checks if 'scoop' command is available in PATH using Get-Command</maml:para>
        <maml:para>- Falls back to checking specific file paths in the user profile directory:</maml:para>
        <maml:para>  * ~\scoop\shims\scoop.ps1 (PowerShell script)   * ~\scoop\shims\scoop.cmd (Command batch file)   * ~\scoop\shims\scoop (Executable) - Does not verify that Scoop is functional, only that installation files exist</maml:para>
        <maml:para>- Suppresses errors when checking for the scoop command to avoid console output</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Test-ScoopInstalled</dev:code>
        <dev:remarks>
          <maml:para>Checks if Scoop is installed on the current system.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>if (Test-ScoopInstalled) {
    Write-Host "Scoop is available"
    # Proceed with Scoop operations
} else {
    Write-Host "Scoop is not installed"
    # Install Scoop or handle the missing dependency
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates using the function result to conditionally execute Scoop-dependent code.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$scoopAvailable = Test-ScoopInstalled
switch ($scoopAvailable) {
    $true { "Scoop package manager detected" }
    $false { "Scoop package manager not found" }
}</dev:code>
        <dev:remarks>
          <maml:para>Shows capturing the boolean result for later use.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Uninstall-ChocolateyPackage</command:name>
      <command:verb>Uninstall</command:verb>
      <command:noun>ChocolateyPackage</command:noun>
      <maml:description>
        <maml:para>Uninstalls a Chocolatey package and its dependencies from the system.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function removes a Chocolatey package from the system using the 'choco uninstall' command. It validates administrator privileges before proceeding, handles package dependencies by uninstalling them first, and removes all versions of the specified package including metapackages. The function provides comprehensive error handling and uses exit codes to verify successful uninstallation.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Uninstall-ChocolateyPackage</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>The name of the Chocolatey package to uninstall. This parameter is mandatory and must be a valid, non-empty string representing an installed Chocolatey package name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>The name of the Chocolatey package to uninstall. This parameter is mandatory and must be a valid, non-empty string representing an installed Chocolatey package name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the package and all dependencies were successfully uninstalled.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the uninstallation failed or insufficient privileges.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires administrator privileges to uninstall packages</maml:para>
        <maml:para>- Uses Test-RunningAsAdmin to validate privileges before proceeding</maml:para>
        <maml:para>- Throws an exception if not running as administrator</maml:para>
        <maml:para>- Handles package dependencies by uninstalling them first using Get-ChocolateyPackageDependencies</maml:para>
        <maml:para>- Uses recursive calls to uninstall dependency packages before the main package</maml:para>
        <maml:para>- Automatically handles metapackages (packages ending with .install)</maml:para>
        <maml:para>- Uses 'choco uninstall' with -y flag for automatic confirmation</maml:para>
        <maml:para>- Uses --all-versions flag to remove all installed versions of the package</maml:para>
        <maml:para>- Uses $LASTEXITCODE to verify command execution success</maml:para>
        <maml:para>- Suppresses command output using Out-Null to avoid console clutter</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
        <maml:para>- Provides detailed debug logging for troubleshooting uninstallation issues</maml:para>
        <maml:para>- Checks for and removes associated .install metapackages after main package removal</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Uninstall-ChocolateyPackage -PackageName "git"</dev:code>
        <dev:remarks>
          <maml:para>Uninstalls the git package and any dependent packages from the system.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$result = Uninstall-ChocolateyPackage -PackageName "nodejs"
if ($result) {
    Write-Host "Node.js and dependencies removed successfully"
} else {
    Write-Host "Failed to remove Node.js"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates capturing the return value to check uninstallation success.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>@("git", "nodejs", "vscode") | ForEach-Object {
    Uninstall-ChocolateyPackage -PackageName $_
}</dev:code>
        <dev:remarks>
          <maml:para>Shows bulk uninstallation of multiple packages with dependency handling.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Uninstall-ChocolateyPackages</command:name>
      <command:verb>Uninstall</command:verb>
      <command:noun>ChocolateyPackages</command:noun>
      <maml:description>
        <maml:para>Uninstalls multiple Chocolatey packages from the system based on YAML configuration.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function removes multiple Chocolatey packages specified in a DevSetup YAML configuration. It validates administrator privileges, parses the configuration for Chocolatey package definitions, and systematically uninstalls each package. The function supports both simple string format and complex object format for package specifications, handles version constraints, and provides comprehensive progress reporting during the uninstallation process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Uninstall-ChocolateyPackages</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>YamlData</maml:name>
          <maml:description>
            <maml:para>The parsed YAML configuration data containing Chocolatey package definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.chocolatey.packages containing an array of package specifications.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
          <dev:type>
            <maml:name>PSObject</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>YamlData</maml:name>
        <maml:description>
          <maml:para>The parsed YAML configuration data containing Chocolatey package definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.chocolatey.packages containing an array of package specifications.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
        <dev:type>
          <maml:name>PSObject</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if all packages are successfully processed (even if some individual uninstalls fail).</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the operation encounters critical errors or cannot proceed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires administrator privileges to uninstall Chocolatey packages</maml:para>
        <maml:para>- Uses Test-RunningAsAdmin to validate privileges before proceeding</maml:para>
        <maml:para>- Throws an exception if not running as administrator</maml:para>
        <maml:para>- Updates Chocolatey cache using Write-ChocolateyCache before uninstallation</maml:para>
        <maml:para>- Skips uninstallation gracefully if no Chocolatey packages are found in configuration</maml:para>
        <maml:para>- Supports two package specification formats:</maml:para>
        <maml:para>  * Simple string: "packagename"   * Complex object: @{ name = "packagename"; version = "1.0.0" } - Validates package names and skips entries with missing names</maml:para>
        <maml:para>- Uses Uninstall-ChocolateyPackage for individual package removal</maml:para>
        <maml:para>- Provides detailed progress reporting with package counts and status indicators</maml:para>
        <maml:para>- Uses color-coded console output: Cyan for progress, Gray for package status, Green/Red for results</maml:para>
        <maml:para>- Continues processing remaining packages even if individual uninstalls fail</maml:para>
        <maml:para>- Returns $true for overall success even with individual package failures</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>$config = Read-ConfigurationFile -Path "environment.yaml"
Uninstall-ChocolateyPackages -YamlData $config</dev:code>
        <dev:remarks>
          <maml:para>Uninstalls all Chocolatey packages defined in the environment.yaml configuration.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$yamlData = @{
    devsetup = @{
        dependencies = @{
            chocolatey = @{
                packages = @("git", "nodejs", "vscode")
            }
        }
    }
}
Uninstall-ChocolateyPackages -YamlData $yamlData</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates uninstalling packages using a programmatically created configuration.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>if (Uninstall-ChocolateyPackages -YamlData $config) {
    Write-Host "All Chocolatey packages processed successfully"
} else {
    Write-Host "Chocolatey uninstallation encountered errors"
}</dev:code>
        <dev:remarks>
          <maml:para>Shows checking the return value to verify uninstallation completion.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Uninstall-DevSetupEnv</command:name>
      <command:verb>Uninstall</command:verb>
      <command:noun>DevSetupEnv</command:noun>
      <maml:description>
        <maml:para>Uninstalls a development environment configuration and removes all associated packages.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function removes a complete development environment by uninstalling all packages and components defined in a YAML configuration file. It processes PowerShell modules, Chocolatey packages, and Scoop packages in sequence, effectively reversing the installation performed by Install-DevSetupEnv. The function validates the configuration file exists and can be parsed before proceeding with the uninstallation process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Uninstall-DevSetupEnv</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the environment configuration to uninstall. This parameter is mandatory and must match an existing YAML configuration file in the DevSetup environments directory. The file should be named "{Name}.yaml" and contain valid DevSetup configuration structure.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the environment configuration to uninstall. This parameter is mandatory and must match an existing YAML configuration file in the DevSetup environments directory. The file should be named "{Name}.yaml" and contain valid DevSetup configuration structure.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>This function does not return a value but provides console output indicating the progress of uninstallation operations.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires the specified environment configuration file to exist in the DevSetup environments directory</maml:para>
        <maml:para>- Uses Get-DevSetupEnvPath to locate the environments directory</maml:para>
        <maml:para>- Validates YAML file existence before attempting to parse configuration</maml:para>
        <maml:para>- Processes uninstallation in specific order:</maml:para>
        <maml:para>  1. PowerShell modules via Uninstall-PowershellModules   2. Chocolatey packages via Uninstall-ChocolateyPackages
3. Scoop packages via Uninstall-ScoopComponents - Each uninstaller function handles its own error reporting and validation</maml:para>
        <maml:para>- Does not remove the YAML configuration file itself after uninstallation</maml:para>
        <maml:para>- Provides descriptive error messages for missing or invalid configuration files</maml:para>
        <maml:para>- Status variables are assigned but not currently used for flow control</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Uninstall-DevSetupEnv -Name "WebDev"</dev:code>
        <dev:remarks>
          <maml:para>Uninstalls all packages and components from the "WebDev" environment configuration.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Uninstall-DevSetupEnv "DataScience"</dev:code>
        <dev:remarks>
          <maml:para>Removes the complete "DataScience" development environment using positional parameter.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$envName = "GameDev"
Uninstall-DevSetupEnv -Name $envName</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates using a variable to specify the environment name for uninstallation.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Uninstall-PowershellModule</command:name>
      <command:verb>Uninstall</command:verb>
      <command:noun>PowershellModule</command:noun>
      <maml:description>
        <maml:para>Uninstalls a PowerShell module from the system.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function removes a PowerShell module from the system by first removing it from the current session using Remove-Module, then uninstalling it completely using Uninstall-Module. The function includes validation to check if the module is installed before attempting removal, validates administrator  privileges for AllUsers scope modules, and provides comprehensive error handling throughout the  uninstallation process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Uninstall-PowershellModule</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>ModuleName</maml:name>
          <maml:description>
            <maml:para>The name of the PowerShell module to uninstall. This parameter is mandatory and must be a valid string representing an installed PowerShell module name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>ModuleName</maml:name>
        <maml:description>
          <maml:para>The name of the PowerShell module to uninstall. This parameter is mandatory and must be a valid string representing an installed PowerShell module name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the module was successfully uninstalled or was not installed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the uninstallation failed or insufficient privileges for AllUsers modules.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Uses Test-PowershellModuleInstalled to verify module existence before attempting removal</maml:para>
        <maml:para>- Returns $true if module is not installed (considered successful since goal is achieved)</maml:para>
        <maml:para>- Validates administrator privileges for AllUsers scope modules using Test-RunningAsAdmin</maml:para>
        <maml:para>- Returns $false immediately if AllUsers module requires elevation but session is not elevated</maml:para>
        <maml:para>- Performs two-step removal process:</maml:para>
        <maml:para>  1. Remove-Module: Removes from current PowerShell session (with -Force flag)   2. Uninstall-Module: Completely removes from system (with -Force flag) - Uses -ErrorAction Stop for proper exception handling</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
        <maml:para>- Provides detailed debug logging for troubleshooting uninstallation issues</maml:para>
        <maml:para>- Uses Write-Warning for non-critical issues (module not found, privilege issues)</maml:para>
        <maml:para>- Uses Write-Error for actual uninstallation failures</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Uninstall-PowershellModule -ModuleName "posh-git"</dev:code>
        <dev:remarks>
          <maml:para>Uninstalls the posh-git module from the system.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$result = Uninstall-PowershellModule -ModuleName "PSReadLine"
if ($result) {
    Write-Host "PSReadLine module removed successfully"
} else {
    Write-Host "Failed to remove PSReadLine module"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates capturing the return value to check uninstallation success.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>@("Module1", "Module2", "Module3") | ForEach-Object {
    Uninstall-PowershellModule -ModuleName $_
}</dev:code>
        <dev:remarks>
          <maml:para>Shows bulk uninstallation of multiple modules.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Uninstall-PowershellModules</command:name>
      <command:verb>Uninstall</command:verb>
      <command:noun>PowershellModules</command:noun>
      <maml:description>
        <maml:para>Uninstalls multiple PowerShell modules from the system based on YAML configuration.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function removes multiple PowerShell modules specified in a DevSetup YAML configuration. It validates administrator privileges when required, parses the configuration for PowerShell module definitions, and systematically uninstalls each module. The function supports both simple string format and complex object format for module specifications, handles scope settings, and provides comprehensive progress reporting during the uninstallation process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Uninstall-PowershellModules</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>YamlData</maml:name>
          <maml:description>
            <maml:para>The parsed YAML configuration data containing PowerShell module definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.powershell.modules containing an array of module specifications.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
          <dev:type>
            <maml:name>PSObject</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>YamlData</maml:name>
        <maml:description>
          <maml:para>The parsed YAML configuration data containing PowerShell module definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.powershell.modules containing an array of module specifications.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
        <dev:type>
          <maml:name>PSObject</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if all modules are successfully processed (even if some individual uninstalls fail).</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the operation encounters critical errors or cannot proceed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires administrator privileges when uninstalling from AllUsers scope</maml:para>
        <maml:para>- Uses Test-RunningAsAdmin to validate privileges when scope is AllUsers</maml:para>
        <maml:para>- Throws an exception if AllUsers scope is specified without administrator privileges</maml:para>
        <maml:para>- Skips uninstallation gracefully if no PowerShell modules are found in configuration</maml:para>
        <maml:para>- Supports two module specification formats:</maml:para>
        <maml:para>  * Simple string: "ModuleName"   * Complex object: @{ name = "ModuleName"; minimumVersion = "1.0.0"; scope = "CurrentUser" } - Global scope setting defaults to CurrentUser if not specified in configuration</maml:para>
        <maml:para>- Module-specific scope settings override the global scope setting</maml:para>
        <maml:para>- Validates module names and skips entries with missing names</maml:para>
        <maml:para>- Uses Uninstall-PowerShellModule for individual module removal</maml:para>
        <maml:para>- Provides detailed progress reporting with module counts and version information</maml:para>
        <maml:para>- Uses color-coded console output: Cyan for progress, Gray for module status, Green/Red for results</maml:para>
        <maml:para>- Continues processing remaining modules even if individual uninstalls fail</maml:para>
        <maml:para>- Returns $true for overall success even with individual module failures</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>$config = Read-ConfigurationFile -Path "environment.yaml"
Uninstall-PowershellModules -YamlData $config</dev:code>
        <dev:remarks>
          <maml:para>Uninstalls all PowerShell modules defined in the environment.yaml configuration.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$yamlData = @{
    devsetup = @{
        dependencies = @{
            powershell = @{
                scope = "CurrentUser"
                modules = @("PSReadLine", "Pester", "PowerShellGet")
            }
        }
    }
}
Uninstall-PowershellModules -YamlData $yamlData</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates uninstalling modules using a programmatically created configuration.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>if (Uninstall-PowershellModules -YamlData $config) {
    Write-Host "All PowerShell modules processed successfully"
} else {
    Write-Host "PowerShell module uninstallation encountered errors"
}</dev:code>
        <dev:remarks>
          <maml:para>Shows checking the return value to verify uninstallation completion.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Uninstall-ScoopBucket</command:name>
      <command:verb>Uninstall</command:verb>
      <command:noun>ScoopBucket</command:noun>
      <maml:description>
        <maml:para>Uninstalls a Scoop bucket from the system.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function removes a Scoop bucket using the 'scoop bucket rm' command. It validates Scoop installation, locates the Scoop command, and checks if the bucket is currently installed before attempting removal. The function provides comprehensive error handling and updates the Scoop cache after successful removal operations.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Uninstall-ScoopBucket</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the Scoop bucket to uninstall. This parameter is mandatory and must be a valid, non-empty string representing an installed Scoop bucket name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the Scoop bucket to uninstall. This parameter is mandatory and must be a valid, non-empty string representing an installed Scoop bucket name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the bucket is successfully uninstalled or already uninstalled.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the uninstallation fails or Scoop is not available.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Scoop to be installed on the system</maml:para>
        <maml:para>- Uses Test-ScoopInstalled to validate Scoop availability</maml:para>
        <maml:para>- Uses Find-Scoop to locate the Scoop command executable</maml:para>
        <maml:para>- Returns $false immediately if Scoop is not available or cannot be found</maml:para>
        <maml:para>- Uses Test-ScoopComponentInstalled to check if bucket is currently installed</maml:para>
        <maml:para>- Returns $true if bucket is already uninstalled (idempotent behavior)</maml:para>
        <maml:para>- Executes 'scoop bucket rm' command with output suppression</maml:para>
        <maml:para>- Uses $LASTEXITCODE to verify command execution success</maml:para>
        <maml:para>- Updates Scoop cache using Write-ScoopCache after successful removal</maml:para>
        <maml:para>- Provides debug logging for successful and skipped operations</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
        <maml:para>- Suppresses all command output using *&gt; $null to avoid console clutter</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Uninstall-ScoopBucket -Name "extras"</dev:code>
        <dev:remarks>
          <maml:para>Uninstalls the "extras" bucket from Scoop.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$result = Uninstall-ScoopBucket -Name "java"
if ($result) {
    Write-Host "Java bucket removed successfully"
} else {
    Write-Host "Failed to remove Java bucket"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates capturing the return value to check uninstallation success.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>@("extras", "versions", "java") | ForEach-Object {
    Uninstall-ScoopBucket -Name $_
}</dev:code>
        <dev:remarks>
          <maml:para>Shows bulk uninstallation of multiple Scoop buckets.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Uninstall-ScoopComponents</command:name>
      <command:verb>Uninstall</command:verb>
      <command:noun>ScoopComponents</command:noun>
      <maml:description>
        <maml:para>Uninstalls multiple Scoop components (buckets and packages) from the system based on YAML configuration.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function removes multiple Scoop components specified in a DevSetup YAML configuration. It validates Scoop installation, parses the configuration for bucket and package definitions, and systematically uninstalls components in the correct order (buckets first, then packages). The function supports both simple string format and complex object format for component specifications, handles global installations, and provides comprehensive progress reporting during the uninstallation process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Uninstall-ScoopComponents</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>YamlData</maml:name>
          <maml:description>
            <maml:para>The parsed YAML configuration data containing Scoop component definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.scoop containing buckets and/or packages arrays.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
          <dev:type>
            <maml:name>PSObject</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>YamlData</maml:name>
        <maml:description>
          <maml:para>The parsed YAML configuration data containing Scoop component definitions. This parameter is mandatory and must be a PSCustomObject with the structure: devsetup.dependencies.scoop containing buckets and/or packages arrays.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
        <dev:type>
          <maml:name>PSObject</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if all components are successfully processed (even if some individual uninstalls fail).</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if the operation encounters critical errors, Scoop is not installed, or cannot proceed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Scoop to be installed on the system</maml:para>
        <maml:para>- Uses Test-ScoopInstalled to validate Scoop availability before proceeding</maml:para>
        <maml:para>- Updates Scoop cache using Write-ScoopCache before uninstallation begins</maml:para>
        <maml:para>- Processes components in specific order: buckets first, then packages</maml:para>
        <maml:para>- Skips uninstallation gracefully if Scoop configuration sections are not found</maml:para>
        <maml:para>- Supports two component specification formats for both buckets and packages:</maml:para>
        <maml:para>  * Simple string: "componentname"   * Complex object: @{ name = "componentname"; version = "1.0.0"; bucket = "extras"; global = $true } - Bucket objects support: name and source properties</maml:para>
        <maml:para>- Package objects support: name, version, bucket, and global properties</maml:para>
        <maml:para>- Validates component names and skips entries with missing names</maml:para>
        <maml:para>- Uses Uninstall-ScoopBucket and Uninstall-ScoopPackage for individual component removal</maml:para>
        <maml:para>- Provides detailed progress reporting with component counts and property information</maml:para>
        <maml:para>- Uses color-coded console output: Cyan for progress, Gray for component status, Green/Red for results</maml:para>
        <maml:para>- Continues processing remaining components even if individual uninstalls fail</maml:para>
        <maml:para>- Returns $true for overall success even with individual component failures</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
        <maml:para>- Displays formatted component information including version, bucket, and global flags</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>$config = Read-ConfigurationFile -Path "environment.yaml"
Uninstall-ScoopComponents -YamlData $config</dev:code>
        <dev:remarks>
          <maml:para>Uninstalls all Scoop buckets and packages defined in the environment.yaml configuration.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>$yamlData = @{
    devsetup = @{
        dependencies = @{
            scoop = @{
                buckets = @("extras", "versions")
                packages = @("git", "nodejs", "python")
            }
        }
    }
}
Uninstall-ScoopComponents -YamlData $yamlData</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates uninstalling components using a programmatically created configuration.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>if (Uninstall-ScoopComponents -YamlData $config) {
    Write-Host "All Scoop components processed successfully"
} else {
    Write-Host "Scoop component uninstallation encountered errors"
}</dev:code>
        <dev:remarks>
          <maml:para>Shows checking the return value to verify uninstallation completion.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Uninstall-ScoopPackage</command:name>
      <command:verb>Uninstall</command:verb>
      <command:noun>ScoopPackage</command:noun>
      <maml:description>
        <maml:para>Uninstalls a Scoop package from the system.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function removes a specified Scoop package from the system by executing the 'scoop uninstall' command. It includes validation to ensure Scoop is installed and available before attempting the uninstall operation. The function checks if the package is installed before attempting removal and provides error handling with  a boolean result indicating success or failure.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Uninstall-ScoopPackage</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>The name of the Scoop package to uninstall. This parameter is mandatory and must be a valid string representing an installed Scoop package.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Global</maml:name>
          <maml:description>
            <maml:para>{{ Fill Global Description }}</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>The name of the Scoop package to uninstall. This parameter is mandatory and must be a valid string representing an installed Scoop package.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Global</maml:name>
        <maml:description>
          <maml:para>{{ Fill Global Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the package was successfully uninstalled or if the package was not installed,</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>$false if the uninstall operation failed.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Scoop to be installed on the system</maml:para>
        <maml:para>- Uses Test-ScoopPackageInstalled function to verify package existence before uninstall</maml:para>
        <maml:para>- Returns $true if package is not installed (considered successful since goal is achieved)</maml:para>
        <maml:para>- Returns $false immediately if Scoop is not installed or cannot be found</maml:para>
        <maml:para>- Provides warning messages for common failure scenarios</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Uninstall-ScoopPackage -PackageName "git"</dev:code>
        <dev:remarks>
          <maml:para>Uninstalls the 'git' package from Scoop.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Uninstall-ScoopPackage -PackageName "nodejs"</dev:code>
        <dev:remarks>
          <maml:para>Removes the 'nodejs' package from the system via Scoop.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$result = Uninstall-ScoopPackage -PackageName "7zip"
if ($result) {
    Write-Host "7zip successfully removed or was not installed"
} else {
    Write-Host "Failed to remove 7zip"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates capturing the return value to check uninstall success.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Use-DevSetup</command:name>
      <command:verb>Use</command:verb>
      <command:noun>DevSetup</command:noun>
      <maml:description>
        <maml:para>Manages development environment configurations using the DevSetup module.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Use-DevSetup is the main function for managing development environments. It provides actions to install, update, initialize, export, list, and uninstall development environment configurations. The function supports multiple installation sources including local configurations by name, remote URLs, and local file paths.</maml:para>
      <maml:para>Run 'Use-DevSetup -Init' first to set up the DevSetup environment and initialize the necessary directory structure and configuration files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Use-DevSetup</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Install</maml:name>
          <maml:description>
            <maml:para>Installs a development environment from a configuration file. Can be used with Name, Url, or FilePath parameters.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>The local file path to a configuration file to install. Used with the Install action for local file installations.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Use-DevSetup</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Install</maml:name>
          <maml:description>
            <maml:para>Installs a development environment from a configuration file. Can be used with Name, Url, or FilePath parameters.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Url</maml:name>
          <maml:description>
            <maml:para>The URL of a remote configuration file to install. Used with the Install action for remote installations.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Use-DevSetup</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Install</maml:name>
          <maml:description>
            <maml:para>Installs a development environment from a configuration file. Can be used with Name, Url, or FilePath parameters.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the environment configuration to use. Required for Install, Update, Export, and Uninstall actions when using local configurations.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Use-DevSetup</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Update</maml:name>
          <maml:description>
            <maml:para>Updates an existing development environment configuration. Requires the Name parameter.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the environment configuration to use. Required for Install, Update, Export, and Uninstall actions when using local configurations.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Use-DevSetup</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Init</maml:name>
          <maml:description>
            <maml:para>Initializes the DevSetup environment and sets up the necessary directory structure and configuration files. This should be run first before using other actions.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Use-DevSetup</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Export</maml:name>
          <maml:description>
            <maml:para>Exports the current development environment to a configuration file. Requires the Name parameter to specify the name for the exported configuration.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the environment configuration to use. Required for Install, Update, Export, and Uninstall actions when using local configurations.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Use-DevSetup</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>List</maml:name>
          <maml:description>
            <maml:para>Lists all available development environment configurations.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Platform</maml:name>
          <maml:description>
            <maml:para>The platform to filter environments by when using the List action. Use "current" (default) to show environments for the current platform, "all" to show all environments, or specify a platform like "Windows", "Linux", "macOS".</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Current</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Use-DevSetup</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Uninstall</maml:name>
          <maml:description>
            <maml:para>Uninstalls a development environment configuration. Requires the Name parameter.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the environment configuration to use. Required for Install, Update, Export, and Uninstall actions when using local configurations.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Install</maml:name>
        <maml:description>
          <maml:para>Installs a development environment from a configuration file. Can be used with Name, Url, or FilePath parameters.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Update</maml:name>
        <maml:description>
          <maml:para>Updates an existing development environment configuration. Requires the Name parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Init</maml:name>
        <maml:description>
          <maml:para>Initializes the DevSetup environment and sets up the necessary directory structure and configuration files. This should be run first before using other actions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Export</maml:name>
        <maml:description>
          <maml:para>Exports the current development environment to a configuration file. Requires the Name parameter to specify the name for the exported configuration.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>List</maml:name>
        <maml:description>
          <maml:para>Lists all available development environment configurations.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Uninstall</maml:name>
        <maml:description>
          <maml:para>Uninstalls a development environment configuration. Requires the Name parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the environment configuration to use. Required for Install, Update, Export, and Uninstall actions when using local configurations.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Url</maml:name>
        <maml:description>
          <maml:para>The URL of a remote configuration file to install. Used with the Install action for remote installations.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>The local file path to a configuration file to install. Used with the Install action for local file installations.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Platform</maml:name>
        <maml:description>
          <maml:para>The platform to filter environments by when using the List action. Use "current" (default) to show environments for the current platform, "all" to show all environments, or specify a platform like "Windows", "Linux", "macOS".</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>Current</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the action completes successfully, $false otherwise.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Run 'Use-DevSetup -Init' first to initialize the DevSetup environment before using other actions</maml:para>
        <maml:para>- Only one action can be specified at a time using parameter sets</maml:para>
        <maml:para>- Supports three installation methods:</maml:para>
        <maml:para>  * By Name: Uses local configuration files from the DevSetup directory   * By URL: Downloads and installs from a remote configuration file   * By Path: Installs from a local file path outside the DevSetup directory - The function validates input and provides appropriate error messages for invalid combinations</maml:para>
        <maml:para>- Displays formatted progress headers with color-coded output for better user experience</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling with descriptive error messages</maml:para>
        <maml:para>- Update and Uninstall actions are marked as TODO and not yet implemented</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Use-DevSetup -Init</dev:code>
        <dev:remarks>
          <maml:para>Initializes the DevSetup environment. Run this first to set up the necessary directory structure and configuration files.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>Use-DevSetup -List</dev:code>
        <dev:remarks>
          <maml:para>Lists development environment configurations for the current platform.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>Use-DevSetup -List -Platform "all"</dev:code>
        <dev:remarks>
          <maml:para>Lists all available development environment configurations regardless of platform.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
        <dev:code>Use-DevSetup -List -Platform "Linux"</dev:code>
        <dev:remarks>
          <maml:para>Lists development environment configurations specifically for Linux.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 5 --------------------------</maml:title>
        <dev:code>Use-DevSetup -Install -Name "WebDev"</dev:code>
        <dev:remarks>
          <maml:para>Installs the development environment using the "WebDev" configuration from local configurations.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 6 --------------------------</maml:title>
        <dev:code>Use-DevSetup -Install -Url "https://raw.githubusercontent.com/user/configs/main/webdev.devsetup"</dev:code>
        <dev:remarks>
          <maml:para>Installs a development environment from a remote configuration file URL.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 7 --------------------------</maml:title>
        <dev:code>Use-DevSetup -Install -Path "C:\Configs\MySetup.devsetup"</dev:code>
        <dev:remarks>
          <maml:para>Installs a development environment from a local configuration file path.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 8 --------------------------</maml:title>
        <dev:code>Use-DevSetup -Update -Name "WebDev"</dev:code>
        <dev:remarks>
          <maml:para>Updates the existing "WebDev" development environment with any new packages or changes.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 9 --------------------------</maml:title>
        <dev:code>Use-DevSetup -Export -Name "MyCurrentSetup"</dev:code>
        <dev:remarks>
          <maml:para>Exports the current system's installed packages and tools to a new configuration file named "MyCurrentSetup".</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 10 --------------------------</maml:title>
        <dev:code>Use-DevSetup -Uninstall -Name "WebDev"</dev:code>
        <dev:remarks>
          <maml:para>Uninstalls all packages and tools associated with the "WebDev" configuration.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Write-ChocolateyCache</command:name>
      <command:verb>Write</command:verb>
      <command:noun>ChocolateyCache</command:noun>
      <maml:description>
        <maml:para>Writes current Chocolatey package information to the DevSetup cache file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function exports the current Chocolatey package installation data and writes it to the DevSetup cache file for performance optimization and offline reference. It validates Chocolatey installation, executes 'choco list -r' to generate machine-readable package data, and saves the output to the cache file. The function provides comprehensive error handling and validation throughout the process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Write-ChocolateyCache</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the cache file is successfully written.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if Chocolatey is not installed or the write operation fails.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Chocolatey to be installed on the system</maml:para>
        <maml:para>- Uses Test-ChocolateyInstalled to validate Chocolatey availability</maml:para>
        <maml:para>- Returns $false immediately if Chocolatey is not available</maml:para>
        <maml:para>- Executes 'choco list -r' to generate machine-readable package data with pipe-delimited format</maml:para>
        <maml:para>- Uses Get-ChocolateyCacheFile to determine the cache file location</maml:para>
        <maml:para>- Overwrites existing cache file using -Force flag</maml:para>
        <maml:para>- Provides debug logging for successful cache operations</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling for command execution and file operations</maml:para>
        <maml:para>- Uses Set-Content for reliable file writing with proper encoding</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Write-ChocolateyCache</dev:code>
        <dev:remarks>
          <maml:para>Exports current Chocolatey packages and writes them to the cache file.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>if (Write-ChocolateyCache) {
    Write-Host "Chocolatey cache updated successfully"
} else {
    Write-Host "Failed to update Chocolatey cache"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates checking the return value to verify cache update success.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$cacheUpdated = Write-ChocolateyCache
if ($cacheUpdated) {
    $cachedData = Read-ChocolateyCache
}</dev:code>
        <dev:remarks>
          <maml:para>Shows writing cache data and then reading it back for use.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Write-NewConfig</command:name>
      <command:verb>Write</command:verb>
      <command:noun>NewConfig</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Write-NewConfig</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>OutFile</maml:name>
          <maml:description>
            <maml:para>{{ Fill OutFile Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>OutFile</maml:name>
        <maml:description>
          <maml:para>{{ Fill OutFile Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Write-ScoopCache</command:name>
      <command:verb>Write</command:verb>
      <command:noun>ScoopCache</command:noun>
      <maml:description>
        <maml:para>Writes current Scoop package information to the DevSetup cache file.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This function exports the current Scoop package installation data and writes it to the DevSetup cache file for performance optimization and offline reference. It validates Scoop installation, locates the Scoop command, and uses 'scoop export' to generate package data before saving it to the cache file. The function provides comprehensive error handling and validation throughout the process.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Write-ScoopCache</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes />
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>[System.Boolean]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $true if the cache file is successfully written.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Returns $false if Scoop is not installed, cannot be found, or the write operation fails.</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>- Requires Scoop to be installed on the system</maml:para>
        <maml:para>- Uses Test-ScoopInstalled to validate Scoop availability</maml:para>
        <maml:para>- Uses Find-Scoop to locate the Scoop command executable</maml:para>
        <maml:para>- Executes 'scoop export' to generate current package data</maml:para>
        <maml:para>- Uses Get-ScoopCacheFile to determine the cache file location</maml:para>
        <maml:para>- Overwrites existing cache file using -Force flag</maml:para>
        <maml:para>- Provides debug logging for successful cache operations</maml:para>
        <maml:para>- Returns $false immediately if Scoop is not available</maml:para>
        <maml:para>- Includes comprehensive try-catch error handling for file operations</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
        <dev:code>Write-ScoopCache</dev:code>
        <dev:remarks>
          <maml:para>Exports current Scoop packages and writes them to the cache file.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
        <dev:code>if (Write-ScoopCache) {
    Write-Host "Scoop cache updated successfully"
} else {
    Write-Host "Failed to update Scoop cache"
}</dev:code>
        <dev:remarks>
          <maml:para>Demonstrates checking the return value to verify cache update success.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
        <dev:code>$cacheUpdated = Write-ScoopCache
if ($cacheUpdated) {
    $cachedData = Read-ScoopCache
}</dev:code>
        <dev:remarks>
          <maml:para>Shows writing cache data and then reading it back for use.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Write-StatusMessage</command:name>
      <command:verb>Write</command:verb>
      <command:noun>StatusMessage</command:noun>
      <maml:description>
        <maml:para>{{ Fill in the Synopsis }}</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>{{ Fill in the Description }}</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Write-StatusMessage</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>Message</maml:name>
          <maml:description>
            <maml:para>{{ Fill Message Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ForegroundColor</maml:name>
          <maml:description>
            <maml:para>{{ Fill ForegroundColor Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Indent</maml:name>
          <maml:description>
            <maml:para>{{ Fill Indent Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Int32</command:parameterValue>
          <dev:type>
            <maml:name>Int32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>NoNewLine</maml:name>
          <maml:description>
            <maml:para>{{ Fill NoNewLine Description }}</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Verbosity</maml:name>
          <maml:description>
            <maml:para>{{ Fill Verbosity Description }}</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Verbose</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Debug</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Warning</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Error</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
          <dev:type>
            <maml:name>String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Width</maml:name>
          <maml:description>
            <maml:para>{{ Fill Width Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Int32</command:parameterValue>
          <dev:type>
            <maml:name>Int32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
          <maml:name>ProgressAction</maml:name>
          <maml:description>
            <maml:para>{{ Fill ProgressAction Description }}</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
          <dev:type>
            <maml:name>ActionPreference</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>ForegroundColor</maml:name>
        <maml:description>
          <maml:para>{{ Fill ForegroundColor Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Indent</maml:name>
        <maml:description>
          <maml:para>{{ Fill Indent Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Int32</command:parameterValue>
        <dev:type>
          <maml:name>Int32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>Message</maml:name>
        <maml:description>
          <maml:para>{{ Fill Message Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>NoNewLine</maml:name>
        <maml:description>
          <maml:para>{{ Fill NoNewLine Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Verbosity</maml:name>
        <maml:description>
          <maml:para>{{ Fill Verbosity Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Width</maml:name>
        <maml:description>
          <maml:para>{{ Fill Width Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Int32</command:parameterValue>
        <dev:type>
          <maml:name>Int32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="proga">
        <maml:name>ProgressAction</maml:name>
        <maml:description>
          <maml:para>{{ Fill ProgressAction Description }}</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">ActionPreference</command:parameterValue>
        <dev:type>
          <maml:name>ActionPreference</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>PS C:\&gt; {{ Add example code here }}</dev:code>
        <dev:remarks>
          <maml:para>{{ Add example description here }}</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
</helpItems>